<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>让创意更有黏性：创意直抵人心的六条路径</title>
      <link href="/9787508642796/"/>
      <url>/9787508642796/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/9787508642796/image-20221019225943682.png" alt="书籍简介"></p><p>什么样的观点或创意具有强有力的黏性，能被他人牢牢记住？</p><p>本书根据大量的社会心理学研究案例，揭示让创意直抵人心的六条路径，即简单（精炼核心信息）、意外（吸引维持注意）、具体（帮人理解记忆）、可信（让人愿意相信）、情感（使人关心在乎）和故事（促人起而行动）。</p><p><img src="/../images/9787508642796/outline.jpg" alt="核心要点"></p><h2 id="黏性"><a href="#黏性" class="headerlink" title="黏性"></a>黏性</h2><p>1、黏性是指创意与观点能让人听懂，能被人记住，并形成持久的影响，即能够改变受众的思想或行为。</p><p>2、黏性创意的六大原则包括简单、意外、具体、可信、情感和故事。</p><p><img src="/../images/9787508642796/principle.png" alt="黏性创意6大原则"></p><p>3、要让创意产生黏性，有效而又持久，必须得让观众：集中注意听（意外）→ 听懂并记住（具体）→ 同意或相信（可信）→ 关心、在乎（情感）→ 能起而行动（故事）。</p><h2 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h2><p>1、简单是指找到观点的核心，找到核心是指剥去外壳，直击本质。</p><p>2、要让创意产生黏性有两大步骤，第一步找到核心；第二步借助六大原则检查表转换核心。</p><p>3、简单＝核心 + 精炼，说法之精炼，不仅应该黏性足够强、意义深远，还要能影响他人，即长期经验提炼出的（核心）简短句子（精炼）。</p><p>4、人们可通过插旗子的办法唤起听众脑中已有的记忆，运用对方已知的现成知识，让有深度的想法变得精炼，在简短的信息中装进更多内容。基模是某种概念或类别的一般属性集合，它由记忆中预先储存的海量信息组成，可帮助人们借用简单的材料组建出复杂的信息。</p><p>5、生成性类比和谚语的力量都来自同一种巧妙的替代法，即用简单易懂的东西替换复杂的东西。</p><h2 id="意外"><a href="#意外" class="headerlink" title="意外"></a>意外</h2><p>1、信息沟通的首要难题是吸引他人注意，其最基本的方法是打破常规。</p><p>2、有黏性的观点通常都能激起两种情绪，一是惊讶（吸引他人注意）；二是兴趣（维持他人注意）。</p><p>3、意外的事件往往黏性很强，因为惊讶让人们集中注意力思考，这份注意和思考将意外事件烙印在记忆中。惊讶能促使人们去挖掘事件背后的原因，去想象其他的可能，去设法避免今后再发生同类的事情，但追求大惊讶也可能引发大问题，一不小心就容易越界从而沦为噱头。</p><p>4、让想法及创意更具黏性有三个办法，一是确定所要传达的中心信息（找到核心）；二是找出信息中违反直觉的部分（核心信息中令人意外的含义是什么？为什么事情现在并没有照此发展？）；三是在重要而又违反直觉的层面上破坏听众的预测基模，从而传递信息，一旦预测基模失效，就帮助他们修好基模。</p><p>5、好奇心的缺口理论认为，当人们觉得自己的知识出现缺口时，好奇心就会产生。缺口理论的一项重要含义在于，在闭合缺口前必须先打开缺口，首先应该做的是让对方意识到他们需要这些事实，其诀窍在于，要先点明他们目前缺乏这些知识。</p><p>6、打开好奇心缺口的方法包括提出问题，设下谜团，让人意识到自己知识中的缺口；告诉对方，其他人知道一些他们所不知道的事情；给对方展现一些结果未知的情境（选举、体育比赛和悬疑故事等）；鼓励对方猜一猜结果，此法可产生两个知识缺口，即 “ 会发生什么事 ” 以及 “ 我猜对了吗 ” 。</p><p>7、新闻预告式的办法可用于形形色色的情境和各种各样的观点。要让沟通更为有效，应该把思考逻辑从 “ 我想传达什么信息 ” 转换为 “ 我希望听众提什么问题 ” 。</p><p>8、如果人们以为自己无所不知，那么缺口理论就很难奏效。克服过度自信的方法包括利用打破对方固有的基模；要求他人对自己的预测表明立场。过度自信的人倘若意识到别人的想法与自己不同，会更容易发现知识缺口。</p><h2 id="具体"><a href="#具体" class="headerlink" title="具体"></a>具体</h2><p>具体的语言能帮助人们理解新概念，特别是对一无所知的新手；抽象是专家们独享的奢侈品。具体让人们利用已有知识和感官的基本模块来搭建更高层更抽象的内涵；而抽象必须建立在具体的基础之上。</p><h2 id="可信"><a href="#可信" class="headerlink" title="可信"></a>可信</h2><p>1、权威是观点之 “ 可信 ” 的可靠来源，如专家、名人或各个领域的红人。</p><p>2、权威来源之所以权威，并不是由于其社会地位，而在于其诚实可靠，有时反权威比权威更加可信。</p><p>3、一个人对于细节的知识往往可以体现出其掌握的专业知识的全貌，而具体细节不仅能替权威讲述者增强可信度，也会给信息本身赋予可信性。</p><p>4、统计数据本身多半没有意义，统计数据应该用来阐明某种关联，重要的是要让人记住这种关联，而不是数字。统计数据本身起不到什么作用，唯有尺度和语境才使之有用。人性尺度原理有助于让人们的直觉发挥作用，进而用来评判某则信息的内容是否可信。在使用统计数据时，越少依赖实际数字越好，数字告诉人们的是背后隐含的关联，但要阐明关联总有比数字本身更好的办法。</p><p>5、可检验性认证是威力极强的可信增强剂，因为它本质上是让听众 “ 先试再买 ” 。</p><h2 id="情感"><a href="#情感" class="headerlink" title="情感"></a>情感</h2><p>1、要让他人关心，最可靠的途径就是唤起对自身利益的热情。</p><p>2、自身利益存在局限性，总是把观念围绕自身利益来构建，就像是只用同一种颜色作画，不仅会压抑自己，也无法启发别人。</p><p>3、同理心产生于个体，而非模式。要让他人关心自己的观点，就应该让对方跳出分析性的角色；创造对特定个人的同理心；证明自己的观念是跟对方原先已经关心的事情有所关联；诉诸自身利益，也应该诉诸身份认同——不仅是他们现在的身份，还包括他们梦想获得的身份。</p><h2 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h2><p>1、故事是很有效的教学工具，能告诉人们情境如何误导大家做出错误决策，能阐明人们未能觉察的因果关系，并教人们别人解决问题时使用的出人意料而又充满智慧的方法。</p><p>2、故事的力量具有两个层面，一是提供模拟（有关如何行动的知识）；二是提供启发（行动的动机），两者都以激发行动为最终目的。</p><p>3、具有启发意义的故事（只占所有故事的一小部分）的基本情节有挑战情节、联系情节和创造情节三类。</p><table><thead><tr><th>类型</th><th>内容</th></tr></thead><tbody><tr><td>挑战情节</td><td>其关键要素就是这些障碍对于主人公来说都极难克服，它以某种特定的方式启发人们，鼓舞人们的毅力和勇气，让人们想要更加努力、承担更多挑战和冲破障碍</td></tr><tr><td>联系情节</td><td>跨越鸿沟建立关系的故事，不论是种族、阶级、民族、信仰、地域或是其他巨大分歧。所有的联系情节都在社会关系上让人有所启发，促使人们想助人为乐、待人宽容、与人合作和爱人如己</td></tr><tr><td>创造情节</td><td>有关人们脑力智慧上的突破，解开长久以来的迷思，或是以打破常识和创意革新的办法处理问题</td></tr></tbody></table><p>4、跳板故事是能让人看到现有问题或可如何改变的故事，讲的是未来的可能性，其优点在于能够抵抗怀疑论，进而产生代入感。除了产生代入感以外，跳板故事还能促使人们起而行动。故事让人专注于可能的解决办法上，而目标明显和界限清楚的故事则可以让听者切换到解决问题的模式中。跳板故事是一种集体进行个人定制的练习，每一位听者都利用同一个跳板来达到稍有不同的目的。</p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑学 </tag>
            
            <tag> 创造性思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑思维，只要五步：适合逻辑小白的入门书</title>
      <link href="/9787516409329/"/>
      <url>/9787516409329/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/9787516409329/image-20221019225601535.png" alt="书籍简介"></p><p>本书用最简洁易懂的方式教读者迅速成为有逻辑思维的人，短时间内让你解决问题、效率翻倍！工作中, 我们会看到这样的两种人：有的人还没有了解情况就马上开始工作，结果很快出现进退两难的情况；有的人就非常有逻辑和条理，能很好地带着其他同事顺利地完成工作。</p><p>不懂逻辑思维， 就会出现沟通不畅、越干活越多、效率低下、事情无法推进等等情况。</p><p>本书将逻辑思考的方法总结金字塔图、并列型和串联型思考、MECE、树状图、矩形图五步，简洁易懂，帮助摆脱沟通不畅、效率低下、事情无法推进等情况。</p><p><img src="/../images/9787516409329/outline.jpg" alt="核心要点"></p><h2 id="逻辑交流"><a href="#逻辑交流" class="headerlink" title="逻辑交流"></a>逻辑交流</h2><h3 id="金字塔图"><a href="#金字塔图" class="headerlink" title="金字塔图"></a>金字塔图</h3><p>1、金字塔图是用数个理由（根据、论据）支撑结论的形式，一般选用三个支撑结论的理由来构成 “ 金字塔 ” 的形状。</p><p>2、按照论点 → 结论 → 理由 → 行动的顺序表述，能够让表达更容易理解，让沟通清晰有条理。</p><table><thead><tr><th align="center">顺序</th><th>内容</th></tr></thead><tbody><tr><td align="center">论点</td><td>1、论点是接下来谈话的内容，论点 &#x3D; 状况 + 问题（中心）。<br>2、状况：根据对方预备知识的程度进行说明。<br>3、问题：5W2H 疑问法。</td></tr><tr><td align="center">结论</td><td>1、结论是论点的回答，一般用  “ ×× 是 ×× ”  来表达。<br>2、结论和论点的关系：论点的回答是结论，而结论是最想说的理由。<br>3、结论和论点的组合：What、Why、How、Yes／No 模式。<br>4、结论出现的位置：根据情况而定。</td></tr><tr><td align="center">理由</td><td>1、理由要尽可能整合 3 组左右（2～4 组）的相似信息。<br>2、理由的选取：数字或数据、一般常识、事例的积累、已被决定的判断、制度或公司内部规定。<br>3、预测未来信赖度高的理由：专家的意见、收集到的新闻。<br>4、理由不当：用个人的想法或感想；换个说法；因果含糊。</td></tr><tr><td align="center">行动</td><td>1、行动明确 “ 由谁来做何事 ”，分为自己做什么和希望对方做什么两部分。<br>2、自己的行动：必须有具体的行动（首先做什么）和时间轴（什么时候做）。<br>3、对方的行动：要有谅解、建议、具体行动中的任意一个。</td></tr></tbody></table><p><img src="/../images/9787516409329/1.jpg" alt="示例"></p><h3 id="并列与串联"><a href="#并列与串联" class="headerlink" title="并列与串联"></a>并列与串联</h3><p>1、逻辑性的结论和理由的联系方法只有两种，即并列型（归纳法）和串联型（演绎法）。</p><p>2、并列型（归纳法）是并列几个不同的事实，从这些事实中找出共通点，从而得出结论的方法。它的优点在于即使有一个理由不充分，也能凭借剩下的理由支撑结论；缺点在于主观地改变结论和经不起例外的指出。</p><p><img src="/../images/9787516409329/image-20221022000904689.png" alt="并列型（归纳法）"></p><p>3、串联型（演绎法）是将某个事实和与其相对应的某个规律（决定、一般常识、法规等）进行组合，从而得出结论的方法。它的缺点在于若依照的规律有错，则全盘皆错。</p><p><img src="/../images/9787516409329/image-20221022000917761.png" alt="串联型（演绎法）"></p><p>4、并列型和串联型的联系：串联型的规律由并列型形成。常识是过去的积累，注意逻辑破裂，别被无规律的假串联型欺骗，比如从手掌上有 × 亿个细菌到本产品中含有 × 亿个乳酸菌的立显效果的故事。</p><p>5、根据严格规则（升级降级或惩罚等）判断的一般用串联型（事实 + 规定），而要从多视角根据状况的变化（新事业的开始或新商品的销售等）判断的则用并列型（事实的积累）。</p><h3 id="MECE分析法"><a href="#MECE分析法" class="headerlink" title="MECE分析法"></a>MECE分析法</h3><p>1、MECE 分析法是在没有遗漏、没有重复的状态下思考，阐述对方想听的理由而非自己想说的理由，但目的不是要做到完全无遗漏、无重复，重要的是充分思考后推进事物发展的态度，先让完整度达到八至九成无遗漏、无重复程度后，若还觉得不全面，就设立其他项目。</p><p><img src="/../images/9787516409329/image-20221022001322620.png" alt="MECE 分析法"></p><p>2、MECE 状态的表达方法包括分别分割成方形表示方法、树状图表示方法和矩形图表示方法。</p><table><thead><tr><th align="center">表达方法</th><th>适用情况</th></tr></thead><tbody><tr><td align="center">分别分割成方形表示方法</td><td>适合切入口较少的情况。<br><img src="/../images/9787516409329/image-20221022001627783.png" alt="分别分割成方形表示"></td></tr><tr><td align="center">树状图表示方法</td><td>把认为重要的切入口放在前面说明，然后按照大分类、中分类、小分类来区分，适用于切入口多或在类中途想要改变区分方法的情况。<br><img src="/../images/9787516409329/image-20221022001642718.png" alt="树状图表示方法"></td></tr><tr><td align="center">矩形图表示方法</td><td>在横轴和纵轴上填入项目，适用于切入口多的情况。<br><img src="/../images/9787516409329/image-20221022001709300.png" alt="矩形图表示方法"></td></tr></tbody></table><p>3、MECE 分析法可以运用 3C、QCD、SWOT、PEST、4P、价值连锁等框架缩短时间，但框架的缺点在于一旦记住后就很方便，导致什么都想用这个说明。</p><p><img src="/../images/9787516409329/image-20221022002143201.png" alt="框架"></p><p>4、MECE 分析法的制作方法如下：</p><table><thead><tr><th align="center">方法</th><th>特点</th></tr></thead><tbody><tr><td align="center">某事和某事之外分类方法</td><td>1、两分法：把想要处理的主要内容和其他内容分成两部分，如国内和国外；已婚和未婚；管理层和一般员工。<br>2、三分法：分成两个主要的和其他，如这个、那个和其他；美国、中国和其他国家；可口可乐、百事可乐和其他可乐。</td></tr><tr><td align="center">要素分析分类方法</td><td>把可看出全貌的事物像切比萨饼那样分割，如 10 岁以下、10 岁年龄层、20 岁年龄层、30 岁年龄层、40 岁年龄层、50 岁年龄层、60 岁以上。</td></tr><tr><td align="center">过程分类方法</td><td>找出问题点，按过程顺序思考，如 PDCA 分析法；过去、现在、未来。</td></tr><tr><td align="center">算术公式分类方法</td><td>用于组织的目标值设定或计算估算值，如销售额 &#x3D; 单价 × 数量；利润 &#x3D; 销售额 - 费用。</td></tr></tbody></table><p>5、当组织有说服力的语言时，要意识到对方对什么感兴趣，用对方能够信服的理由 MECE 分析。首先找出所有能够想到的、能够支撑结论的理由，即选项 MECE；接着从这些选项中选出能够让对方认可的、必要且充分的理由，即认同 MECE。</p><h3 id="实践篇"><a href="#实践篇" class="headerlink" title="实践篇"></a>实践篇</h3><p>1、由上往下式是指有结论，无理由，要考虑论点和有认同感的理由。</p><p><img src="/../images/9787516409329/pic5.png" alt="由上往下式"></p><p>2、由下往上式是指有理由，无结论，整理所有信息并分组 → 从这些组里面找出结论。</p><p><img src="/../images/9787516409329/pic6.png" alt="由下往上式"></p><p>3、在多人的情况下，由某一关键人员做决定还是通过协商制决定会改变讲话内容的比重，但有时也会因为听的人过多而事前无法想象他们的关注点，这时就要运用一些能让多数人都认同的框架。</p><p>4、说服性较弱的理由加入假设（推测）支撑；说明时注意易产生歧义的语言；用反论的思维确认自己说的话是否有说服力。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><h3 id="树状图"><a href="#树状图" class="headerlink" title="树状图"></a>树状图</h3><p>1、按照明确问题 → 查找原因 → 思考解决方案的顺序思考，而在每个时期（阶段）找出选项的方法则是应用树状图（逻辑树状图）。</p><table><thead><tr><th align="center">顺序</th><th>内容</th></tr></thead><tbody><tr><td align="center">明确问题</td><td>方法1：把现状和想要有的状态之间的差距设为问题。<br>① 从不好的状态恢复到 0（普通的状态）；<br>② 从还不是很坏的状态提升到理想的状态。<br>方法2：把问题具体化到能够思考原因的大小。</td></tr><tr><td align="center">查找原因</td><td>不断反复询问 “ 为什么 ”，深挖原因，在每个深挖的阶段都要自觉地确认有没有遗漏和重复。</td></tr><tr><td align="center">思考解决方案</td><td>把所有能想出来的解决方案都列出来，制作树状图后，思考有没有被忽略的地方，注意是否被困在思考的范围内，比如 9 点 4 线问题。</td></tr></tbody></table><p>2、树状图是分解某事项构成要素的手法，能够对原因或解决方案的候补内容细致地区分思考。在用树状图分析原因或解决方案时，一定要意识到 MECE 状态，运用 MECE 分析法中某事和某事以外的技巧找出重要的部分。</p><p><img src="/../images/9787516409329/pic4.png" alt="树状图"></p><p>3、在推进解决问题的进程时，要注意假设思考和零基础思考。假设思考是一边失败一边修改的方法，它的反面是 “ 随时应对思考 ”。零基础思考是从零开始思考的方法，它的反面是 “ 经验前提思考 ”。</p><p><img src="/../images/9787516409329/image-20221022004505117.png" alt="假设思考和零基础思考"></p><h3 id="矩形图"><a href="#矩形图" class="headerlink" title="矩形图"></a>矩形图</h3><p>1、在逻辑性决定的基础上，最重要的观点是决定评估项目后再决定结论。评估项目就是品质、设计或价格等内容。若能够明确以什么为基准进行决定，就能技巧性地掌握做决定这个行为。</p><p>2、当评估项目 3 个以上时，要制作矩形图表，纵轴写入选项，横轴写入评估项目，接着在各项中填写点数（1～5 点等），这样能直观看出哪个选项处于优势，最后是评分环节。一般情况下评估项目越少，就越容易思考、越容易判断，最多只能有 5 个，若将评估项目的数量减到最少，就形成一个两轴（分别是纵轴和横轴），相互交叉的矩形图，即十字矩形图。</p><p><img src="/../images/9787516409329/pic2.png" alt="矩阵图"></p><p>3、制作矩形图表，首先要删除现实中不可行的或很明显就不好的提案，然后从选项中选出 3～5 个有力的候选项目；接着要考虑评估项目，将这些评估项目写入横轴中，刚才的有力候选选项写入纵轴中，然后对每项评分，分数要根据评估项目尽可能看得出优劣，若合计分数间看不出差异时，要考虑根据评估项目的重要性加重分数的比重（加权）。</p><p><img src="/../images/9787516409329/image-20221022005027150.png" alt="加权"></p><p>4、制作十字矩形图，首先要将简化的两个评估项目分别作为横轴和纵轴形成十字矩形图，将选项放入矩形图中（打点)，然后通过纵轴和横轴形成四个象限，若某个象限中没有写入选项，就能够直接判断没有符合这方面相关的解决方案。</p><h3 id="实践篇-1"><a href="#实践篇-1" class="headerlink" title="实践篇"></a>实践篇</h3><p>1、在提出问题 what、原因 why、解决方案 how后，还要决定谁 who 到何时为止 when 用多少预算 how much 去做，即要在纸上写出并确认作为实行计划的体制表、职责分配表、日程、预算、报价。</p><p>2、按照先树状图和矩形图再金字塔图的顺序，从逻辑问题解决法出发，转换到逻辑交流法，能够把有逻辑地解决问题和沟通相联系。</p><p><img src="/../images/9787516409329/pic3.png" alt="逻辑顺序"></p><p>3、在思考问题、原因、解决方案或组织逻辑交流（金字塔图）时，把能够想得到的选项写到便签纸，每个分别写出 15～20 张，接着做出树状图，拿着便签纸边排序边思考哪些是大分类、该做出什么样的结构、找出的选项是否充分、这个部分不是很重要就不要继续细分等问题。</p><p>4、当使用 why 树状图寻找根本原因，却找不到时，就用箭头将原因联系起来，调查原因间的因果关系，但这种方法经常会出现恶性循环，当发现恶性循环时，要找出能够着手的部分和难以着手的部分。</p><p>5、逻辑思维是在范围内的深度挖掘，水平思考是扩大到范围外，思考范围外是否有答案；而创造性思考是逻辑思维和水平思考的结合，是扩大范围外的部分进一步深入思考。</p><p><img src="/../images/9787516409329/image-20221022005128373.png" alt="创造性思考"></p><h2 id="案例展示"><a href="#案例展示" class="headerlink" title="案例展示"></a>案例展示</h2><table><thead><tr><th align="center">项目</th><th>内容</th></tr></thead><tbody><tr><td align="center">背景</td><td>A 被社长任命负责培训计划，为提高年轻员工技巧水平，向公司的骨干员工提出培训合作的请求，但全被拒绝。</td></tr><tr><td align="center">思考</td><td>1、根本的问题：年轻员工的技巧提升缓慢，竞争力低下。<br>2、产生这个问题的原因：用 MECE 分析法思考后，主要有两个原因，一个是年轻员工自身的原因，另一个是年轻员工以外（特别是上司或老员工）的原因。年轻员工反映工作内容尽是一些简单作业，因此觉得没有发展机会；没有培训机会没法掌握有关技巧；上司很忙，即使有不清楚的地方也无法询问等。而上司、前辈们反映最基本的东西还是希望年轻员工能够自己去学习；因为工作很忙没有时间教年轻员工等。 <br>3、评估这些原因后，得出根本原因：上司想教育年轻员工，但是没有时间（结果导致年轻员工的能力无法提高，上司永远很忙）。<br>4、找到原因后思考解决方案：为了让上司或骨干员工有时间给年轻员工培训，试着写出所有能想到的方法，如评估培训过的上司、制作规定来强制要求老员工给新员工指导、就算没有准备也可直接拉去做培训等。<br>5、将这些想法按照树状图整理，思考制作矩形图所需的评估项目：A 决定用方便性、效果、成本这几个项目来评估，对解决方案的选项进行优劣确认。<br>6、用矩形图评估，决定解决方案：讲师一部分由公司的员工来担任，但资料则由外聘的公司来制作。<br>7、最后是实行计划部分：写出具体参加培训的人员名单，提案并做成表格，外聘的顾问公司的工作开始，制作年度日程表和预算表，准备好相关资料。</td></tr><tr><td align="center">表达</td><td>1、论点：年轻员工技巧提升较慢导致公司整体战斗力下降，这一问题该如何解决。 <br>2、结论是经逻辑思维得出的解决方案：让公司内部老员工担任培训师，加强培训质量，而培训教材由代理公司制作。 <br>3、理由1阐述原因：做年轻员工的培训讲师，老员工们虽然不排斥，但是认为自己没有时间做相关的培训资料（附带问卷调查或听证的结果）。 <br>4、理由2阐述解决方案：若能有效地利用编写培训教材的代理服务，就能缩短老员工的准备时间，比起外聘讲师，费用还减少了很多。 <br>5、理由3阐述实行计划：公司担任培训师的员工和代理公司的工作计划方案、日程表、费用试算。</td></tr><tr><td align="center">行动</td><td>作为本计划的执行人，将亲力亲为地对大家说明工作，因此希望董事会能批准实行计划和通过预算。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑学 </tag>
            
            <tag> 逻辑思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>金字塔原理：思考、表达和解决问题的逻辑</title>
      <link href="/9787544294829/"/>
      <url>/9787544294829/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/9787544294829/image-20221019225416735.png" alt="书籍简介"></p><p>本书分为表达的逻辑、思考的逻辑、解决问题的逻辑和演示的逻辑 4 篇，结合案例说明金字塔结构的作用、基本形式、构造方法，位于金字塔各层级思想的逻辑关系，以及金字塔原理在写作、PPT 演示文稿制作、实际解决问题等各方面的应用。</p><p><img src="/../images/9787544294829/outline.png" alt="核心要点"></p><h2 id="表达的逻辑"><a href="#表达的逻辑" class="headerlink" title="表达的逻辑"></a>表达的逻辑</h2><h3 id="金字塔原理"><a href="#金字塔原理" class="headerlink" title="金字塔原理"></a>金字塔原理</h3><p>1、米勒的《奇妙的数字 7 ± 2 》认为大脑的短期记忆无法一次容纳 7 个以上的记忆项目。当处理的项目过多时，要按逻辑范畴归类分组。将分组后的思想按照不同层次进行抽象提炼、总结概括，构建金字塔结构。</p><p>2、读者会将读到的思想进行归类分组和总结概括，以便记住。向读者介绍（传递、阐述、论证）思想最有效的途径是结论先行，自上而下地表达。</p><p>3、金字塔中的思想以三种方式互相关联——向上、向下和横向。位于某组思想上一层次的思想是对这一组思想的概括，这一组思想则是对其上一层次思想的解释和支持。</p><p>4、组织思想基本上只有四种逻辑顺序——演绎顺序、时间（步骤）顺序、结构（空间）顺序、程度（重要性）顺序。</p><p>5、要做到条理清晰，关键是把思想组织成金字塔结构，并在写作前用金字塔原理检查。</p><p>6、金字塔原理遵循四个基本原则——结论先行、以上统下、归类分组和逻辑递进。</p><table><thead><tr><th align="center">基本原则</th><th align="center">内容</th></tr></thead><tbody><tr><td align="center">结论先行</td><td align="center">每篇文章仅一个中心思想，且在文章最前面</td></tr><tr><td align="center">以上统下</td><td align="center">每一层次上的思想必须是对下一层次思想的总结概括</td></tr><tr><td align="center">归类分组</td><td align="center">每一组中的思想必须属于同一逻辑范畴</td></tr><tr><td align="center">逻辑递进</td><td align="center">每一组中的思想必须按照逻辑顺序排列</td></tr></tbody></table><h3 id="金字塔结构"><a href="#金字塔结构" class="headerlink" title="金字塔结构"></a>金字塔结构</h3><p>1、金字塔结构的各个层级包括各种思想，思想使受众（包括读者、听众、观众或学员）产生疑问。金字塔中的子结构，能够加快你梳理思想的过程，包括主题与子主题之间的纵向关系、各子主题之间的横向关系、序言的叙述方式。</p><p>2、在纵向上，各层级思想将与读者进行疑问－回答式对话。每个表述都应引发读者的疑问，在这一表述的横向结构上逐个回答读者的疑问。</p><p><img src="/../images/9787544294829/image-20221021135247810-16685248493293.png" alt="金字塔结构引导疑问－回答式对话"></p><p>3、在横向上，各种思想以演绎推理或归纳推理的方式回答读者的疑问，但两种方式不可同时使用。演绎性思想组由几个承前启后的论述组成；而一组归纳性论述中的思想可以互相关联。</p><table><thead><tr><th align="center">逻辑关系</th><th>示例</th></tr></thead><tbody><tr><td align="center">演绎推理</td><td>• 所有的人都会死。<br/>• 苏格拉底是一个人。<br/>• 因此苏格拉底会死。</td></tr><tr><td align="center">归纳推理</td><td>• 法国坦克已抵达波兰边境。<br/>• 德国坦克已抵达波兰边境。<br/>• 俄国坦克已抵达波兰边境。</td></tr></tbody></table><p>4、序言通过讲故事提醒读者，文章将回答读者最初的疑问。序言包括背景、冲突、读者的疑问和作者的回答。冲突因背景而产生，背景和冲突都是读者已知的事实。冲突导致读者提出疑问，而文章将回答读者的疑问。</p><h3 id="构建金字塔"><a href="#构建金字塔" class="headerlink" title="构建金字塔"></a>构建金字塔</h3><p>1、采用自上而下法构建金字塔的步骤：提出主题思想 → 设想受众的主要疑问 → 写序言（背景—冲突—疑问—回答） → 与受众进行疑问－回答式对话 → 对受众的新疑问，重复进行疑问－回答式对话。</p><p><img src="/../images/9787544294829/image-20221021140344220.png" alt="金字塔结构中互相关联的各要素"></p><p>2、采用自下而上法构建金字塔的步骤：列出所有思想要点 → 找出各要点间的逻辑关系 → 得出结论。</p><p>3、初学者注意事项：要先尝试自上而下法；序言先写背景，将背景作为序言的起点；多花点时间思考序言，不要省略这一步；将背景放在序言中；序言仅涉及读者不会对其真实性提出质疑的内容；在关键句层次上，更宜选择归纳法而非演绎法。</p><h3 id="序言具体写法"><a href="#序言具体写法" class="headerlink" title="序言具体写法"></a>序言具体写法</h3><p>1、写序言的目的是提示读者已知的信息，而不是提供新信息。序言要采用讲故事的形式，是为了让读者抛开其他思想，专注于话题。序言通常包括背景、冲突、读者的疑问和作者的答案。序言的长短取决于读者的需要和主题的要求。</p><p><img src="/../images/9787544294829/pic13.png" alt="序言应采用讲故事的形式"></p><p>2、所有引出 “ 背景 ” 的句子都具有一个重要特征，即能够将读者锁定在特定的时间和空间，从而为讲故事做好准备。</p><p>3、文章序言中的 “ 冲突 ” 经常是指出了某种问题，但并不总是字面上的 “ 问题 ”。这里的 “ 冲突 “ 类似于讲故事时推动情节发展的因素，能够促使读者提出 “ 疑问 ”，即 “ 接下来会怎么样 ”。</p><table><thead><tr><th align="center">背景</th><th align="center">冲突</th><th align="center">读者的疑问</th></tr></thead><tbody><tr><td align="center">需要完成某项问题</td><td align="center">发生了妨碍完成任务的事</td><td align="center">我们应该怎么做</td></tr><tr><td align="center">存在某个问题</td><td align="center">知道解决问题的方案</td><td align="center">如何实施解决方案</td></tr><tr><td align="center">存在某个问题</td><td align="center">有人提出了一个解决方案</td><td align="center">该方案是否正确</td></tr><tr><td align="center">采取了某项行动</td><td align="center">行动未达到预期效果</td><td align="center">为什么没有达到预期效果</td></tr></tbody></table><p>4、序言应当采用 “ 背景—冲突—疑问—解决方案 ” 的结构，但是各部分的顺序可以变化，以塑造不同的文章风格。</p><p><img src="/../images/9787544294829/pic15.png" alt="序言的不同风格"></p><p>5、关键句要点（或称要点、核心观点、一级结论、一级论点、重要结论）不仅要回答由文章主题思想引起的受众的新疑问，还要呈现文章的框架结构。因此，如果文章篇幅较长，就应该列出关键句的要点，然后为第一个要点起一个小标题，由此开始写作。关键句要点也需要引言。</p><p><img src="/../images/9787544294829/image-20221021142202903.png" alt="首先列出关键句要点"></p><p><img src="/../images/9787544294829/image-20221021142412371.png" alt="关键句要点也需要引言"></p><p>6、常用的序言模式取决于工作内容，而商务文章中最常见的四种序言模式包括发出指示式、请求支持式、解释做法式和比较选择式。</p><p><img src="/../images/9787544294829/pic12.png" alt="商务文章的序言模式"></p><h3 id="演绎与归纳"><a href="#演绎与归纳" class="headerlink" title="演绎与归纳"></a>演绎与归纳</h3><p>1、演绎推理是一个线性推理过程，最终是为了得出一个由逻辑词 “ 因此 ” 引出的结论。在金字塔结构中，演绎推理是一种论证，其中第二个论点对第一个论点加以评论，第三个论点说明前两个论点同时存在时的含义。对演绎推理的概括就是把最后一个论点作为主体，概括整个推理过程。</p><p><img src="/../images/9787544294829/image-20221021143224560.png" alt="演绎推理"></p><p>2、演绎推理的过程可以概括为以下三步：第一，阐述世界上已存在的某种情况。第二，阐述世界上同时存在的相关情况。如果第二则表述是针对的是第一则表述的主语或谓语，那么就说明这两则表述是相关的。第三，说明这两种情况同时存在时隐含的意义。</p><p>3、演绎推理也可以呈现为以下三步：第一，出现的问题或存在的现象。第二，产生问题的根源、原因。第三，解决问题的方案。</p><p>4、当推理过程由两个以上的演绎过程连接起来时，对所有步骤一一进行说明会显得冗长而呆板。适当略去其中几个步骤，就可以形成连环式演绎推理。</p><p><img src="/../images/9787544294829/image-20221021144004553.png" alt="连环式演绎推理过程"></p><p>5、归纳推理是把具有相似性的思想归类分组，根据各要点具有的共性得出结论。在关键句层次，使用归纳推理比演绎推理更方便读者理解。</p><p><img src="/../images/9787544294829/image-20221021143248633.png" alt="归纳推理"></p><p>6、应用归纳法时，必须具有以下两项主要技能：正确定义一组思想，找到一个能够表示该组所有思想共性的名词；识别并剔除该组思想中与其他思想不相称（不属同类、无共同点）的思想。</p><p>7、演绎推理与归纳推理的区别：演绎推理的第二个思想必须是对第一个思想的主语或谓语的评述。如果不具备这一特点，它就不是演绎推理，而是归纳推理。如果它确实是归纳推理，就应当能够用一个单一的名词概括这两个思想，以检验归类、分组是否恰当。</p><h2 id="思考的逻辑"><a href="#思考的逻辑" class="headerlink" title="思考的逻辑"></a>思考的逻辑</h2><h3 id="应用逻辑顺序"><a href="#应用逻辑顺序" class="headerlink" title="应用逻辑顺序"></a>应用逻辑顺序</h3><p>1、应用逻辑顺序可以确保不会把新闻当作思想；遗漏某组中的重要思想。任一组思想的逻辑顺序都呈现了该组思想的分组基础。如果在某一组思想中找不到以上顺序，说明这些思想之间不存在逻辑关系，或者思考还不周全。</p><table><thead><tr><th align="center">逻辑顺序</th><th>思想</th></tr></thead><tbody><tr><td align="center">时间顺序</td><td>确定前因后果关系，通过设想某一流程得出的思想</td></tr><tr><td align="center">结构顺序</td><td>整体分割为部分或部分组成整体，通过评论某一结构得出的思想</td></tr><tr><td align="center">程度顺序</td><td>将类似事物归为一组，按程度或重要性分组得出的思想</td></tr></tbody></table><p>2、在按照时间顺序组织的思想组中，主题句是要达到的结果，表述思想的顺序与采取行动的顺序（第一步、第二步、第三步）一致。</p><p>3、“ MECE 原则 ” 可以保证划分出的各部分符合以下要求：各部分之间相互独立，相互排斥，没有重叠；所有部分完全穷尽，没有遗漏。</p><p>4、结构顺序就是当使用示意图、地图、图画或照片想象某事物时的顺序，如组织结构图、关键成功要素示意图等。</p><p>5、程度顺序指明每组中的项目（思想、观点、问题等）具有共同特性，确保将所有具有该特性的项目列入一组。在每组中，根据各个问题具有该特性的程度高低排序——该特性表现最鲜明的问题排在第一位，即先强后弱，先重要后次要。</p><p>6、为了检查一组思想的逻辑顺序，可以先把每一个句子改写成能说明其实质的短句（即只保留主语、谓语、宾语，删除定语、状语和补语，只保留动词、名词，删除形容词、副词）；再把相匹配或具有共同点的句子归为一组；最后选择适当的顺序排列。</p><p>7、如果是行动性思想（即说明行动、活动、行为、动作、步骤、流程等），那么应该明确说明每项行动产生的最终结果（效果、目标）；把最终能产生同样结果的行动（行为、步骤等）归为一组；确定每组思想的分组基础（类别），并依此排序；检查是否有遗漏的步骤。</p><p>8、如果是描述性思想（即介绍观点、情况、信息等），那么应该把说明类似事务或具有共同点的思想归为一组；确定每组思想的分组基础（找出相似之处、共同点）；把所有思想转换成完整的句子，确定其顺序；检查是否有遗漏的步骤。</p><p><img src="/../images/9787544294829/pic16.png" alt="演绎与归纳"></p><h3 id="概括各组思想"><a href="#概括各组思想" class="headerlink" title="概括各组思想"></a>概括各组思想</h3><p>1、总结句避免使用 “ 缺乏思想 ” 的句子（比如，存在 3 个问题……）。“ 缺乏思想 ” 的句子对读者而言枯燥无味，难以持续吸引读者的注意力，不能引导读者继续往下读，读者可能根本无法了解想表达的思想。</p><p>2、思想的表达方式与其分组基础无关，既可以是行动性语句，即告诉读者要做什么事，也可以是描述性语句，即告诉读者关于某些事的情况。</p><table><thead><tr><th>思想表达方式</th><th>说明内容</th></tr></thead><tbody><tr><td>行动性思想（介绍采取的行动、行为、动作、步骤、流程）</td><td>应说明采取行动后可以得到的结果（效果、达到的目标）</td></tr><tr><td>描述性思想（介绍背景、信息）</td><td>应说明这些思想所具有的共同点的含义（共同点的意义）。</td></tr></tbody></table><p>3、总结句要说明行动产生的结果：先用明确的语句描述各项行动、步骤、流程等；找出明显的因果关系，将每一组行动、步骤控制在 5 个以内；直接从这些行动、步骤、流程来总结、概括行动的结果、目标。</p><p>4、总结行动产生的结果：该组行动、步骤之间必须相互独立不重叠、完全穷尽无遗漏；总结概括性语句必须说明各项行动、步骤导致的直接结果，且措辞必须明确、具体；先用明确的语句表述各项行动、步骤、流程等，然后区分不同的抽象层次，再从各行动、步骤、流程等总结概括出行动的结果。</p><p>5、将描述性思想归类分组，是因为每组思想具有共同特性，它们都针对同一类主语；针对同一类谓语（动作或对象）；包含同一类判断。</p><p>6、对行动性思想进行分组时，要求发掘每项行动的本质；区分不同的抽象层次（比如，采取一项行动，只是时间上必须在另一行动之前，还是为了完成另一行动？）；明确说明行动产生的最终结果；直接由行动概括出结果。</p><p>7、对描述性思想进行分组时，要求找出句子结构的共同点；确定包括这些思想的最小范畴；说明共同点隐含的意义。</p><h2 id="解决问题的逻辑"><a href="#解决问题的逻辑" class="headerlink" title="解决问题的逻辑"></a>解决问题的逻辑</h2><h3 id="界定问题"><a href="#界定问题" class="headerlink" title="界定问题"></a>界定问题</h3><p>1、判断问题是否存在，通常要看经过努力得到的结果（现状），与希望得到的结果（目标）之间是否存在差距。由特定背景导致的特定结果称为非期望结果（R1，即现状）。“ 问题 ” 是期望结果（R2, 即目标）。解决方案则是指如何将现状 R1 转化为目标 R2。</p><table><thead><tr><th>问题</th><th>归类</th></tr></thead><tbody><tr><td>1、有没有／是否可能有问题（或机会）？<br>2、问题出在哪里？</td><td>界定问题</td></tr><tr><td>3、为什么会出现问题？</td><td>结构化分析</td></tr><tr><td>4、我们能做什么？<br>5、我们应该做什么？</td><td>寻找解决方案</td></tr></tbody></table><p>2、界定问题的框架需要先回答以下三个问题：发生了什么事情（背景：切入点／序幕 + 困扰／困惑）？我们不愿看到什么（非期望结果，现状，R1）？我们想要什么（期望结果，目标，R2）？</p><p><img src="/../images/9787544294829/pic03.jpg" alt="问题源于现有背景"></p><p><img src="/../images/9787544294829/pic20.jpg" alt="问题可以扩展为3个层级"></p><p>3、在界定问题时，可以遵循以下步骤：将问题展开；确定解决方案处于哪一阶段（已经提出了，还是已经被接受了）；提出适当的疑问；检查序言是否说明了界定的问题；检查金字塔是否回答了疑问。</p><p>4、界定问题的四要素包括切入点／序幕（产生问题的具体领域、方面）、困扰／困惑（它的发生打乱了该领域的稳定）、现状（R1，非期望结果）、目标（R2，期望结果），这四个要素共同描述了问题是如何展开的。</p><p>5、界定问题的框架大多会按照逻辑顺序列出问题的各构成要素，这样可以很容易地把这些要素用在序言中。只要遵循从左到右再向下的原则即可，读者最后看到的通常是冲突部分。</p><table><thead><tr><th align="center"></th><th>写序言和构建金字塔结构的 7 种不同情况</th></tr></thead><tbody><tr><td align="center">1</td><td>我们应该做什么——不知道如何将 R1 转化为 R2 。<br><img src="/../images/9787544294829/pic10.jpg" alt="我们应该做什么"></td></tr><tr><td align="center">2</td><td>我们是否应该做自己想做的事——知道如何将 R1 转化为 R2 ，但不确定是否正确。<br><img src="/../images/9787544294829/pic06.jpg" alt="我们是否应该做自己想做的事"></td></tr><tr><td align="center">3</td><td>我们应该如何做自己想做的事——知道将 R1 转化为 R2 的正确方案，但不知道如何实施。<br><img src="/../images/9787544294829/pic08.jpg" alt="我们应该如何做自己想做的事"></td></tr><tr><td align="center">4</td><td>解决方案行不通，我们应该做什么——知道将 R1 转化为 R2 的方案，且已经实施，但在实施过程中发现方案行不通。<br><img src="/../images/9787544294829/pic01.jpg" alt="解决方案行不通，我们应该做什么"></td></tr><tr><td align="center">5</td><td>我们应该选择哪种方案——制订几个解决方案，但不知道选哪一个。<br><img src="/../images/9787544294829/pic09.jpg" alt="我们应该选择哪种方案"></td></tr><tr><td align="center">6</td><td>我们应该采用哪些战略——知道 R1 ，但不能具体描述 R2 ，所以无法找到解决方案。<br><img src="/../images/9787544294829/pic07.jpg" alt="我们应该采用哪些战略"></td></tr><tr><td align="center">7</td><td>我们存在问题吗——知道 R2 ，但不清楚现在是否处于 R1（这是典型的标杆比对），无法确定是否存在问题。<br><img src="/../images/9787544294829/pic05.jpg" alt="我们存在问题吗"></td></tr></tbody></table><h3 id="结构化分析问题"><a href="#结构化分析问题" class="headerlink" title="结构化分析问题"></a>结构化分析问题</h3><p>1、运用诊断框架呈现问题领域的详细结构，展示一个系统内的各个部分如何相互影响：查找存在因果关系的活动；对产生问题的可能原因进行分类。</p><p>2、结构化分析问题的步骤是界定问题 → 使用诊断框架（为寻找产生问题的可能原因），呈现存在问题领域的详细结构 → 假设产生问题的可能原因 → 收集信息，以证明或排除所作假设。</p><p>3、根据应用逻辑顺序，设计诊断框架（是非问题分析）可采用呈现有形的结构、寻找因果关系、将可能原因分类三种方法。</p><p>4、逻辑树是产生和检验解决方案（相互独立，完全穷尽的原则），清晰表现思想内在关系的一种方法。使用逻辑树进行分析：提出和检验解决方案；揭示树状图中各项思想的内在关系。</p><h2 id="演示的逻辑"><a href="#演示的逻辑" class="headerlink" title="演示的逻辑"></a>演示的逻辑</h2><h3 id="书面呈现金字塔"><a href="#书面呈现金字塔" class="headerlink" title="书面呈现金字塔"></a>书面呈现金字塔</h3><p>1、写篇幅较长的文章时，在页面上呈现金字塔层级的方法很多，最常见的有：多级标题法、下划线法、数字编号法、行首缩进法、项目符号法。</p><p>2、在一些篇幅较长的文章中，也应该在每一组主要思想观点开始或结束的地方稍作铺垫，让读者知道已经论述的和下一步计划论述的内容，同时保证论点与论点之间的连接顺畅、不生硬。</p><table><thead><tr><th align="center">上下文过渡的方法</th><th>内容</th></tr></thead><tbody><tr><td align="center">讲故事</td><td>序言以背景 → 冲突 → 疑问的故事引出各关键句要点来作为故事的答案</td></tr><tr><td align="center">承上启下</td><td>将上一节关键词或短语融入下一节的起始句，且与下一节主要论点结合</td></tr><tr><td align="center">总结各部分内容</td><td>提炼和汇总（写不好还不如不写）</td></tr><tr><td align="center">说明下一步行动</td><td>文章建议采取一系列行动时，有必要说明下一步措施</td></tr></tbody></table><h3 id="PPT呈现金字塔"><a href="#PPT呈现金字塔" class="headerlink" title="PPT呈现金字塔"></a>PPT呈现金字塔</h3><p>1、为了吸引受众的注意力，设计 PPT 演示文稿时必须了解和掌握以下最基本的规则：第一，文字幻灯片应只包含最重要的、经过恰当分组和总结的思想（观点、论据、建议等），叙述时应尽量简洁。第二，整个 PPT 演示文稿应图文并茂，配合使用各种图表（图、表或示意图）。第三，PPT 演示文稿应呈现经过深思熟虑的故事梗概和脚本。</p><p>2、在 PPT 演示文稿中，图表幻灯片占 90%，文字幻灯片占 10%，它们作用是：说明 PPT 演示文稿的框架结构（文字幻灯片）；强调重要的思想、观点、结论、论点、建议等（文字幻灯片）；阐明单用文字难以说清楚的数据、关系（图表幻灯片）。</p><p>3、关于一张文字幻灯片应当包含哪些内容，应牢记以下原则：每次只演示和说明一个论点；论点应使用完整的陈述句，而非标题性语言；文字尽量简短；使用简单的词汇和数字；字号应足够大；提高 PPT 趣味性，降低复杂性，按布局、颜色、逐级展开。</p><p>4、图表 PPT 诀窍在于确定图表要回答的问题，把答案作为图表的标题，最后选择最适合的图标样式。</p><p>5、要让读者在阅读文章时感到愉悦，一个很简单的方法就是有意识地让那些当初用来得出思想（观点、论点、措施）的图像可视化。</p><h2 id="无结构推理"><a href="#无结构推理" class="headerlink" title="无结构推理"></a>无结构推理</h2><p>1、在解决问题时，要发现内在逻辑结构，问题的解决方案就在于对该结构进行调整，但在解决问题时有可能会遇到无结构的情况，也就是无法解释解决问题的方案，这时推理解决问题的方法就叫外展推理。</p><p>2、皮尔斯认为，任何推理过程都要涉及三个方面：规则（关于世界组成方式的看法）；情况（世界上存在的已知事实）；结果（如果把规则用于该情况，预期将发生的事情）。何时采取何种推理方法，取决于推理过程的起点和已知的其他事实。三种推理方法的区别如下：</p><p><img src="/../images/9787544294829/pic04.jpg" alt="三种推理方法的区别"></p><p>3、外展推理包括分析性解决问题的方法和科学性解决问题的方法，它们有着相同的模式。分析性外展推理与科学性外展推理的区别在于前者已知两个基本要素，由此便能推出第三个要素；而后者必须创造出第二个要素，才能推理出第三个要素。</p><p><img src="/../images/9787544294829/pic21.png" alt="外展推理的方法"></p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑学 </tag>
            
            <tag> 逻辑思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乌合之众：大众心理研究</title>
      <link href="/9787511720870/"/>
      <url>/9787511720870/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/9787511720870/image-20221019225640980.png" alt="书籍简介"></p><p>本书指出，个人一旦进入群体中，他的个性便湮没，群体的思想占据统治地位；而群体的行为表现为无异议、情绪化和低智商。</p><p><img src="/../images/9787511720870/outline.jpg" alt="核心要点"></p><h2 id="群体心理"><a href="#群体心理" class="headerlink" title="群体心理"></a>群体心理</h2><h3 id="一般特征"><a href="#一般特征" class="headerlink" title="一般特征"></a>一般特征</h3><p>1、从心理学角度看，群体中个人固有的思想感情发生的变化以及他们个性的消失是变成组织化群体的人所表现出的首要特征，但这不一定总是需要一些个人同时出现在一个地点，即大量的个人聚集在一起并不足以构成一个群体。</p><p>2、无意识现象在有机体的生活和智力活动中都发挥着一种完全压倒性的作用，群体总是受着无意识因素的支配，它的行为主要不是受大脑，而是受脊椎神经的影响。</p><p>3、有意识人格的消失、无意识人格的得势、思想和感情因暗示和相互传染作用而转向一个共同的方向以及立刻把暗示的观念转化为行动的倾向是组成群体的个人所表现的主要特点。</p><p>4、群体在智力上总是低于孤立的个人，但从感情及其激起的行动这个角度来看，群体可以比个人表现得更好或更差，一切取决于群体所接受的暗示具有什么性质，群体既易于英勇无畏，也易于犯罪。</p><h3 id="感情和道德观"><a href="#感情和道德观" class="headerlink" title="感情和道德观"></a>感情和道德观</h3><p>1、群体的冲动、多变和急躁：所有刺激因素都对群体有支配作用，且它的反应会不停地发生变化。群体不会深思熟虑。种族总是会对群体的急躁、它们的冲动和多变产生影响。</p><p>2、群体轻信而易受暗示：群体的普遍特征之一是极易受人暗示，一切都取决于刺激因素的性质。群体中的某个人对真相的第一次歪曲，是传染性暗示过程的起点，它把头脑中产生的幻觉当作现实。史学著作是纯粹想象的产物，是对观察有误的事实所作的无根据的记述且混杂着一些对思考结果的解释。</p><p>3、群体情绪的夸张与单纯：群体表现出来的感情不管是好是坏，其突出的特点是极为简单而夸张，群体不允许怀疑和不确定，它们在感情上总是走极端。</p><p>4、群体的偏执、专横和保守：群体只知道简单而极端的感情，提供给他们的各种意见、想法和信念，他们或全盘接受，或一概拒绝，将其视为绝对真理或绝对谬论。群体对强权俯首帖耳，却很少为仁慈心肠所动。一时的革命本能不妨碍他们极端保守，他们对变化和进步的本能敌视。</p><p>5、群体的道德：群体道德可以比个人高尚或低劣。群体很少被利益的考虑所左右。群体的道德净化作用是一种经常看到的常态。</p><h3 id="观念、推理和想象力"><a href="#观念、推理和想象力" class="headerlink" title="观念、推理和想象力"></a>观念、推理和想象力</h3><p>1、群体的观念：群体的观念分为两类，一类是那些因一时的环境影响来去匆匆的次要观念，如只会让个人或某种理论着迷的观念；另一类是因环境、遗传规律和公众意见而具有极大的稳定性的基本观念，如宗教观念、社会主义和民主观念。</p><p>2、只有当观念具有绝对、毫不妥协和简单明了的形式时，才能产生有效影响，随着时机不同，群体会处在理解力所及的不同观念之一的影响下，能够干出大相径庭的事情，群体完全缺乏批判精神，因此也察觉不到这些矛盾。</p><p>3、高深的观念必须经过改造才能被群众所接受，这取决于群体或群体所属的种族性质，但其一般趋势是观念的低俗化和简单化。观念的社会影响与是否包含真理无关。</p><p>4、群体的推理能力：群体不受理性的影响，只有十分低下的推理能力，它所接受的观念只有表面上的相似性或连续性。</p><p>5、群体的想象力：群体形象化的想象力不但强大而活跃，且非常敏感。群体只会形象思维，这些形象间没有任何逻辑关系。群体易受神奇事物的感动，神奇事物是文明的真正支柱。</p><p>6、民众的想象力是政客的权力基础。刺激群众想象力的方式是令人吃惊的鲜明形象且没有任何多余的解释，或仅仅伴之以几个不同寻常或神奇的事实。影响民众想象力并不是事实本身，而是它们发生和引起注意的方式。</p><h3 id="宗教信仰"><a href="#宗教信仰" class="headerlink" title="宗教信仰"></a>宗教信仰</h3><p>1、宗教感情具有十分简单的特点，如对想象中某个高高在上者的崇拜，对生命赖以存在的某种力量的畏惧，盲目服从它的命令，没有能力对其信条展开讨论，传播这种信条的愿望，倾向于把不接受它们的任何人视为仇敌。</p><p>2、它不取决于对某个神的崇拜，只有当他把自己的一切思想资源、一切自愿的服从行为、发自肺腑的幻想热情，全部奉献给一项事业或一个人，将其作为自己全部思想和行动的目标与准绳时，才能说他是个虔诚的人。</p><p>3、群体的信念具有盲目服从、残忍的偏执以及要求狂热的宣传等宗教感情所固有的特点，信念的强大是因为它采取宗教的形式。</p><p>4、一切政治、神学或社会信条，要想在群众中扎根，都必须采取宗教的形式，即能够把危险的讨论排除在外的形式。即便有可能使群众接受无神论，这种信念也会表现出宗教情感中所有的偏执狂，它很快就会表现为一种崇拜。历史上的大事件都是群体宗教感情而非孤立的个人意志的结果。</p><h2 id="群体的意见和信念"><a href="#群体的意见和信念" class="headerlink" title="群体的意见和信念"></a>群体的意见和信念</h2><h3 id="间接因素"><a href="#间接因素" class="headerlink" title="间接因素"></a>间接因素</h3><p>1、间接因素是能使群体接受某些信念且使其再也难以接受别的信念，包括种族、传统、时代、各种典章制度和教育。</p><p>2、种族：种族的力量具有这样的特点，即任何要素在从一个民族传播给另一民族时都会经历深刻的变化。</p><p>3、传统：传统代表过去的观念、欲望和感情，是种族综合作用的产物且发挥着巨大影响，而它在失去必要性后会成为有害因素。群体是传统最坚定的维护者。</p><p>4、时间：时间引起一切信仰的诞生、成长和死亡，它建立信念，也毁灭信念，信念在时间的帮助下从无序走向有序。</p><p>5、政治和社会制度：政治和社会制度的影响力甚小，各民族不能选择自己视为最好的制度，相同的制度名称下掩盖着最不相同的东西，理论上不好的制度对某些民族却是必要的。</p><p>6、教育：在改善或恶化群众的头脑方面，教育至少能发挥一部分作用。</p><h3 id="直接因素"><a href="#直接因素" class="headerlink" title="直接因素"></a>直接因素</h3><p>1、直接因素是能够直接发挥作用的因素，包括形象、词语、套话，幻觉，经验，理性。</p><p>2、形象、词语和套话：词语或套话的力量与它所唤起的形象有关，词语只有变动不定的暂时含义，随着时代和民族的不同而不同，若想以它们为手段影响群体，必须搞清楚某个时候群体赋予的含义，而非过去具有的含义或精神状态有所不同的个人给予的含义。</p><p>3、幻觉：在所有文明的起源中都能发现幻觉，群体更喜欢幻觉而不是真理。</p><p>4、经验：只有经验能够使必要的真理在群众心中生根，经验只有不断地重复才能生效，为说服群众必须付出的经验代价。</p><p>5、理性：理性对群体没有任何作用，群体只受无意识感情的影响。</p><h3 id="群体领袖"><a href="#群体领袖" class="headerlink" title="群体领袖"></a>群体领袖</h3><p>1、一切群体动物有着服从头领的本能需要，只有群体的领袖能够使群众有所信仰并把他们组织起来。群众领袖握有非常专制的权威，这种专制性是他们得到服从的条件，领袖可分成明显不同的两类，一类包括充满活力但只一时拥有坚强意志的人；另一类人更为罕见，他们的意志力更持久。</p><p>2、领袖的动员手段包括断言、重复和传染。作出简洁有力的断言，不理睬任何推理和证据是让某种观念进入群众头脑最可靠的办法之一；若没有不断地重复断言，且要尽可能措辞不变，它仍不会产生真正的影响；相互传染是从社会下层向上层蔓延的过程，民众的意见不久就会成普遍意见。</p><p>3、利用断言、重复和传染普及的观念，因环境而获得巨大的威力，这时它们就会具有一种神奇的力量，即名望，它又分为先天的名望和个人的名望。</p><h3 id="信念和意见的变化"><a href="#信念和意见的变化" class="headerlink" title="信念和意见的变化"></a>信念和意见的变化</h3><p>1、群体的意见和信念可分成两类，一类是有重要而持久的信仰，数百年保持不变，另一类是短暂而易变的意见，通常是每个时代生生灭灭的普遍学说的产物。</p><p>2、牢固的信念是文明的主流，根除它们十分困难，信念在哲学上的荒谬性不妨碍它的传播。</p><p>3、不是来自普遍信念的意见极为易变，群体中易变的意见比以往任何时候都多，这有三个不同的原因，一是昔日的信仰正在日甚一日地失去影响力；二是群众的势力在不断增长；三是报业最近的发展。</p><h2 id="群体的分类及特点"><a href="#群体的分类及特点" class="headerlink" title="群体的分类及特点"></a>群体的分类及特点</h2><h3 id="群体的分类"><a href="#群体的分类" class="headerlink" title="群体的分类"></a>群体的分类</h3><p>1、异质性群体包括无名称的群体（如街头群体）和有名称的群体（如陪审团、议会等）。异质性群体由具有任何特点、任何职业、任何智力水平的个人组成。种族的因素使得不同的异质性群体几乎完全不同，群体精神敌不过种族精神，种族精神代表文明状态，群体精神代表野蛮状态。</p><p>2、同质性群体包括派别（政治派别、宗教派别等）、身份团体（军人、僧侣、劳工等）、阶级（中产阶级、农民阶级等）。派别是同质性群体组织过程的第一步；身份团体是最易于组织起群体的一个因素，由职业相同的个人组成；阶级由来源不同的个人组成，使他们结合在一起的是某种利益、生活习惯以及几乎相同的教育。</p><h3 id="犯罪群体"><a href="#犯罪群体" class="headerlink" title="犯罪群体"></a>犯罪群体</h3><p>群体犯罪的动机是一种强烈的暗示，参与这种犯罪的个人事后会坚信他们的行为是在履行责任，这与平常的犯罪大不相同，群体犯法时在心理上也许不能称之为犯罪，群体行为绝对是无意识的。</p><h3 id="刑事案件的陪审团"><a href="#刑事案件的陪审团" class="headerlink" title="刑事案件的陪审团"></a>刑事案件的陪审团</h3><p>陪审团受感情因素极强烈的影响，很少被证据所打动，统计数据显示它们的判决独立于它们的人员成分。</p><h3 id="选民群体"><a href="#选民群体" class="headerlink" title="选民群体"></a>选民群体</h3><p>选民群体有权选出某人担任官职的集体，属于异质性群体，但由于他们的行为仅限于一件规定十分明确的事情，即在不同的候选人中作出选择，因此他们只具有少数群体特征。在群体特有的特征中，他们表现出极少的推理能力，没有批判精神，轻信、易怒且头脑简单。此外，从他们的决定中也可找到群众领袖的影响，即断言、重复和传染的作用。</p><h3 id="议会"><a href="#议会" class="headerlink" title="议会"></a>议会</h3><p>议会在运作中所造成的两种严重危险：一是不可避免的财政浪费，这是各种紧迫问题和当选群体缺少远见的必然产物和必须投票赞成一切为了地方目的的补助金；二是对于个人自由不断增加的限制，这是大量的法律（它们总是一种限制性措施）造成的结果。</p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理学 </tag>
            
            <tag> 群体心理学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>影响力：营销制胜的七大心理学武器</title>
      <link href="/9787559656438/"/>
      <url>/9787559656438/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/9787559656438/image-20221019225028015.png" alt="书籍简介"></p><p>无论你是普通人还是为某一产品或事业观点游说的人，这都是一本基本的必读书，是你理解他人心理的基石。心理学家罗伯特·西奥迪尼为我们解释了为什么有些人具有说服力，而我们总是容易上当受骗。隐藏在冲动地顺从他人行为背后的 7 大心理武器，正是这一切的根源。</p><p>本书阐释顺从行为背后的互惠、承诺与一致、社会认同、喜好、权威、稀缺和联盟 7 大基本原则。动机不同，使用的武器也不同——完全陌生，使用互惠、喜好和联盟培养关系；基础关系，使用社会认同和权威减少不确定性；关系到位，使用承诺与一致和稀缺激发行为。</p><p><img src="/../images/9787559656438/outline.jpg" alt="核心要点"></p><h2 id="影响力武器"><a href="#影响力武器" class="headerlink" title="影响力武器"></a>影响力武器</h2><p>1、动物行为学家认为动物大多存在机械刻板的行为模式（即固定行为模式），该模式与人类的某些自动响应（即按一下就播放）有很大相似性。人类和近似人类的动物的自动行为模式往往由该环境下相关信息的单一特征触发，即个体无须详尽彻底分析每一条信息，就能决定正确的行动方针。</p><p>2、捷径反应的优点在于效率和经济性，捷径反应是只根据一种常见的信息触发特征自动做出反应，其优点在于节省时间、精力和心智能量，缺点在于易受愚弄，一犯错代价就很大。若只根据一个可用信息的片段，甚至根据一般某个能预测出的片段做出反应，尤其按无意识的自动方式做出反应，出错概率就会大增。若其他人通过故意的安排（如对触发特征加以操纵）让自己牟利，刺激对方在不恰当的时机做出合乎他们心意的行为，对方犯错的概率就更大。</p><p>3、顺从技巧是刺激一个人顺从另一个人的要求，从自动化捷径反应的角度来看，大部分个体都对顺从建立起一套触发特征，这是一些具体的信息片段，它们通常可以告诉人们什么时候顺从他人的请求正确且有利，每一条顺从的触发特征都可能会变成影响力武器，刺激人们同意他人的请求。</p><p>4、知觉对比是把两种不同事物间的差异看得比实际上更大的倾向，是一些说服专业人士（销售、广告商等）喜欢利用的影响力杠杆，其优点在于人们通常很难意识到有人在战术性地使用它。比如房产经纪人先向有意向的购房者展示一两处缺乏吸引力的房子，再给他们看另一处更有吸引力的房子，这时后者在购房者眼里看来会更有吸引力。</p><h2 id="互惠"><a href="#互惠" class="headerlink" title="互惠"></a>互惠</h2><p>1、社会学家和人类学家认为互惠原则是体现人类文化最普遍、最基本的一种规范，该原则主张人们应当设法偿还别人给予的东西，赋予接受者未来偿还的义务，人们就可以大胆把东西给别人，无须担心自己会遭受损失。其内置的未来责任感使人类发展出多种持久的关系、交易和交换行为，所有社会成员从小被告知应遵守该原则，不然就会遭到严重的社会排挤。</p><p>2、互惠原则常影响人们做出是否顺从他人要求的决定，其具有三个特点。第一，该原则影响决定人们是否顺从他人要求的因素；若礼物、好意或服务个性化，或根据偏好或需求量身定制，这条原则尤其有效。第二，即使最初的恩惠强加于人，该原则也管用，这样没法主动决定自己愿意欠谁的人情。第三，该原则能推动不平等交换，人们往往会答应一个比先前所得人情大得多的要求以消除不安的亏欠感。</p><p>3、抢先让步，刺激他人也让步是利用互惠原则提高他人顺从概率的另一种方法，即拒绝–后撤策略（留面子法），主要依靠回报让步的压力。提出请求的人以肯定会遭到拒绝的极端要求拉开序幕，之后再后撤到较小的要求，即他原本就想达成的目标，而后一要求很可能会被对方接受，因为它显得像是一种让步。拒绝–后撤策略不仅能提高对方答应要求的概率，还能提高对方将来履行这一要求的概率，因为在参与让步的互惠交换后，人们觉得负有更多责任，对结果也更满意。</p><p>4、若想防备互惠原则造成的施压和顺从，最好的办法不是一概拒绝他人的最初善意，而是大方接受最初的恩惠或让步，一旦事实证明对方并非出于善意，就重新定义其行为。只要不再把这些行为看成是恩惠或让步，就没有必要以善意或让步做出回应。</p><h2 id="喜好"><a href="#喜好" class="headerlink" title="喜好"></a>喜好</h2><p>1、人们倾向于答应自己认识和喜欢的人提的要求，说服专业人士会通过强调几个能提升个人全面吸引力和好感的因素增加他人顺从自己的效力。</p><p>2、影响好感和顺从的第一点因素是外表魅力。外表魅力似乎能造成一种光环效应，把好印象延伸到如天赋、善意、智力等特点，长得好看的人在提请求和改变他人态度方面说服力更强。</p><p>3、影响好感和顺从的第二点因素是相似性。人们喜欢与自己相似的人，更愿意轻率地答应他们的请求。还有一个能带来好感的因素是赞美。一般而言，赞美有助于我们获得他人的好感和顺从。真诚的赞美有两种特别有用的类型，一是在背后说出来；二是让接受赞美的人获得一种渴望恪守的声誉，从而继续做出对自己有利的行为。</p><p>4、通过与他人反复接触增强熟悉感，在正常情况下，这也是一种增加好感的方式。尤其是当双方在积极而非消极的氛围下进行接触时，事情更是如此。互助和成功的合作是最为有效的一种积极氛围。</p><p>5、跟好感有关的还有一个因素是关联。广告商、政治家和厂商将自己或自己的产品与积极的东西联系以通过关联的过程分享他人积极的观感；其他一些人如体育迷也会努力在他人眼中把自己跟有利的事情关联，疏远不利的事情。</p><p>6、若想在做出顺从决定时消除好感带来的不必要影响，有效策略之一是警惕对提要求者的过度好感。只要发现自己在当前情况下对请求者产生不相称的好感，就应从社会互动中退后一步，在心智上把请求者和他所提的请求分开，而只根据这个请求是否对自己有好处来做决定。</p><h2 id="社会认同"><a href="#社会认同" class="headerlink" title="社会认同"></a>社会认同</h2><p>1、社会认同原则指出，人们判断自己在某个环境下该相信什么、该怎么做的重要途径是看其他人在这个环境下相信什么、怎么做。成年人和儿童都存在强大的从众效应，且这一效应适用于购物决定、慈善捐款、缓解恐惧等多种活动。因此，只要指出一样东西的受欢迎程度，就能提升它的受欢迎程度。</p><p>2、社会认同在三种情况下影响力最强。第一种是不确定感。如果人们不确定，掌握的情况模糊，他们就更有可能关注他人行为，并认为这些行为是正确的。例如，较之一目了然的紧急情况，倘若形势暧昧不明，这时旁观者是否出手帮忙的决定会受到其他旁观者行为的极大影响。</p><p>3、第二种与 “ 人多 ” 有关：人们更倾向于依据群体人数的多少选择追随目标。如果人们看到很多人在做某事，就往往愿意追随，因为该行为显得更正确或有效、更具可行性、社会接受程度更高。</p><p>4、第三种是相似性，人们更倾向顺从与自己相似者的信念和行为，即 “ 同侪说服 ”。社会学家菲利普斯汇集的自杀统计数据显示，倘若某个陷入困境的人自杀的消息高度曝光，和这个人相似的人也会决定走上绝路。从圭亚那琼斯镇的集体自杀事件可以看出，该组织的领导者琼斯利用不确定感和相似性引诱当地的绝大部分民众顺从地自杀。</p><p>5、许多沟通人士在社会认同方面犯下的一个弥天大错是声讨一种不可取行为（酒后驾驶、青少年自杀等）的发生频率，希望借此阻止它。然而，这些谴责声（看看做这些事的这些人！）暗含另一条削弱自己立场的信息 “ 看啊！居然有这么多人在做这件事。”。因为社会认同原则的力量，情况可能会变得更加糟糕。</p><p>6、若由于观念、事业或产品尚未得到广泛支持而无法借助现有的社会认同，可通过诚实地描述发展趋势（受众希望持续下去的趋势）的支持，借用未来社会认同的证据。</p><p>7、若想避免太过依赖不完善的社会认同，就要警惕明显伪造的社会证据，并意识到决定不应仅建立在其他人怎么做的基础。</p><h2 id="权威"><a href="#权威" class="headerlink" title="权威"></a>权威</h2><p>1、社会存在顺从权威要求的强大压力，很多正常、心理健康的人宁肯违背自己的意志，也要向他人施以危险又残忍的痛苦折磨，只因为旁边有权威人士要他们这么做。这种顺从正统权威的强烈倾向来自系统化的社会实践，其目的是向社会成员灌输 “ 这么做是正确的 ” 印象，一般来说，按照真正权威的指示去做，大多数时候都是合适的，因为这些人往往拥有更多的知识、智慧和权力。基于这些原因，人们在做决定时往往会盲目选用这一思考捷径。</p><p>2、人们在自动响应权威时易对权威的表面象征（而非实质）做出反应。研究证明，拥有头衔、衣着和汽车其中之一（无须正规的资质）的人，会得到他人更多的顺从和尊重。在所有案例中，服从的人都低估权威压力对其行为的影响。</p><p>3、权威的影响力来自被认为手握职权或本身是权威，第一类权威存在问题，因为吩咐别人做事会引起抵触和怨恨情绪；第二类权威则避免这一问题，因为人们认为这类权威掌握充分的信息，乐于听从对自己正在从事的事情有更多知识的人提出的建议。</p><p>4、若在他人眼里是权威的人，不仅是专家（在相关主题上知识渊博），还显得值得信赖（诚实地介绍自己的知识），就会有最大的说服效力。为了确立可信度，沟通者可能会承认某方面存在不足（多为极小的缺点），并随后通过介绍优点弥补。</p><p>5、若想保护自己免受权威影响力的负面影响，就问问自己 “ 这个权威是真正的专家吗？这个专家说的是真话吗？”，第一个问题把将注意力从权威象征转到证明资历的真正证据；第二个问题建议不要仅着眼权威的知识，还要从当时的环境出发，考虑可信度，有些别有所图的人会先透露有关自己的负面消息，给人留下一种诚实的印象，好让随后的信息显得更可信。</p><h2 id="稀缺"><a href="#稀缺" class="headerlink" title="稀缺"></a>稀缺</h2><p>1、按照稀缺原则，人们认为难以获得的机会价值更高，“ 数量有限 ” 和 “ 时间有限 ” 等顺从手法就是利用这一原理牟利的方式，若现在不采取行动，就会损失某种有价值的东西，调动人类的损失厌恶倾向，即损失某物比获得同等价值的某物的激励作用更强。</p><p>2、稀缺原则的成立有两个原因，一是由于难获得的东西通常更有价值，所以稀缺性可视为判断产品或服务质量的捷径；二是若东西越来越难获取，人们会丧失自由，根据逆反心理理论，面对自由的丧失，人们的反应是比从前更想要得到它们（以及与自由相关的商品和服务）。</p><p>3、人一生的绝大部分时间里都存在逆反心理这种行为动机，可怕的两岁和青春期表现得最明显，这两个年龄段以个性意识觉醒为特点，控制、权利和自由等问题极为突出。因此，处在这两个年龄段的人对限制特别敏感。</p><p>4、稀缺原则不仅影响商品价值，还影响评估信息，限制获取某一信息会让人更想得到它或对它产生更多好感。以审查为例，即使人们根本得不到信息，也受它影响。反过来说，若人们感觉得到的信息包含独家（稀缺）内容，它的说服力就更强。</p><p>5、稀缺原则最适用于以下两种条件，一是若物品是新近才变得稀缺，它的感知价值会更高，即人们觉得新近受限的东西比素来受限的东西更宝贵；二是当有人竞争时，稀缺资源对人们的吸引力最大。</p><p>6、若想防范稀缺压力的影响，可试着在稀缺环境中对高昂的情绪保持警惕。一旦得到警告，就采取步骤平息高涨的情绪，从 “ 为什么会想要它 ” 这个角度评估机遇的价值。</p><h2 id="承诺与一致"><a href="#承诺与一致" class="headerlink" title="承诺与一致"></a>承诺与一致</h2><p>1、心理学家认为大多数人都有让个人的言论、信仰、态度和行为保持一致的欲望，这种一致性倾向有三大源头：第一，社会高度重视良好的个人一致性；第二，整体保持一致不仅影响公众形象，还为日常生活带来有利的应对方法；第三，面对复杂的社会，方向一致提供宝贵的行为捷径，只要和先前的决定保持一致，人们以后碰到类似的环境就不用处理所有相关信息，只要想一想先前的决定，再做出一致的反应即可。</p><p>2、当人们做出承诺，即站定立场后，会更乐意答应和先前承诺一致的要求。因此，许多说服专业人士会设法使人们站到一个立场，这个立场和他们之后提出的要求、要人们做的事情一致，但不是所有的承诺都能带来前后一致的行动，主动、公开、付出努力、发自内心、没人强迫的承诺最有效，它们不仅能改变自我形象，还向人们透露必须真正相信的信息。</p><p>3、人们会寻找新的理由和借口，证明自己做下的承诺很明智，即使刺激人们做出承诺的条件发生变化，承诺也能长久维持，这种现象解释为什么诸如 “ 抛低球 ” 等欺骗性顺从手法会有效。</p><p>4、承诺的另一个优点在于提醒人们之前的承诺可重新带来指导行为的效果，即使情况和之前完全不同。提醒不仅能够让承诺复活，还能够通过巩固相关的自我形象来强化承诺。</p><p>5、若想防范一致性压力造成的不当影响，就应当倾听来自肠胃和心灵发出的信号。当意识到承诺与一致的压力迫使自己答应本来不乐意答应的要求时，肠胃就会发出信号，此时最好向提要求的人说明，若答应他们的要求，就是死脑筋地保持一致，人们不乐意这么干；当搞不清最初的承诺是否正确时，就要倾听心灵深处发出的信号，问问自己 “ 若知道现在掌握的情况，倘若能回头，还会做出同样的承诺吗？” ，在个人主义盛行的社会，承诺与一致手法对年纪 50 岁以上的人最管用。</p><h2 id="联盟"><a href="#联盟" class="headerlink" title="联盟"></a>联盟</h2><p>1、若人们将某人视为自己团队的一员，就更容易答应此人提出的请求，和他人产生 “ 我们 ” 感的关键在于双方有共同的身份，即人们用来定义自己和所属群体的部落式类别，如种族、民族、国籍、家庭以及政治和宗教联盟。</p><p>2、“ 我们 ” 式群体的研究有三条一般性结论。第一，这些群体的成员更关注内部成员的成果和幸福。第二，这些群体的成员会利用其他成员的偏好和行动来指导自己，以确保群体联盟。第三，联盟倾向出现在进化过程，不仅有利于整个群体，还有利于自己。这三种 “ 常量 ” 经常出现在包括商业、政治、体育和个人关系在内的广泛领域。</p><p>3、带来 “ 我们 ” 感的第一个基本因素是和他人产生的身心合一感，由血缘共性和地域共性产生。</p><p>4、带来联盟感的第二个基本因素是行动合一的体验，由共同的音乐体验、多次互惠交换、一起吃苦和共同创造产生。</p><p>5、利用身心合一和行动合一的联盟效应提高人类 “ 合而为一 ” 的概率，需要人们主动和群体外成员在家里分享家庭体验，在社群分享邻里体验，在社交互动分享友谊体验。</p><p>6、国家认同、共同敌人、共同情感经历和共同观点等其他类型的联系也能带来与群体外成员的联盟感，但这种方式带来的联盟感大多为时甚短，若把注意力多次集中到这些联系，提升其感知重要性，可能就能延长其效力。</p><h2 id="即时影响力"><a href="#即时影响力" class="headerlink" title="即时影响力"></a>即时影响力</h2><p>1、技术的重大进步促使信息蓬勃发展，选择日益繁多，知识趋向爆炸，面对这种变化和选择，人们做决定的方式出现根本性的变化。虽然我人们希望任何情况都能做出周到的决定，但当代生活变化多端，节奏又快，使得人们没有条件详尽分析正反两方面的相关信息，此时会倾向采用一种便捷的方法，即只根据基本可靠的单一信息做出决定。因此，在本书中讨论最可靠且最为人所接受的单一顺从触发因素，包括互惠、喜好、社会认同、权威、稀缺、承诺与一致、联盟。</p><p>2、当今社会认知过载日益严峻，抄捷径下决定的做法随之普遍化，说服专业人士只要通过加入一两个影响力触发因素提出要求，就很可能实现他们的目的。只有通过弄虚作假、伪造或歪曲证据，误导人们做出快捷响应的人，才是正确的还击目标，要采取一切合理的方法，如抵制、威胁、对峙、谴责、抗议，来报复以刺激捷径反应为目的的虚假信号。</p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理学 </tag>
            
            <tag> 说服 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好用到飞起！搭建博客效率翻倍的 VSCode 软件</title>
      <link href="/vscode/"/>
      <url>/vscode/</url>
      
        <content type="html"><![CDATA[<p>不知道你搭建静态博客时有没有遇到这些情况：</p><ul><li>一个接一个打开文件，多窗口作业。</li><li>因为改错文件，反反复复重来了好几遍。</li><li>打开多个窗口，电脑总是卡顿难以操作。</li><li>代码总是出错，却不知道问题在哪。</li></ul><p><img src="/../images/vscode/Wi7kPJ5LNV.png" alt="多窗口"></p><p>这不仅影响了我们的操作效率，还影响了我们的心情，试想一下，电脑卡顿的时候，再加上一堆未整理的东西，谁的心情能够平静？有没有一个东西，能够集代码编辑 + 命令行 + 写作 + 代码字段检索 + 多窗口作业于一体，提高开发效率，减少不必要的出错呢？</p><p><a href="https://code.visualstudio.com/">Visual Studio Code</a>（简称 VSCode）是由微软开发的一款源代码编辑器，支持 IntelliSense、调试、Git 和代码片断，可在 Windows、Linux 和 macOS 上下载使用，支持常见的脚本和编程语言，还可以通过安装扩展来获得更多语言和功能的支持。</p><p><img src="/../images/vscode/AY4WbYADZg.png" alt="VSCODE"></p><p>只需要一个软件，你就可以完成搭建静态博客的全流程，从安装到主题配置，从写作到本地预览，从生成静态文件到部署到 GitHub 仓库，相当于 “ 一键 ” 操作！下面将介绍我在 VSCode 搭建静态博客的一些使用场景，以及当中使用的拓展。</p><h2 id="语言环境"><a href="#语言环境" class="headerlink" title="语言环境"></a>语言环境</h2><p>安装好 VSCode 后，如果你已经拥有了代码项目，你可以在项目所在的根目录，右键单击选择 <code>通过code打开</code>或者在 VSCode 点击「 菜单栏 -&gt; 文件(F) -&gt; 打开文件夹 」，即可用 VSCode 打开整个项目文档。</p><p><img src="/../images/vscode/KfzawoPWoy.png" alt="通过Code打开"></p><p><img src="/../images/vscode/wJrm6z6W3w.png" alt="操作面板示例"></p><p>原生的 VSCode 界面是纯英文的，如果你想要切换成中文界面，就按住 <code>Ctrl+Shift+X</code>或者点击「 菜单栏 -&gt; 查看(V) -&gt; 扩展 」，调出扩展界面，在应用商店搜索 <code>Chinese</code>，找到下列显示的中文语言包，安装后重启即可显示中文界面。</p><p><img src="/../images/vscode/image-20221115071324867.png" alt="中文语言包"></p><p>另外，如果你想实现多窗口作业，只需要从活动侧边面板将对应的文档按住鼠标左键拖动到右边编辑区域即可。</p><h2 id="命令终端"><a href="#命令终端" class="headerlink" title="命令终端"></a>命令终端</h2><p>无论是搭建静态博客，还是托管代码到 GitHub 仓库，<a href="https://git-scm.com/">Git</a> 已经成为了必不可少的工具，那又该如何在 VSCode 中调用 Git 呢？</p><p>在 VSCode 界面按住 <code>Ctrl+Shift+P</code> 或者点击「 菜单栏 -&gt; 查看(V) -&gt; 命令面板 」，调出命令界面，在窗口内键入 <code>open settings</code>，选择<code>首选项：打开用户设置（JSON）</code>，进入 <code>settings.json</code> 编辑界面，找到对应参数，并添加如下内容。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 请填入你的Git安装位置，注意是bin的位置 */</span></span><br><span class="line"><span class="attr">&quot;git.path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Program Files (x86)\\Git\\bin\\git.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;terminal.integrated.profiles.windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        ……</span><br><span class="line">        <span class="attr">&quot;Git Bash&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Git Bash&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">/* 在这里新增一个git调用git bash，同样是bin的位置 */</span></span><br><span class="line">        <span class="attr">&quot;git&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Program Files (x86)\\Git\\bin\\bash.exe&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span> </span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>接着，你就可以按住 <code>Ctrl+` </code>或者 <code>Ctrl+J</code> 或者点击「 菜单栏 -&gt; 终端(T) -&gt; 新建终端 」，调出终端界面，选择 <code>+</code> 下拉菜单，选择 <code>git</code>，即可在 VSCode 使用 Git Bash 了。</p><p><img src="/../images/vscode/Ky9fLsEtNN.png" alt="Bash"></p><h2 id="代码编辑"><a href="#代码编辑" class="headerlink" title="代码编辑"></a>代码编辑</h2><p>静态博客最基本的代码语言有 HTML、CSS、JavaScript、JSON、Markdown 等，VSCode 不仅支持多种语言，还支持语法高亮显示和代码匹配等功能。</p><p><img src="/../images/vscode/image-20221115075345132.png" alt="示例"></p><p><img src="/../images/vscode/image-20221115074810125.png" alt="示例"></p><p>你可以通过按住 <code>Ctrl+Shift+X</code> 或者点击「 菜单栏 -&gt; 查看(V) -&gt; 扩展 」，调出扩展界面，在应用商店搜索相应的语言名称，如 <code>html</code> ，然后下载相应语言的扩展即可。你还可以通过浏览器打开 <a href="https://marketplace.visualstudio.com/VSCode">VSCode 扩展市场</a>，如此你可以借用浏览器的翻译功能，更加详细地了解扩展。</p><p>同时，你还可以通过 <a href="https://code.visualstudio.com/docs/languages/overview">VSCode Language 文档</a>获取每种代码语言推荐的扩展。我之所以不具体推荐某个扩展，是因为每个人的使用情况不一样，你最好结合自己的需求选择适合自己的扩展，安装了过多无用的拓展，对 VSCode 的使用也是一种负担。</p><p>另外，如果你想要搜索某个代码在整个项目中的其他位置，你可以按住 <code>Ctrl+Shift+F</code> 或者点击「 菜单栏 -&gt; 查看(V) -&gt; 搜索 」，调出搜索界面，复制粘贴代码搜索即可。VSCode 既支持侧边栏代码的全项目搜索，也支持单个文件的 <code>Ctrl+F</code> 搜索。</p><h2 id="写作预览"><a href="#写作预览" class="headerlink" title="写作预览"></a>写作预览</h2><p>如果你熟悉一些 Markdown 语法，你就能够很好地将 VSCode 打造成一个很好的写作环境，它不仅有对 Markdown 语法的键入提示，还提供实时动态同步预览功能。</p><p><img src="/../images/vscode/preview-scroll-sync.gif" alt="示例"></p><p>在扩展应用商店搜索 <code>Markdown</code>，你将获得许多对它支持的扩展。比如，你可以通过 <a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one">Markdown All in One</a> 很好地实现 Markdown 的快捷输入；你可以通过 <a href="https://marketplace.visualstudio.com/items?itemName=telesoho.vscode-markdown-paste-image">Markdown Paste</a> 很方便地粘贴图片资源；你还可以通过 <a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint">Markdownlint</a> 实现对 Markdown 语法的检查。</p><p>即使你使用 <a href="https://marketplace.visualstudio.com/VSCode">Typora</a> 编辑 Markdown，它也能同步操作，即你在 Typora 编辑的一切内容，VSCode 也会同步显示，前提是你已经开启 Typora 自动保存或者在 Typora 已经保存内容，反之亦然。</p><h2 id="托管代码"><a href="#托管代码" class="headerlink" title="托管代码"></a>托管代码</h2><p>无论如何，我都建议你在 VSCode 登录你的 GitHub 账户，方便同步信息，点击左侧活动侧边栏的账户按步骤操作即可。使用 VSCode，你可以很方便地将代码推送到 GitHub 仓库，只需要首次使用 Git 命令连接仓库即可，往后只需在源代码管理面板提交即可。</p><p><img src="/../images/vscode/6ePAjjZLEx.png" alt="源代码管理"></p><p>按住 <code>Ctrl+` </code>或者 <code>Ctrl+J</code> 或者点击「 菜单栏 -&gt; 终端(T) -&gt; 新建终端 」，调出终端界面，选择 <code>+</code> 下拉菜单，如果你已配置 Git Bash，则选择 <code>git</code>；如果你尚未配置，则需要选择 <code>Command Prompt</code>（即 <code>cmd</code>），具体操作请阅读「 <a href="https://zyuyu.top/github-actions./">只专注写作！GitHub Actions 自动部署博客</a> 」，以下是初次连接 GitHub 仓库的执行命令。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd命令仅限于已生成静态文件的情况</span></span><br><span class="line"><span class="built_in">cd</span> public</span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git branch -M main </span><br><span class="line"></span><br><span class="line"><span class="comment"># 若是HTTPS地址，则执行这部分</span></span><br><span class="line">git remote add origin https://github.com/owner/repo.git</span><br><span class="line">git push -u origin main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若是SSH地址，则执行这部分</span></span><br><span class="line">git remote add origin git@github.com:owner/repo.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>一旦你已经连接 GitHub 仓库的某一分支，源代码管理处就会显示你每次的变更，你只需要按下图操作即可实现一键推送至 GitHub 仓库的分支。</p><p><img src="/../images/vscode/4W0hFTCHzf.png" alt="源代码管理"></p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://code.visualstudio.com/docs/">VSCode 使用文档</a></li><li><a href="https://marketplace.visualstudio.com/VSCode">VSCode 扩展市场</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Hugo </tag>
            
            <tag> VSCode </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>评论系统怎么选？这几个好看轻量易上手！</title>
      <link href="/comments/"/>
      <url>/comments/</url>
      
        <content type="html"><![CDATA[<p>不知道你有没有遇到这样的情况：</p><ul><li>评论系统需要爬墙才能访问。</li><li>评论系统不支持在 GitHub 使用。</li><li>评论系统采取收费模式。</li><li>评论系统的使用需要购买服务器。</li></ul><p>评论系统对于博客的重要性不言而喻，动态博客通常都有配置好的评论区，而静态博客是纯前端的界面，没有登录功能和后端管理，大多需要依赖第三方评论系统。虽然很多博客生成器的主题都集成了评论区系统，但都要你自己去获取评论区 <code>id</code> 才能使用，这就有可能会遇到以上提到的情况之一。</p><p><img src="/../images/comments/b7b6bdc0009f401bbb536d66965ad8d1.gif" alt="我太难了"></p><p>评论区系统该怎么选择？在回答这个问题之前，你应该思考一下你为什么需要评论区？评论区最大的作用是沟通与交流，你要和谁沟通交流？读者！所以，选择评论区系统，要看看你的用户群体主要是国内用户还是国外用户，同时还要看看每个评论区系统配置的难易程度。下文我将介绍几个我在使用过程中配置比较容易的评论系统，你可以根据你的需求有选择地使用。</p><h2 id="Twikoo"><a href="#Twikoo" class="headerlink" title="Twikoo"></a>Twikoo</h2><p><a href="https://twikoo.js.org/">Twikoo</a> 是一个简洁、安全、免费的静态网站评论系统，它支持一键部署、手动部署、命令行部署、Vercel 部署。下面以 <a href="https://twikoo.js.org/quick-start.html#vercel-%E9%83%A8%E7%BD%B2">Vercel 免费部署方式</a>说明。</p><p><img src="/../images/comments/image-20221113030042242.png" alt="操作步骤"></p><p>Twikoo 提供的步骤非常明细，这里不细说，主要说说环境 ID（<code>https://xxx.vercel.app</code>）访问的问题。由于 Vercel 官方域名的 DNS 被污染，如果环境 ID 使用了 <code>vercel</code> 自带的域名，将无法正常获取数据，解决方案是用自定义的域名去代替 Vercel 的域名，来自 <a href="https://tzy1997.com/articles/hexo1614/">@唐志远</a>。</p><p>以阿里云为例，阅读「 <a href="https://zyuyu.top/domain-name/">域名太长？三步搞定 GitHub Pages 自定义域名</a> 」这篇文章完成购买域名和解析域名这两步。接着，登录进入<a href="https://homenew.console.aliyun.com/home/dashboard/ProductAndService">阿里云服务器工作台</a>，搜索域名。</p><p><img src="/../images/comments/zxzIGq6qTp.png" alt="域名"></p><p>点击左侧的「 域名列表 」，点击目标域名操作中的 <code>解析</code>，进入「 解析设置 」页面。</p><p><img src="/../images/comments/nNhano6wCJ.png" alt="解析域名"></p><p>进入「 解析设置 」页面后，点击左侧的「 域名解析 」，进入「 域名解析 」界面，然后点击 <code>添加域名</code>。其中， <code>example</code> 可以根据你的想法修改，如 <code>twikoo</code>，但后面域名必须为你自己的域名。</p><p><img src="/../images/comments/image-20221113031601561.png" alt="添加域名"></p><p>点击 <code>TXT授权校验</code>，出现以下信息，记得保存好该信息。</p><p><img src="/../images/comments/Oag8YFu3ph.png" alt="授权校验"></p><p>进入「 解析设置 」页面，点击 <code>添加记录</code>，将上一步的信息填入对应信息即可。</p><p><img src="/../images/comments/pVF7oRaB52.png" alt="添加记录"></p><p>添加好记录之后，再次回到「 域名解析 」界面，点击 <code>添加域名</code>，点击验证过后，会出现「 已验证成功，确认添加域名 」，接着点击确认，二级域名就创建好了。</p><p>接着将二级域名解析到 Vercel，如下添加两条记录。</p><p><img src="/../images/comments/lWF8sXZn1z.png" alt="域名解析"></p><p>然后进入 <a href="https://vercel.com/">Vercel</a> 的「 Project Settings -&gt; Domains 」添加域名即可。</p><p><img src="/../images/comments/MAP36EgVA8.png" alt="添加域名"></p><p>最后替换 Hexo 或 Hugo 主题配置文件的 <code>envId</code> 即可。注意，二级域名一定要 <code>https</code>，填入 <code>http</code> 将无法进入评论区设置。</p><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[params.page.comment.twikoo]</span></span><br><span class="line">  <span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line">  <span class="attr">envId</span> = <span class="string">&quot;此处填入你的二级域名&quot;</span></span><br><span class="line">  <span class="attr">region</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">path</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">visitor</span> = <span class="literal">true</span></span><br><span class="line">  <span class="attr">commentCount</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo 示例</span></span><br><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">envId:</span> <span class="string">此处填入你的二级域名</span></span><br><span class="line">  <span class="attr">region:</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure><p>最后你就可以执行本地预览命令打开本地服务器查看评论区了。注意的是，Hugo 需要执行 <code>hugo server -e production</code> 才能看到评论区。</p><p><img src="/../images/comments/n9q4GSW8WV.png" alt="twikoo"></p><h2 id="Utterances"><a href="#Utterances" class="headerlink" title="Utterances"></a>Utterances</h2><p><a href="https://utteranc.es/">Utterances</a> 是基于 Github Issue 构建的轻量级评论小部件。需要注意的是，它只有拥有 GitHub 账户的用户才能评论，而且它目前只支持英语界面，评论界面是先出现用户评论，再出现评论框。</p><p>它的使用非常简单，你只需要拥有一个 GitHub 的公开仓库，然后在这个仓库中安装 Utterances 就可以了。</p><p><img src="/../images/comments/2022-10-06_220214.png" alt="2022-10-06_220214"></p><p>按照步骤完成后，你将获得一个脚本，示例如下。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://utteranc.es/client.js&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">repo</span>=<span class="string">&quot;[ENTER REPO HERE]&quot;</span>  # <span class="attr">仓库的名称</span></span></span><br><span class="line"><span class="tag">        <span class="attr">issue-term</span>=<span class="string">&quot;pathname&quot;</span>  # <span class="attr">评论区映射位置</span></span></span><br><span class="line"><span class="tag">        <span class="attr">theme</span>=<span class="string">&quot;github-light&quot;</span>  # <span class="attr">评论区的样式</span></span></span><br><span class="line"><span class="tag">        <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>  # <span class="attr">评论区跨域注解</span></span></span><br><span class="line"><span class="tag">        <span class="attr">async</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着打开 Hexo 或 Hugo 主题配置文件，填入对应的参数即可，示例如下。</p><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hugo 示例</span></span><br><span class="line"><span class="section">[params.page.comment.utterances]</span></span><br><span class="line">  <span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line">  <span class="attr">repo</span> = <span class="string">&quot;在此输入仓库&quot;</span></span><br><span class="line">  <span class="attr">issueTerm</span> = <span class="string">&quot;pathname&quot;</span></span><br><span class="line">  <span class="attr">label</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">lightTheme</span> = <span class="string">&quot;github-light&quot;</span></span><br><span class="line">  <span class="attr">darkTheme</span> = <span class="string">&quot;github-dark&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo 示例</span></span><br><span class="line"><span class="attr">utterances:</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">在此输入仓库</span></span><br><span class="line">  <span class="attr">issue_term:</span> <span class="string">pathname</span></span><br><span class="line">  <span class="attr">light_theme:</span> <span class="string">github-light</span></span><br><span class="line">  <span class="attr">dark_theme:</span> <span class="string">photon-dark</span></span><br></pre></td></tr></table></figure><p>最后你就可以执行本地预览命令打开本地服务器查看评论区了。注意的是，Hugo 需要执行 <code>hugo server -e production</code> 才能看到评论区。</p><p><img src="/../images/comments/2022-10-07_024153.png" alt="utterances"></p><h2 id="Giscus"><a href="#Giscus" class="headerlink" title="Giscus"></a>Giscus</h2><p><a href="https://giscus.app/zh-CN">Giscus</a> 是基于 GitHub Discussions 驱动的轻量级评论小部件。与 Utterances 相比，它所获取的权限更少，使用更加安全，并且也有中文界面，可调整评论框的位置，但同样只有拥有 GitHub 账户的用户才能评论。</p><p>它的使用非常简单，你只需要拥有一个 GitHub 的公开仓库，然后在这个仓库中安装 Giscus，并开启这个仓库的 Discussions 功能就可以了。Discussions 功能位于仓库的「 Settings -&gt; General -&gt; Features -&gt; Discussions 」。</p><p><img src="/../images/comments/2022-10-07_022237.png" alt="Giscus"></p><p><img src="/../images/comments/2022-10-07_022641.png" alt="Discussions"></p><p>按照步骤完成后，你将获得一个脚本，示例如下。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://giscus.app/client.js&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-repo</span>=<span class="string">&quot;[在此输入仓库]&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-repo-id</span>=<span class="string">&quot;[在此输入仓库 ID]&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-category</span>=<span class="string">&quot;[在此输入分类名]&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-category-id</span>=<span class="string">&quot;[在此输入分类 ID]&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-mapping</span>=<span class="string">&quot;pathname&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-strict</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-reactions-enabled</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-emit-metadata</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-input-position</span>=<span class="string">&quot;bottom&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-theme</span>=<span class="string">&quot;preferred_color_scheme&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-lang</span>=<span class="string">&quot;zh-CN&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">async</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着打开 Hexo 或 Hugo 主题配置文件，填入对应的参数即可，示例如下。</p><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hugo 示例</span></span><br><span class="line"><span class="section">[params.page.comment.giscus]</span></span><br><span class="line">  <span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line">  <span class="attr">dataRepo</span> = <span class="string">&quot;在此输入仓库&quot;</span></span><br><span class="line">  <span class="attr">dataRepoId</span> = <span class="string">&quot;在此输入仓库 ID&quot;</span></span><br><span class="line">  <span class="attr">dataCategory</span> = <span class="string">&quot;在此输入分类名&quot;</span></span><br><span class="line">  <span class="attr">dataCategoryId</span> = <span class="string">&quot;在此输入分类 ID&quot;</span></span><br><span class="line">  <span class="attr">dataMapping</span> = <span class="string">&quot;pathname&quot;</span></span><br><span class="line">  <span class="attr">dataStrict</span> = <span class="string">&quot;0&quot;</span></span><br><span class="line">  <span class="attr">dataReactionsEnabled</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line">  <span class="attr">dataEmitMetadata</span> = <span class="string">&quot;0&quot;</span></span><br><span class="line">  <span class="attr">dataInputPosition</span> = <span class="string">&quot;top&quot;</span></span><br><span class="line">  <span class="attr">lightTheme</span> = <span class="string">&quot;light&quot;</span></span><br><span class="line">  <span class="attr">darkTheme</span> = <span class="string">&quot;dark&quot;</span></span><br><span class="line">  <span class="attr">dataLang</span> = <span class="string">&quot;zh-CN&quot;</span></span><br><span class="line">  <span class="attr">lazyLoad</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo 示例</span></span><br><span class="line"><span class="attr">giscus:</span> </span><br><span class="line">  <span class="attr">repo:</span> <span class="string">在此输入仓库</span></span><br><span class="line">  <span class="attr">repo_id:</span> <span class="string">在此输入仓库</span> <span class="string">ID</span></span><br><span class="line">  <span class="attr">category_id:</span> <span class="string">在此输入分类</span> <span class="string">ID</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">light</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">dark</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure><p>最后你就可以执行本地预览命令打开本地服务器查看评论区了。注意的是，Hugo 需要执行 <code>hugo server -e production</code> 才能看到评论区。</p><p><img src="/../images/comments/2022-10-07_024308.png" alt="Giscus"></p><h2 id="Livere"><a href="#Livere" class="headerlink" title="Livere"></a>Livere</h2><p><a href="https://livere.com/">Livere</a> 是韩国的一家第三方评论系统，支持新浪微博、QQ、微信、豆瓣、Facebook、Twitter 等国内外多家社交网站用户登录评论。由于它已经在国内备案，所以你只需要进入官网注册一个账号，就可以很容易地安装一个评论系统。</p><p>进入<a href="https://livere.com/">官网</a>注册登陆后，点击网页上方的「 安装 」，选择免费的「 City 」版本。</p><p><img src="/../images/comments/2022-10-02_232020.png" alt="City免费版"></p><p>并点击现在安装，会出现来必力的安装代码。示例如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 来必力City版安装代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;lv-container&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;city&quot;</span> <span class="attr">data-uid</span>=<span class="string">&quot;XXXXXXXXXXXXXXXX&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   (<span class="keyword">function</span>(<span class="params">d, s</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">var</span> j, e = d.<span class="title function_">getElementsByTagName</span>(s)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">LivereTower</span> === <span class="string">&#x27;function&#x27;</span>) &#123; <span class="keyword">return</span>; &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       j = d.<span class="title function_">createElement</span>(s);</span></span><br><span class="line"><span class="language-javascript">       j.<span class="property">src</span> = <span class="string">&#x27;https://cdn-city.livere.com/js/embed.dist.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">       j.<span class="property">async</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       e.<span class="property">parentNode</span>.<span class="title function_">insertBefore</span>(j, e);</span></span><br><span class="line"><span class="language-javascript">   &#125;)(<span class="variable language_">document</span>, <span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span>为正常使用来必力评论功能请激活JavaScript<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- City版安装代码已完成 --&gt;</span></span><br></pre></td></tr></table></figure><p>如果你使用的是 Hexo + Butterfly，只需要将上面的 <code>data-uid</code> 复制到主题配置文件即可。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo 示例</span></span><br><span class="line"><span class="attr">livere:</span> </span><br><span class="line">  <span class="attr">uid:</span> <span class="string">在此填入data-uid</span></span><br></pre></td></tr></table></figure><p>如果你使用的是 Hugo + DoIt，由于 DoIt 主题没有集成该评论系统，所以要自己添加，也很容易，只要将主题文件夹中的「 layouts -&gt; partials -&gt; comment.html 」复制到 Hugo 根目录同样的位置，然后在该文件中添加如下内容，注意替换 <code>data-uid</code> 的值。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;- if $comment.enable -&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;comments&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;- /* livere Comment System */ -&#125;&#125;</span><br><span class="line">    &#123;&#123;- $livere := $comment.livere | default dict -&#125;&#125;</span><br><span class="line">    &#123;&#123;- if $livere.enable -&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;lv-container&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;city&quot;</span> <span class="attr">data-uid</span>=<span class="string">&quot;XXXXXXXXXXXXXXXX&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">           (<span class="keyword">function</span>(<span class="params">d, s</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">var</span> j, e = d.<span class="title function_">getElementsByTagName</span>(s)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">LivereTower</span> === <span class="string">&#x27;function&#x27;</span>) &#123; <span class="keyword">return</span>; &#125;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">               j = d.<span class="title function_">createElement</span>(s);</span></span><br><span class="line"><span class="language-javascript">               j.<span class="property">src</span> = <span class="string">&#x27;https://cdn-city.livere.com/js/embed.dist.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">               j.<span class="property">async</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">               e.<span class="property">parentNode</span>.<span class="title function_">insertBefore</span>(j, e);</span></span><br><span class="line"><span class="language-javascript">           &#125;)(<span class="variable language_">document</span>, <span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">noscript</span>&gt;</span>为正常使用来必力评论功能请激活JavaScript<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123;- end -&#125;&#125;</span><br><span class="line">    ……</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;&#123;- end -&#125;&#125;</span><br></pre></td></tr></table></figure><p>接着打开配置文件，在评论配置添加上 Livere 即可。<code>uid</code> 就是你的来必力 City 版安装代码中的 <code>data-uid</code>，将引号内的内容复制过来即可。</p><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[params.page.comment]</span></span><br><span class="line">  <span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line">  ……</span><br><span class="line">  <span class="section">[params.page.comment.livere]</span></span><br><span class="line">    <span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line">    <span class="attr">uid</span> = <span class="string">&quot;XXXXXXXXXXXXXXXX&quot;</span></span><br></pre></td></tr></table></figure><p>最后，你就可以执行本地预览命令打开本地服务器查看评论系统了。</p><p><img src="/../images/comments/2022-10-06_223054.png" alt="来必力"></p><p>虽然来必力不支持 Markdown，且加载缓慢，但是不失为一个少数部署简单的第三方评论系统，如果你想要一个部署简单的评论系统，来必力是一个不错的选择。</p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://twikoo.js.org/">Twikoo 操作文档</a></li><li><a href="https://utteranc.es/">Utterances 操作文档</a></li><li><a href="https://giscus.app/zh-CN">Giscus 操作文档</a> </li><li><a href="https://livere.com/">Livere 操作文档</a></li><li><a href="https://tzy1997.com/articles/hexo1614/">关于Vercel被墙导致获取Twikoo评论失败的解决方案</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Hugo </tag>
            
            <tag> 评论系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名太长？三步搞定 GitHub Pages 自定义域名</title>
      <link href="/domain-name/"/>
      <url>/domain-name/</url>
      
        <content type="html"><![CDATA[<p>GitHub Pages 是直接从 GitHub 存储库托管的静态站点。 当你使用 Hexo 或 Hugo 等静态博客生成器生成静态网站文件，并部署到 GitHub 仓库时，你将获得域名后缀为 <code>.github.io</code> 的网址。</p><p>GitHub 支持自定义域名，你可以设置一个具有自己风格的域名，让你的网站更有辨识度。域名是由一串用点分隔的名字组成的 Internet 上某一台计算机或计算机组的名称，如我们常见的 <code>.com</code>、<code>.cn</code> 等。简单来说，域名就好像门牌号码一样，具有唯一性，可以在纷繁芜杂的网络世界里准确无误地把我们指引到我们要访问的站点。</p><p><img src="/../images/domain-name/image-20221110005301669.png" alt="域名"></p><p>根据国家工信部信息服务管理规定，在国内服务器上放置的所有网站都必须备案才能正常访问，但是对于国外的服务器或者港澳台的服务器，如本文提到的 GitHub 服务器，就不需要备案。下面的操作以 GitHub 服务器为例。</p><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>域名是由域名管理局统一管理的，管理是需要成本的，如技术成本、人力成本等，所以你想拥有一个具有自己风格的域名，就需要前往<a href="https://www.aliyun.com/">阿里云</a>或<a href="https://buy.cloud.tencent.com/domain?from=console">腾讯云</a>等服务商购买。下面的操作以阿里云为例。</p><p>如果你有支付宝账号，注册账号的时候直接用支付宝扫描登录，还可以顺带连着实名注册一起弄了。如果你没有支付宝账号，就按照账号注册流程一步步操作即可。</p><p>首次购买域名有优惠活动，1 元就能购买一个为期一年的域名。注册前先去阿里云旗下的<a href="https://wanwang.aliyun.com/?spm=5176.21213303.1158081.3.4f4553c927XLDo&scm=20140722.S_card@@%E5%95%86%E5%93%81@@212429.S_card0.ID_card@@%E5%95%86%E5%93%81@@212429-RL_%E5%9F%9F%E5%90%8D-OR_ser-V_2-P0_0">万网</a>查询域名，看看想要注册的域名有没有被注册，根据自己的需求选择自己喜欢的后缀，点击购买。如果你的域名要长期使用，建议可以先看看<a href="https://wanwang.aliyun.com/help/price.html?spm=5176.22941859.J_9989412330.9.10ee1838DLcc7f">不同域名的续费价格</a>再选择。</p><p>需要注意的是，阿里云从 2022 年 2 月 15 日起域名注册必须使用已完成实名认证信息模板，点击 <code>创建信息模板</code> 完成操作，其实就是域名的实名认证，实名审核由域名注册局完成，非阿里云进行审核，一般 1 天内可完成审核，部分可能需要 3 至 5 个工作日。</p><p><img src="/../images/domain-name/2022-10-07_223523.png" alt="创建信息模板"></p><p>完成审核并购买域名后，进入域名控制台。等待几分钟后刷新，当看到状态变成正常，就可以开始域名解析了，这中间域名注册局会对域名持有者进行实名认证，一般几分钟就可以了。</p><p><img src="/../images/domain-name/2022-10-08_161653.png" alt="购买域名"></p><h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h2><p>域名解析是将域指向网站空间 IP，让人们通过注册的域名可以方便地访问到网站的一种服务。简单来说，这是一个将你的网站服务器（GitHub）与域名连接起来的过程。</p><p>打开阿里云的域名控制台，点击「 解析 」，进入云解析 DNS 页面，点击「 添加记录 」，如下图添加两条记录，其中 <code>CNAME</code> 为了是将 <code>github.io</code> 重定向到你的自定义域名，添加 <code>@</code> 和 <code>www</code> 主机记录是为了让你的域名有没有 <code>www</code> 都可以访问，记录值为 <code>用户名.github.io</code>。</p><p><img src="/../images/domain-name/2022-10-08_194232.png" alt="域名解析"></p><p>此时，还不能使用自定义域名访问网站，还需要将它与 GitHub 仓库连接。</p><h2 id="配置仓库"><a href="#配置仓库" class="headerlink" title="配置仓库"></a>配置仓库</h2><p>GitHub 自定义域名需要在仓库内创建「 CNAME 」，你既可以在仓库直接创建，也可以在本地 Hexo 或 Hugo 根目录中创建。无论是哪种方式，在「 CNAME 」中的域名都不要添加 <code>www</code>。</p><p>如果你直接在仓库内创建，要注意同步本地和远程仓库。前往仓库的「 Settings -&gt; Pages 」，拉到「 Custom domain 」，在这里输入你的自定义域名，或者在仓库的「 Code 」处点击 <code>Add file</code> 创建「 CNAME 」，并在里面输入你的自定义域名。</p><p><img src="/../images/domain-name/2022-10-08_163353.png" alt="创建CNAME"></p><p>等待几分钟之后，刷新页面，出现 <code>DNS check successful</code> 则表示域名解析成功，同时勾选下面的 <code>Enforce HTTPS</code>，这是因为 HTTPS 提供了一层加密，以防止别人窥探或篡改到你的网站流量。您可对 GitHub Pages 站点强制实施 HTTPS，从而将所有 HTTP 请求透明地重定向到 HTTPS。</p><p><img src="/../images/domain-name/2022-10-08_194945.png" alt="DNS"></p><p>如果你在本地创建，也有两种情况。如果你只将「 Public 」的静态网站文件托管到 GitHub 仓库，那么你只需要将「 CNAME 」放在 Hexo 或 Hugo 根目录，每次执行部署命令之前，将该文件复制到「 Public 」中，然后托管到仓库即可。</p><p>如果你按照 <a href="https://zyuyu.top/github-actions">只专注写作！GitHub Actions 自动部署博客</a>的步骤将整个网站源代码都托管到了 GitHub 仓库，就需要将「 CNAME 」放到 Hexo 或 Hugo 的资源文件夹中，Hexo 对应的是 <code>/source/CNAME</code>，Hugo 对应的是 <code>/content/CNAME</code>，托管到仓库之后 GitHub Actions 就会自动完成 DNS 的过程。</p><p>最后，你就可以使用自定义域名访问你的博客啦！撒花撒花 ✿✿ヽ(°▽°)ノ✿~~</p><p>💡 TIP：记得同步修改 Hexo 或 Hugo 配置文件的 <code>url</code> 或 <code>baseURL</code>。</p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://wanwang.aliyun.com/help/price.html?spm=5176.22941859.J_9989412330.9.10ee1838DLcc7f">万网域名价格总览</a></li><li><a href="https://docs.github.com/cn/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site">GitHub Pages 文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Hugo </tag>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适合小白！基于 Hexo + Butterfly 搭建个人博客</title>
      <link href="/hexo-build/"/>
      <url>/hexo-build/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>在开始之前，你可以阅读「 <a href="http://zyuyu.top/blog-build/">非程序猿的我，为什么要搭建自己的个人博客？</a> 」了解静态博客与动态博客、Hexo 与 Hugo 的区别。下面说明一下我的构建环境：</p><table><thead><tr><th align="center"></th><th align="center">构建环境</th></tr></thead><tbody><tr><td align="center">操作系统</td><td align="center">Windows10 64bit</td></tr><tr><td align="center">Git 版本</td><td align="center">2.37.2</td></tr><tr><td align="center">Node 版本</td><td align="center">16.17.0</td></tr><tr><td align="center">Hexo 版本</td><td align="center">6.3.0</td></tr><tr><td align="center">Butterfly 版本</td><td align="center">4.5.1</td></tr></tbody></table><p>如果你在下面的操作过程中遇到困难，欢迎在评论区留言交流！</p><h2 id="Step1-安装工具"><a href="#Step1-安装工具" class="headerlink" title="Step1  安装工具"></a>Step1  安装工具</h2><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><input checked="" disabled="" type="checkbox"> Git：<a href="https://git-scm.com/">官网</a>，<a href="https://npm.taobao.org/mirrors/git-for-windows/v2.22.0.windows.1/Git-2.22.0-64-bit.exe">国内镜像</a>，<a href="https://npm.taobao.org/mirrors/git-for-windows/">其他版本</a></li><li><input checked="" disabled="" type="checkbox"> Node.js：<a href="http://nodejs.cn/download/">官网</a></li></ul><p>简单来说，Git 是一个版本管理控制系统，可以记录代码修改的每一个环节，就好比我们玩游戏存档。Node.js 是一种以 JavaScript 语言为核心开发的服务器技术，就好像我们的大脑一样，接收、处理并传递网页信息。</p><p>所有必备的应用程序安装完成后，即可使用 <code>npm</code> 安装 Hexo，在桌面右键单击 <code>Git Bash Here</code>，并在 <code>Bash</code> 页面内执行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="Step2-创建网站"><a href="#Step2-创建网站" class="headerlink" title="Step2  创建网站"></a>Step2  创建网站</h2><p>安装 Hexo 完成后，请在 <code>Bash</code> 页面内继续执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><p><img src="/../images/hexo-build/1fcBK1u6dD.png" alt="hexo"></p><p>由于 Hexo 安装的时候，默认配有一个 <code>landscape</code> 主题，所以此时你就可以执行以下命令，通过 <a href="http://localhost:4000/">http://localhost:4000</a> 访问你的网站了，当然此时你只能在你的电脑访问，别人是看不见的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="Step3-更换主题"><a href="#Step3-更换主题" class="headerlink" title="Step3  更换主题"></a>Step3  更换主题</h2><p>主题是网页的设计，就像我们穿衣服一样，你也可以前往 <a href="https://hexo.io/themes/">Hexo 主题网站</a>选择你喜欢的主题，为你的网站打扮打扮。下面以 <a href="https://butterfly.js.org/">Butterfly</a> 主题进行操作，在 <code>Bash</code> 页面继续执行以下命令，Hexo 将会在 <code>themes</code> 文件夹中新建 <code>butterfly</code> 文件夹。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>新建完成后，<code>Butterfly</code> 文件夹的目录如下：</p><p><img src="/../images/hexo-build/3LUQUxfUVx.png" alt="butterfly"></p><p>由于 Hexo 的特性，配置网站需要同时修改 Hexo 根目录和主题目录中的 <code>_config.yml</code> 文件，所以为了进行区分，你可以将主题目录的配置文件复制并重命名为 <code>_config.butterfly.yml</code> ，然后粘贴到 Hexo 根目录中，注意不要覆盖或删掉原来的 Hexo 配置文件。如此一来，既方便管理配置文件，也便于主题的更新。</p><p><img src="/../images/hexo-build/drjSLSJC2U.png" alt="配置文件"></p><p>配置网站相当于开启和关闭功能，就好像我们平时使用的 APP，里面有很多功能，但并不是所有的功能你都需要，你可以结合自己的需求有选择地在主页面开启和隐藏某些功能。</p><p>关于 Hexo 配置文件 <code>_config.yml</code>，你可以阅读 <a href="https://hexo.io/zh-cn/docs/configuration">Hexo 配置文档</a>设置自己的网站参数（功能），同时要记得设置 <code>theme: butterfly</code>，否则 Butterfly 的主题将不会得到应用。</p><p>关于主题配置文件 <code>_config.butterfly.yml</code>，你可以阅读 <a href="https://butterfly.js.org/">Butterfly 配置文档</a>设置自己的网站参数（功能）。</p><p>☕☕☕ 修改配置文件后，你就可以执行以下命令，通过 <a href="http://localhost:4000/">http://localhost:4000</a> 访问你的网站了，当然此时你只能在你的电脑访问，别人是看不见的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>如果你想要对 Butterfly “ 魔改 ”，推荐阅读由 <a href="https://blog.zhheo.com/">@张洪HEO</a> 建立的 <a href="https://butterfly.zhheo.com/">Butterfly 主题美化教程</a>，里面收录了很多大神魔改 Butterfly 主题的教程。</p><h2 id="Step4-发表文章"><a href="#Step4-发表文章" class="headerlink" title="Step4  发表文章"></a>Step4  发表文章</h2><p>在发表文章之前，我们需要了解一下<code>Front matter</code> ，它最直观的体现为 Markdown 文件最上方以 <code>---</code> 分隔的区域，用于指定网页页面的属性（变量），如标题、发布时间、分类、标签等。</p><p>你可以选取所需要的参数，对 <code>Front matter</code>进行修改，这样当我们创建页面的时候，就不需要逐一增设参数，而只需填写变量内容即可。</p><p><img src="/../images/hexo-build/image-20221112224627797.png" alt="前置参数"></p><p>打开 Hugo 根目录下的  <code>...\archetypes\post.md</code>，结合自己的需求修改内容，以下是 Butterfly 主题的 <code>Front Matter</code>，提供给大家参考：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span></span><br><span class="line"><span class="attr">date:</span></span><br><span class="line"><span class="attr">updated:</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="attr">top_img:</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line"><span class="attr">cover:</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line"><span class="attr">toc_number:</span></span><br><span class="line"><span class="attr">toc_style_simple:</span></span><br><span class="line"><span class="attr">copyright:</span></span><br><span class="line"><span class="attr">copyright_author:</span></span><br><span class="line"><span class="attr">copyright_author_href:</span></span><br><span class="line"><span class="attr">copyright_url:</span></span><br><span class="line"><span class="attr">copyright_info:</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line"><span class="attr">katex:</span></span><br><span class="line"><span class="attr">aplayer:</span></span><br><span class="line"><span class="attr">highlight_shrink:</span></span><br><span class="line"><span class="attr">aside:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>然后就可以开始发布文章啦，在 Hugo 根目录右键单击 <code>Git Bash Here</code> ，依次执行以下命令，请注意将 <code>title</code> 修改为你的标题，最好是英文。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post &quot;title&quot;</span><br></pre></td></tr></table></figure><p>关于文章的图片，请自行阅读 <a href="https://hexo.io/zh-cn/docs/asset-folders">Hexo 资源文件夹文档</a>，选择适合自己的存储方式，引用图片的相对路径，或者利用 <a href="https://typoraio.cn/">Typora</a> + <a href="https://github.com/Molunerfinn/PicGo">PicGo</a> + 图床实现自动上传，并在文章内引用图片的绝对路径。</p><h2 id="Step5-生成网页"><a href="#Step5-生成网页" class="headerlink" title="Step5  生成网页"></a>Step5  生成网页</h2><p>静态网站是指全部由 HTML（标准通用标记语言的子集）代码格式页面组成的网站，所有的内容包含在网页文件中，一般文件名均以 htm、html、shtml 等为后缀。</p><p>所以在部署网站之前，我们需要生成 HTML 静态文件，然后再将生成的「 Public 」静态文件上传到服务器，这样网页才能被别人访问。</p><p>在 Hexo 根目录，右键单击 <code>Git Bash Here</code> ，依次执行以下命令构建网站。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p><code>hexo clean</code> 用于清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。在某些情况（尤其是更换主题后），如果发现你对站点的更改无论如何也不生效，你可能需要运行该命令。</p><h2 id="Step6-部署博客"><a href="#Step6-部署博客" class="headerlink" title="Step6  部署博客"></a>Step6  部署博客</h2><p>搭建网站往往需要服务器，服务器相当于网站的家，网站一般都需要服务器来运行，阿里云、腾讯云、华为云等是国内比较知名的服务器提供商。</p><p>但是，购买一台服务器，不仅涉及到服务器本身的价格，还涉及到流量费用（类似手机流量），这对于初建站且不知道是否长期使用的人来说，无疑是一笔比较昂贵的支出。</p><p><a href="https://github.com/">GitHub</a> 是一个免费托管开源代码的 Git 服务器，如果你不想付费购买服务器，可以将你的网站托管到 GitHub 代码托管平台。</p><p>此部分请阅读「 <a href="http://zyuyu.top/github/">只专注写作！GitHub Actions 自动部署博客</a> 」进行操作。</p><h2 id="标签插件"><a href="#标签插件" class="headerlink" title="标签插件"></a>标签插件</h2><p>Markdown 的内容格式虽然简单，但是有时它也不尽如人意，在很多方面都无法很好地支持，这时内容编辑者就需要使用纯 HTML 来扩展可能性，这与 Markdown 语法的优美简洁相矛盾。</p><p>为了尽可能避免使用 HTML 以保持内容简洁，Hexo 创建了 Tag Plugins 来规避这些限制。标签插件（Tag Plugins）是 Hexo 独有的插件，用于在文章中快速插入特定的内容，一般呈现为以下三种样式：</p><ul><li><code>&#123;%&nbsp;标签名称 标签参数&nbsp;%&#125;</code></li><li><code>&#123;%&nbsp;标签名称 标签参数&nbsp;%&#125;</code>content<code>&#123;%&nbsp;end标签名称&nbsp;%&#125;</code></li><li><code>&#123;%&nbsp;标签名称 标签参数&nbsp;%&#125;</code>／<code>&lt;!-- 标签名称 标签参数 --&gt;</code>content<code>&lt;!-- end标签名称 --&gt;</code>／<code>&#123;%&nbsp;end标签名称&nbsp;%&#125;</code></li></ul><p>通常无需记忆具体的语法，只要知道每个参数所代表的意义即可，你可以借助<a href="https://shurufa.sogou.com/?r=mac&t=pinyin">搜狗拼音输入法</a>的自定义短语功能，将预设好参数的标签插件添加新短语，从而通过缩写实现快捷输入。</p><p><img src="/../images/hexo-build/LqA5LsZB4p.png" alt="自定义短语"></p><p><img src="/../images/hexo-build/rto0sMWz5l.png" alt="添加新短语"></p><h3 id="内置标签"><a href="#内置标签" class="headerlink" title="内置标签"></a>内置标签</h3><p>下面是 Hexo 支持使用的 Tag Plugins，<code>[ ]</code>内的参数为该标签可以自定义的参数。下表是我为了方便使用而整理的简表，更加详细具体的使用方法请阅读 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html">Hexo 标签外挂文档</a>。</p><table><thead><tr><th align="center">作用</th><th>语法</th></tr></thead><tbody><tr><td align="center">引用</td><td>1️⃣ 引言：<br><code>&#123;%&nbsp;blockquote [author[, source]] [link] [source_link_title]&nbsp;%&#125;</code><br><code>&#123;%&nbsp;endblockquote&nbsp;%&#125;</code><br>2️⃣ 引文：<br><code>&#123;%&nbsp;pullquote [class]&nbsp;%&#125;</code> <br/><code>&#123;%&nbsp;endpullquote&nbsp;%&#125;</code><br/>3️⃣ 引用文章：<br><code>&#123;%&nbsp;post_path filename&nbsp;%&#125;</code> <br><code>&#123;%&nbsp;post_link filename [title] [escape]&nbsp;%&#125;</code><br>4️⃣ 引用文章资源：<br><code>&#123;%&nbsp;asset_path filename&nbsp;%&#125;</code> <br><code>&#123;%&nbsp;asset_img [class names] slug [width] [height] [title text [alt text]]&nbsp;%&#125;</code> <br><code>&#123;%&nbsp;asset_link filename [title] [escape]&nbsp;%&#125;</code></td></tr><tr><td align="center">代码</td><td>1️⃣ 代码块：<br><code>&#123;%&nbsp;codeblock [title] [lang:language] [url] [link text] [additional options]&nbsp;%&#125;</code> <br><code>&#123;%&nbsp;endcodeblock&nbsp;%&#125;</code><br>2️⃣ 反引号代码块：在文本前后添加三个反引号（<code>`</code>）<br>3️⃣ 代码文件：<code>&#123;%&nbsp;include_code [title] [lang:language] [from:line] [to:line] path/to/file&nbsp;%&#125;</code></td></tr><tr><td align="center">图片</td><td><code>&#123;%&nbsp;link text url [external] [title]&nbsp;%&#125;</code></td></tr><tr><td align="center">链接</td><td>指定大小：<code>&#123;%&nbsp;img [class names] /path/to/image [width] [height] '"title text" "alt text"'&nbsp;%&#125;</code></td></tr><tr><td align="center">视频</td><td>1️⃣ YouTube：<code>&#123;%&nbsp;youtube video_id [type] [cookie]&nbsp;%&#125;</code><br>2️⃣ Vimeo：<code>&#123;%&nbsp;vimeo video_id&nbsp;%&#125;</code></td></tr><tr><td align="center">框架</td><td><code>&#123;%&nbsp;iframe url [width] [height]&nbsp;%&#125;</code></td></tr><tr><td align="center">jsFiddle</td><td><code>&#123;%&nbsp;jsfiddle shorttag [tabs] [skin] [width] [height]&nbsp;%&#125;</code></td></tr><tr><td align="center">Gist</td><td><code>&#123;%&nbsp;gist gist_id [filename]&nbsp;%&#125;</code></td></tr><tr><td align="center">Swig 标签</td><td><code>&#123;%&nbsp;raw&nbsp;%&#125;</code><br><code>&#123;%&nbsp;endraw&nbsp;%&#125;</code></td></tr><tr><td align="center">文章摘要和截断</td><td><code>&lt;!-- more --&gt;</code>之前的文字将会被视为摘要，首页和文章内均可看到这段文字。</td></tr></tbody></table><h3 id="主题标签"><a href="#主题标签" class="headerlink" title="主题标签"></a>主题标签</h3><p>下面是 Butterfly 主题支持使用的 Tag Plugins，部分标签插件使用前需要在主题配置文件开启功能，<code>[ ]</code>内的参数为该标签可以自定义的参数。下表是我为了方便使用而整理的简表，更加详细具体的使用方法请阅读 <a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Hexo－Butterfly 标签外挂文档</a>。</p><table><thead><tr><th align="center">作用</th><th>语法</th></tr></thead><tbody><tr><td align="center">提示横幅</td><td>使用前需在主题配置文件开启功能，默认以主题配置为准。<br><code>&#123;%&nbsp;note [class] [no-icon] [style]&nbsp;%&#125;</code><br/><code>&#123;%&nbsp;endnote&nbsp;%&#125;</code></td></tr><tr><td align="center">相册图库</td><td>1️⃣ 图库组合：<br><code>&lt;div class=&quot;gallery-group-main&quot;&gt;</code><br/><code>&#123;%&nbsp;galleryGroup [name] [description] [link] [img-url]&nbsp;%&#125;</code><br/><code>&#123;%&nbsp;galleryGroup [name] [description] [link] [img-url]&nbsp;%&#125;</code><br/><code>&lt;/div&gt;</code><br>2️⃣ 单页多图：<br><code>&#123;%&nbsp;gallery&nbsp;%&#125;</code><br/><code>![图片描述](图片链接)</code><br/><code>![图片描述](图片链接)</code><br/><code>&#123;%&nbsp;endgallery&nbsp;%&#125;</code></td></tr><tr><td align="center">隐藏内容</td><td>1️⃣ 行内隐藏：<br><code>&#123;%&nbsp;hideInline [content],[display],[bg],[color]&nbsp;%&#125;</code><br>2️⃣ 段落隐藏：<br><code>&#123;%&nbsp;hideBlock [display],[bg],[color]&nbsp;%&#125;</code><br/><code>&#123;%&nbsp;endhideBlock&nbsp;%&#125;</code><br>3️⃣ 折叠隐藏：<br><code>&#123;%&nbsp;hideToggle [display],[bg],[color]&nbsp;%&#125;</code><br/><code>&#123;%&nbsp;endhideToggle&nbsp;%&#125;</code></td></tr><tr><td align="center">图表标签</td><td>使用前需在主题配置文件开启功能，具体内容参考<a href="https://mermaid-js.github.io/mermaid/#/">mermaid</a>。<br><code>&#123;%&nbsp;mermaid&nbsp;%&#125;</code><br/><code>&#123;%&nbsp;endmermaid&nbsp;%&#125;</code></td></tr><tr><td align="center">索引菜单</td><td><code>&#123;%&nbsp;tabs [Unique-name], [index]&nbsp;%&#125;</code><br/><code>&lt;!-- tab [Tab caption] [icon] --&gt;</code><br/><code>&lt;!-- endtab --&gt;</code><br/><code>&#123;%&nbsp;endtabs&nbsp;%&#125;</code></td></tr><tr><td align="center">按钮链接</td><td><code>&#123;%&nbsp;btn [url],[text],[icon],[color] [style] [layout] [position] [size]&nbsp;%&#125;</code></td></tr><tr><td align="center">行内图片</td><td><code>&#123;%&nbsp;inlineImg [src] [height]&nbsp;%&#125;</code></td></tr><tr><td align="center">文本高亮</td><td><code>&#123;%&nbsp;label [text] [color]&nbsp;%&#125;</code></td></tr><tr><td align="center">时间线</td><td><code>&#123;%&nbsp;timeline [title],[color]&nbsp;%&#125;</code><br/><code>&lt;!-- timeline [title] --&gt;</code><br/><code>&lt;!-- endtimeline --&gt;</code><br/><code>&lt;!-- timeline [title] --&gt;</code><br/><code>&lt;!-- endtimeline --&gt;</code><br/><code>&#123;%&nbsp;endtimeline&nbsp;%&#125;</code></td></tr><tr><td align="center">友情链接</td><td><code>&#123;%&nbsp;flink&nbsp;%&#125;</code><br/>与友链页面一样，支持 <code>yml</code> 格式<br><code>&#123;%&nbsp;endflink&nbsp;%&#125;</code></td></tr></tbody></table><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://hexo.io/zh-cn/docs/">Hexo 使用文档</a></li><li><a href="https://butterfly.js.org/">Hexo-Butterfly 使用文档</a></li><li><a href="https://hexo.io/zh-cn/docs/tag-plugins.html">Hexo 标签插件（Tag Plugins）</a></li><li><a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Hexo－Butterfly 标签外挂文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单易上手！基于 Hugo + DoIt 搭建个人博客</title>
      <link href="/hugo-build/"/>
      <url>/hugo-build/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://gohugo.io/">Hugo</a> 是 Go 编写的静态网站生成器，速度快，易用，可配置，只需要几分之一秒就可以渲染一个经典的中型网站，非常适合博客，文档等网站的生成。</p></blockquote><p>在开始之前，你可以阅读「 <a href="http://zyuyu.top/blog-build/">非程序猿的我，为什么要搭建自己的个人博客？</a> 」了解静态博客与动态博客、Hexo 与 Hugo 的区别。下面说明一下我的构建环境：</p><table><thead><tr><th align="center"></th><th align="center">构建环境</th></tr></thead><tbody><tr><td align="center">操作系统</td><td align="center">Windows10 64bit</td></tr><tr><td align="center">Git 版本</td><td align="center">2.37.2</td></tr><tr><td align="center">Hugo extended 版本</td><td align="center">104.3.0</td></tr><tr><td align="center">DoIt 版本</td><td align="center">0.2.13</td></tr></tbody></table><p>最终的效果：<a href="https://zyuyu.top/blog/">张小鱼的储物间</a>（仅做展示使用）</p><h2 id="Step1-安装工具"><a href="#Step1-安装工具" class="headerlink" title="Step1  安装工具"></a>Step1  安装工具</h2><p>在开始搭建网站之前，建议安装 <a href="https://git-scm.com/">Git 工具</a>，它是一个版本管理控制系统软件，可以记录代码修改的每一个环节，就好比我们玩游戏存档。如果你打不开前面的链接，你还可以下载<a href="https://npm.taobao.org/mirrors/git-for-windows/v2.22.0.windows.1/Git-2.22.0-64-bit.exe">国内镜像</a>版本。</p><p>Hugo 的安装非常简单，只需要前往 <a href="https://github.com/gohugoio/hugo/releases">Hugo Releases</a> 下载你所使用的操作系统的最新版本的二进制文件即可，推荐下载 <code>Hugo Extended</code> 版本，因为部分主题的一些特性需要将 SCSS 转换为 CSS，使用该版本将获得更好的体验。下面的操作步骤以 Windows 10 64bit 为例。</p><p><img src="/../images/hugo-build/hugo.png" alt="下载hugo"></p><p>接着新建一个「 hugo 」文件夹，在它下面再新建「 bin 」文件夹，然后将下载的文件解压到新建的「 bin 」文件夹中。</p><p><img src="/../images/hugo-build/bin.png" alt="新建bin文件夹"></p><p>同时还要将 Hugo 添加到环境变量中，如果缺少这一步，Hugo 将无法运行。</p><p><img src="/../images/hugo-build/path.png" alt="环境变量"></p><p><img src="/../images/hugo-build/path2.png" alt="编辑环境变量"></p><blockquote><p>环境变量位于右键单击「 我的电脑 -&gt; 属性 -&gt; 高级 -&gt; 环境变量 」，或者按住 <code>win+R</code> 进入设置，选择「 系统 -&gt; 关于 -&gt; 高级系统设置 -&gt; 高级  -&gt; 环境变量 」。</p></blockquote><p>最后，你可以按住 <code>win+R</code>，输入 <code>cmd</code> ，进入命令提示符页面，执行 <code>hugo version</code> 即可验证是否成功。如果出现版本号，说明环境变量配置成功。</p><h2 id="Step2-创建网站"><a href="#Step2-创建网站" class="headerlink" title="Step2  创建网站"></a>Step2  创建网站</h2><p>前一步完成后，我们打开刚刚新建的「 Hugo 」文件夹，然后在空白处右键单击 <code>Git Bash Here</code> ，并执行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hugo new site blog</span><br></pre></td></tr></table></figure><p><img src="/../images/hugo-build/new.png" alt="new"></p><p>以上命令将会创建一个名为「 blog 」的文件夹，该文件夹存储着你的博客站点数据，你可以将 blog 改为其它单词，创建属于自己的站点，这也是 Hugo 的根目录。</p><h2 id="Step3-配置主题"><a href="#Step3-配置主题" class="headerlink" title="Step3  配置主题"></a>Step3  配置主题</h2><p>主题是网页的设计，就像我们穿衣服一样，你需要给你的博客打扮打扮，你可以前往 <a href="https://themes.gohugo.io/">Hugo 主题网站</a>选择你喜欢的主题。下面以 <a href="https://hugodoit.pages.dev/zh-cn/">DoIt</a> 主题进行说明。</p><p>在 Hugo 根目录，右键单击 <code>Git Bash Here</code> ，依次执行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git submodule add https://github.com/HEIGE-PCloud/DoIt.git themes/DoIt</span><br></pre></td></tr></table></figure><p>☕☕☕ 等待几分钟，主题就安装完成啦~ (～￣▽￣)～ </p><p>接着将 <code>...\themes\DoIt\exampleSite</code>内的 <code>config.toml</code> 复制到 Hugo 根目录，覆盖掉原先的 <code>config.toml</code>，并打开复制后的文件，将 <code>themesDir = &quot;../..&quot;</code> 更改为 <code>themesDir = &quot;themes&quot;</code>。</p><p>然后在 Hugo 根目录，右键单击 <code>Git Bash Here</code> ，执行以下任一命令，就可以进入<a href="http://localhost:1313/">本地服务器</a>预览你的网页了，当然此时你只能在你的电脑访问，别人是看不见的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hugo server               <span class="comment"># 本地预览命令</span></span><br><span class="line">hugo server -D            <span class="comment"># 支持预览草稿的本地预览命令</span></span><br><span class="line">hugo serve -e production  <span class="comment"># 支持启用评论系统和CDN等的本地预览命令</span></span><br></pre></td></tr></table></figure><p>由于 Hugo 支持实时预览修改，即可以一边主题配置文件，一边在网页预览效果，所以你可以开启本地预览命令，参照 <a href="https://hugodoit.pages.dev/zh-cn/theme-documentation-basics/">DoIt 主题使用文档</a>配置你自己的网页。</p><p>配置主题相当于开启和关闭功能，就好像我们日常使用的 APP，里面有很多功能，但并不是所有的功能你都需要，你可以结合自己的需求有选择地在主页面开启和隐藏某些功能，你只要打开刚刚复制的 <code>config.toml</code>修改即可。</p><h2 id="Step4-发表文章"><a href="#Step4-发表文章" class="headerlink" title="Step4  发表文章"></a>Step4  发表文章</h2><p>在发表文章之前，我们需要了解一下<code>Front matter</code> ，它最直观的体现为 Markdown 文件最上方以 <code>---</code> 分隔的区域，用于指定网页页面的属性（变量），如标题、发布时间、分类、标签等。</p><p>你可以选取所需要的参数，对 <code>Front matter</code>进行修改，这样当我们创建页面的时候，就不需要逐一增设参数，而只需填写变量内容即可。</p><p><img src="/../images/hugo-build/image-20221107011312929.png" alt="前置参数"></p><p>打开 Hugo 根目录下的  <code>...\archetypes\default.md</code>，结合自己的需求修改内容，以下是 DoIt 主题的 <code>Front Matter</code>，提供给大家参考：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &quot;我的第一篇文章&quot;</span><br><span class="line">subtitle: &quot;&quot;</span><br><span class="line">date: 2020-03-04T15:58:26+08:00</span><br><span class="line">lastmod: 2020-03-04T15:58:26+08:00</span><br><span class="line">draft: true</span><br><span class="line">authors: []</span><br><span class="line">description: &quot;&quot;</span><br><span class="line">license: &quot;&quot;</span><br><span class="line">images: []</span><br><span class="line"></span><br><span class="line">tags: []</span><br><span class="line">categories: []</span><br><span class="line">series: []</span><br><span class="line">series<span class="emphasis">_weight: 1</span></span><br><span class="line"><span class="emphasis">seriesNavigation: true</span></span><br><span class="line"><span class="emphasis">featuredImage: &quot;&quot;</span></span><br><span class="line"><span class="emphasis">featuredImagePreview: &quot;&quot;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">hiddenFromHomePage: false</span></span><br><span class="line"><span class="emphasis">hiddenFromSearch: false</span></span><br><span class="line"><span class="emphasis">twemoji: false</span></span><br><span class="line"><span class="emphasis">lightgallery: true</span></span><br><span class="line"><span class="emphasis">ruby: true</span></span><br><span class="line"><span class="emphasis">fraction: true</span></span><br><span class="line"><span class="emphasis">fontawesome: true</span></span><br><span class="line"><span class="emphasis">linkToMarkdown: true</span></span><br><span class="line"><span class="emphasis">linkToSource: false</span></span><br><span class="line"><span class="emphasis">linkToEdit: false</span></span><br><span class="line"><span class="emphasis">linkToReport: false</span></span><br><span class="line"><span class="emphasis">rssFullText: false</span></span><br><span class="line"><span class="emphasis">license: &#x27;&#x27;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">  enable: true</span></span><br><span class="line"><span class="emphasis">  auto: true</span></span><br><span class="line"><span class="emphasis">code:</span></span><br><span class="line"><span class="emphasis">  copy: true</span></span><br><span class="line"><span class="emphasis">  # ...</span></span><br><span class="line"><span class="emphasis">table:</span></span><br><span class="line"><span class="emphasis">  sort: true</span></span><br><span class="line"><span class="emphasis">  # ...</span></span><br><span class="line"><span class="emphasis">math:</span></span><br><span class="line"><span class="emphasis">  enable: true</span></span><br><span class="line"><span class="emphasis">  # ...</span></span><br><span class="line"><span class="emphasis">mapbox:</span></span><br><span class="line"><span class="emphasis">  accessToken: &quot;&quot;</span></span><br><span class="line"><span class="emphasis">  # ...</span></span><br><span class="line"><span class="emphasis">share:</span></span><br><span class="line"><span class="emphasis">  enable: true</span></span><br><span class="line"><span class="emphasis">  # ...</span></span><br><span class="line"><span class="emphasis">comment:</span></span><br><span class="line"><span class="emphasis">  enable: true</span></span><br><span class="line"><span class="emphasis">  # ...</span></span><br><span class="line"><span class="emphasis">library:</span></span><br><span class="line"><span class="emphasis">  css:</span></span><br><span class="line"><span class="emphasis">    # someCSS = &quot;some.css&quot;</span></span><br><span class="line"><span class="emphasis">    # 位于 &quot;assets/&quot;</span></span><br><span class="line"><span class="emphasis">    # 或者</span></span><br><span class="line"><span class="emphasis">    # someCSS = &quot;https://cdn.example.com/some.css&quot;</span></span><br><span class="line"><span class="emphasis">  js:</span></span><br><span class="line"><span class="emphasis">    # someJS = &quot;some.js&quot;</span></span><br><span class="line"><span class="emphasis">    # 位于 &quot;assets/&quot;</span></span><br><span class="line"><span class="emphasis">    # 或者</span></span><br><span class="line"><span class="emphasis">    # someJS = &quot;https://cdn.example.com/some.js&quot;</span></span><br><span class="line"><span class="emphasis">seo:</span></span><br><span class="line"><span class="emphasis">  images: []</span></span><br><span class="line"><span class="emphasis">  # ...</span></span><br><span class="line"><span class="emphasis">outdatedArticleReminder:</span></span><br><span class="line"><span class="emphasis">  enable: false</span></span><br><span class="line"><span class="emphasis">  # ...</span></span><br><span class="line"><span class="emphasis">sponsor:</span></span><br><span class="line"><span class="emphasis">  enable: false</span></span><br><span class="line"><span class="emphasis">  # ...</span></span><br><span class="line"><span class="emphasis">related:</span></span><br><span class="line"><span class="emphasis">  enable: false</span></span><br><span class="line"><span class="emphasis">  count: 5</span></span><br><span class="line"><span class="emphasis">---</span></span><br></pre></td></tr></table></figure><p>然后就可以开始发布文章啦，在 Hugo 根目录右键单击 <code>Git Bash Here</code> ，依次执行以下任一命令，请注意将 <code>first</code> 修改为你的标题，最好是英文。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hugo new posts/first/index.md</span><br><span class="line">hugo new posts/first.md</span><br></pre></td></tr></table></figure><p><code>hugo new posts/first/index.md</code> 用于创建页面资源包，你可以将图片直接放在里面，然后在文章内引用图片的相对路径即可，如 <code>![](image.jpg)</code>。</p><p><code>hugo new posts/first.md</code> 是创建文章页面的普通命令，你可以在「 assets 」或「 static 」文件夹创建一个专门用于存储图片的「 image 」文件夹，引用其相对路径，如 <code>![](/image/image.jpg)</code>。</p><p>关于图片资源，你还可以利用 <a href="https://typoraio.cn/">Typora</a> + <a href="https://github.com/Molunerfinn/PicGo">PicGo</a> + 图床实现自动上传，或者利用 <a href="https://typoraio.cn/">Typora</a> 自动复制图片到 Hugo 站点指定位置，然后在文章内会自动引用图片的绝对路径或相对路径。</p><p>需要注意的是，Hugo 中使用图片的命名必须取英文字符，如 <code>pic.png</code>，如果命名为中文字符或有空格，图片将无法正常显示，如<code>图片.png</code>。</p><h2 id="Step5-生成网页"><a href="#Step5-生成网页" class="headerlink" title="Step5  生成网页"></a>Step5  生成网页</h2><p>静态网站是指全部由 HTML（标准通用标记语言的子集）代码格式页面组成的网站，所有的内容包含在网页文件中，一般文件名均以 htm、html、shtml 等为后缀。</p><p>所以在部署网站之前，我们需要生成 HTML 静态文件，然后再将生成的「 Public 」静态文件上传到服务器，这样网页才能被别人访问。</p><p>在 Hugo 根目录，右键单击 <code>Git bash here</code>，执行以下任一命令构建网站。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hugo </span><br><span class="line">hugo -F --cleanDestinationDir</span><br></pre></td></tr></table></figure><p><code>hugo</code> 会在 「 public 」文件夹生成静态网站资源，如果下次网站有修改，需要删除该文件夹，再重新执行该命令，因为该命令只会往里面添加内容，不会删除外部已删除而「 public 」仍存在的文件。</p><p><code>hugo -F --cleanDestinationDir</code> 则会从静态目录中找不到的目标中删除文件，表示每次生成的「 public 」都是全新的，会覆盖原来的。</p><h2 id="Step6-部署博客"><a href="#Step6-部署博客" class="headerlink" title="Step6  部署博客"></a>Step6  部署博客</h2><p>搭建网站往往需要服务器，服务器相当于网站的家，网站一般都需要服务器来运行，阿里云、腾讯云、华为云等是国内比较知名的服务器提供商。</p><p>但是，购买一台服务器，不仅涉及到服务器本身的价格，还涉及到流量费用（类似手机流量），这对于初建站且不知道是否长期使用的人来说，无疑是一笔比较昂贵的支出。</p><p><a href="https://github.com/">GitHub</a> 是一个免费托管开源代码的 Git 服务器，如果你不想付费购买服务器，可以将你的网站托管到 GitHub 代码托管平台。</p><p>此部分请阅读「 <a href="http://zyuyu.top/github/">只专注写作！GitHub Actions 自动部署博客</a> 」进行操作。</p><h2 id="美化主题"><a href="#美化主题" class="headerlink" title="美化主题"></a>美化主题</h2><p>你可以无需阅读此部分内容，这部分记录了我修改 DoIt 主题布局排版和增加网站背景的过程，如果你有同样的需求，可以复制使用。</p><h3 id="布局排版"><a href="#布局排版" class="headerlink" title="布局排版"></a>布局排版</h3><p>Hugo 对主题自定义的程度很高，你可以直接在根目录创建与主题相同的文件目录，生成网页时，会直接覆盖主题原来的布局文件。</p><p>布局排版的修改主要利用到 <code>_custom.scss</code> 和 <code>_override.scss</code>，它们位于主题目录中的「 ..／assets／css／… 」，你可以直接复制到博客根目录的相同位置，也可以直接在博客根目录所在位置新建文件。</p><p><code>_custom.scss</code> 是关于 <code>css</code> 样式的修改，以下是我目前正在使用的 <code>_custom.scss</code>，请注意，它只适用于 DoIt 主题。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// ==============================</span><br><span class="line">// Custom style</span><br><span class="line">// 自定义样式</span><br><span class="line">// ==============================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 头部 */</span></span><br><span class="line"><span class="selector-class">.header-wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">238</span>, <span class="number">238</span>, <span class="number">238</span>);</span><br><span class="line"></span><br><span class="line">  <span class="selector-attr">[theme=dark]</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#292a2d</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#37393e</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-attr">[theme=black]</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000000</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#37393e</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.backstretch</span> &#123; </span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="selector-attr">[theme=dark]</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">brightness</span>(<span class="number">50%</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-attr">[theme=black]</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">brightness</span>(<span class="number">50%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line"></span><br><span class="line">  <span class="selector-attr">[theme=dark]</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#292a2d</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-attr">[theme=black]</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首页 */</span></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">  <span class="selector-attr">[header-desktop]</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">3rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-attr">[header-mobile]</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">3rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首页文章头像 */</span></span><br><span class="line"><span class="selector-class">.single</span> <span class="selector-class">.post-meta</span> <span class="selector-class">.author</span> <span class="selector-tag">img</span><span class="selector-class">.avatar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1.3rem</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1.3rem</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: text-bottom;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0.25px</span> solid <span class="number">#f0f0f0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">object-position</span>: center;</span><br><span class="line">  -o-<span class="attribute">object-fit</span>: cover;</span><br><span class="line">  <span class="attribute">object-fit</span>: cover;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;object-fit: cover;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首页头像旋转360度动画 */</span></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> play &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(-<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-moz-keyframes</span> play &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    -moz-<span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    -moz-<span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(-<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> play &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(-<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首页 */</span></span><br><span class="line"><span class="selector-class">.home</span> &#123;</span><br><span class="line">  <span class="selector-class">.home-profile</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">238</span>, <span class="number">238</span>, <span class="number">238</span>);</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">3rem</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-attr">[theme=dark]</span> &amp; &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#292a2d</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#37393e</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-attr">[theme=black]</span> &amp; &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#000000</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#37393e</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.home-avatar</span> &#123;</span><br><span class="line">      <span class="selector-tag">img</span> &#123;</span><br><span class="line">        <span class="comment">/* 设置循环动画</span></span><br><span class="line"><span class="comment">        [animation: </span></span><br><span class="line"><span class="comment">        (play)动画名称</span></span><br><span class="line"><span class="comment">        (2s)动画播放时长单位秒或微秒</span></span><br><span class="line"><span class="comment">        (ease-out)动画播放的速度曲线为以低速结束 </span></span><br><span class="line"><span class="comment">        (1s)等待1秒然后开始动画</span></span><br><span class="line"><span class="comment">        (1)动画播放次数(infinite为循环播放) ]*/</span></span><br><span class="line"></span><br><span class="line">        -webkit-<span class="attribute">transition</span>: -webkit-transform <span class="number">1.0s</span> ease-out;  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">        -moz-<span class="attribute">transition</span>: -moz-transform <span class="number">1.0s</span> ease-out;  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">        <span class="attribute">transition</span>: transform <span class="number">1.0s</span> ease-out;  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">                </span><br><span class="line">        &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">        -moz-<span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">360deg</span>);  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 鼠标经过停止头像旋转 </span></span><br><span class="line"><span class="comment">        -webkit-animation-play-state:paused;</span></span><br><span class="line"><span class="comment">        animation-play-state:paused;*/</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.home</span><span class="selector-attr">[posts]</span> &#123;</span><br><span class="line">  <span class="selector-class">.home-profile</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">4rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.summary</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: .<span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">1.5rem</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">0px</span> dashed <span class="number">#f0f0f0</span>;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">238</span>, <span class="number">238</span>, <span class="number">238</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="selector-attr">[theme=dark]</span> &amp; &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#292a2d</span>;</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">0px</span> dashed white;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#37393e</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-attr">[theme=black]</span> &amp; &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#000000</span>;</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">0px</span> dashed white;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#37393e</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.single-title</span> &#123;</span><br><span class="line">      <span class="attribute">padding</span>: .<span class="number">5rem</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.content</span> &#123;</span><br><span class="line">      <span class="attribute">padding-left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">padding-right</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.post-meta</span> &#123;</span><br><span class="line">      <span class="attribute">padding-left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">padding-right</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.post-footer</span> &#123;</span><br><span class="line">      <span class="attribute">padding-left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">padding-right</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">a</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &amp;<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">left</span>: -<span class="number">0.25em</span>;</span><br><span class="line">            <span class="attribute">right</span>: -<span class="number">0.25em</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="built_in">hsla</span>(<span class="number">341</span>, <span class="number">97%</span>, <span class="number">59%</span>, <span class="number">0.75</span>);</span><br><span class="line">            <span class="attribute">transform-origin</span>: center right;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="attribute">transition</span>: transform <span class="number">0.2s</span> ease-in-out;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 页码 */</span></span><br><span class="line"><span class="selector-class">.pagination</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">238</span>, <span class="number">238</span>, <span class="number">238</span>);</span><br><span class="line"></span><br><span class="line">  <span class="selector-attr">[theme=dark]</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#292a2d</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#37393e</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-attr">[theme=black]</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000000</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#37393e</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 脚部 */</span></span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">border-top-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-top-color</span>: <span class="number">#a166ab</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5rem</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-attr">[theme=dark]</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#292a2d</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-attr">[theme=black]</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1440px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">56%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1200px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">52%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1000px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">680px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 归档、标签、分类页 */</span></span><br><span class="line"><span class="selector-class">.archive</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">238</span>, <span class="number">238</span>, <span class="number">238</span>);</span><br><span class="line">  <span class="attribute">border-bottom-width</span>: <span class="number">0px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-attr">[theme=dark]</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#292a2d</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#37393e</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-attr">[theme=black]</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000000</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#37393e</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.single-title</span> &#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">2rem</span> <span class="number">1rem</span> <span class="number">0.5rem</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.single-subtitle</span> &#123;</span><br><span class="line">      <span class="attribute">padding-right</span>: <span class="number">1rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.group-title</span> &#123;</span><br><span class="line">      <span class="attribute">padding-left</span>: <span class="number">1rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.archive-item</span> &#123;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1.8rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.tag-cloud-tags</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">0.8rem</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">0.8rem</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">5rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.categories-card</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">0.5rem</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">0.5rem</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">5rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文章页 */</span></span><br><span class="line"><span class="selector-class">.single</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line"></span><br><span class="line">  <span class="selector-attr">[theme=dark]</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#292a2d</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#37393e</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-attr">[theme=black]</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000000</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#37393e</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.single-title</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1.5rem</span> <span class="number">0</span> <span class="number">0.5rem</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">1rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.post-meta</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">2rem</span> <span class="number">0</span> .<span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#b1b1ba</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">1rem</span>;</span><br><span class="line"></span><br><span class="line">    &gt; <span class="selector-tag">h2</span> &#123;</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="built_in">rgb</span>(<span class="number">95</span>, <span class="number">90</span>, <span class="number">75</span>) <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">1px</span>, <span class="built_in">rgba</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0.5</span>) <span class="number">1px</span> <span class="number">1px</span> <span class="number">6px</span> <span class="number">1px</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">      <span class="attribute">font-family</span>: 微软雅黑, 宋体, 黑体, Arial;</span><br><span class="line">      <span class="attribute">font-weight</span>: bold;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">1.3</span>;</span><br><span class="line">      <span class="attribute">text-shadow</span>: <span class="built_in">rgb</span>(<span class="number">34</span>, <span class="number">34</span>, <span class="number">34</span>) <span class="number">2px</span> <span class="number">2px</span> <span class="number">3px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">43</span>, <span class="number">102</span>, <span class="number">149</span>);</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">      <span class="attribute">border-width</span>: initial;</span><br><span class="line">      <span class="attribute">border-style</span>: none;</span><br><span class="line">      <span class="attribute">border-color</span>: initial;</span><br><span class="line">      <span class="attribute">border-image</span>: initial;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">7px</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">0px</span> <span class="number">30px</span> -<span class="number">5px</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &gt; <span class="selector-tag">h2</span>,</span><br><span class="line">    &gt; <span class="selector-tag">h3</span>,</span><br><span class="line">    &gt; <span class="selector-tag">h4</span>,</span><br><span class="line">    &gt; <span class="selector-tag">h5</span>,</span><br><span class="line">    &gt; <span class="selector-tag">h6</span> &#123;</span><br><span class="line">      &gt; <span class="selector-class">.header-mark</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;| &quot;</span>;</span><br><span class="line">        <span class="attribute">margin-right</span>: .<span class="number">3125rem</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &gt; <span class="selector-tag">h2</span> &gt; <span class="selector-class">.header-mark</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&quot;# &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">p</span> &#123;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">1rem</span> <span class="number">0</span> <span class="number">1rem</span>;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">1.7rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-tag">ul</span>,</span><br><span class="line">    <span class="selector-tag">ol</span> &#123;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0.5rem</span> <span class="number">0</span> <span class="number">0.5rem</span>;</span><br><span class="line">      <span class="attribute">padding-left</span>: <span class="number">2rem</span>;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">1.7rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">img</span> &#123;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">      <span class="attribute">height</span>: auto;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">      <span class="attribute">overflow</span>: hidden;</span><br><span class="line">      <span class="attribute">padding-top</span>: <span class="number">1rem</span>;</span><br><span class="line">      <span class="attribute">padding-bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">blockquote</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">      <span class="attribute">border-left</span>: <span class="number">0.25em</span> solid <span class="number">#f0f0f0</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#697681</span>;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">1rem</span> <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">background</span>: white;</span><br><span class="line"></span><br><span class="line">      <span class="selector-attr">[theme=dark]</span> &amp; &#123;</span><br><span class="line">        <span class="attribute">border-left</span>: <span class="number">0.25em</span> solid <span class="number">#363636</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#292a2d</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="selector-attr">[theme=black]</span> &amp; &#123;</span><br><span class="line">        <span class="attribute">border-left</span>: <span class="number">0.25em</span> solid <span class="number">#363636</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#000000</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">ul</span>,</span><br><span class="line">      <span class="selector-tag">ol</span> &#123;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">2rem</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.post-footer</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">1rem</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-attr">[theme=dark]</span> &amp; &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#292a2d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-attr">[theme=black]</span> &amp; &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#000000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.related-container</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#comments</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5rem</span> <span class="number">0</span> <span class="number">4rem</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">1rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.el-textarea__inner</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.twikoo</span> <span class="selector-class">.el-textarea__inner</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;https://npm.elemecdn.com/akilar-candyassets/image/zhifeiji.gif&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 相关内容 */</span></span><br><span class="line"><span class="selector-class">.page</span> &gt; <span class="selector-tag">h2</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>) &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 目录 */</span></span><br><span class="line"><span class="selector-class">.toc</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">238</span>, <span class="number">238</span>, <span class="number">238</span>);</span><br><span class="line"></span><br><span class="line">  <span class="selector-attr">[theme=dark]</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#292a2d</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#37393e</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-attr">[theme=black]</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000000</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#37393e</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.toc-content</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">9rem</span>;</span><br><span class="line">    <span class="selector-tag">ul</span> &#123;</span><br><span class="line">      <span class="selector-tag">a</span><span class="selector-pseudo">:first</span>-child<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#toc-auto</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">1.5rem</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">2px</span> solid <span class="number">#f0f0f0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1440px</span>) &#123;</span><br><span class="line">  <span class="selector-id">#toc-auto</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">21%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_override.scss</code> 是关于 <code>_variables.scss</code> 颜色文件的修改，你可以将需要修改的内容复制到博客根目录中的相同文件中，但要注意，请删除 <code>!default</code>，否则将不会生效！示例如下：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ========== Code ========== //</span></span><br><span class="line"><span class="comment">// Color of the code</span></span><br><span class="line"><span class="variable">$code-color</span>: <span class="number">#E74C3C</span>;</span><br><span class="line"><span class="variable">$code-color-dark</span>: <span class="number">#fff</span>;</span><br></pre></td></tr></table></figure><h3 id="网站背景"><a href="#网站背景" class="headerlink" title="网站背景"></a>网站背景</h3><p>背景图的美化需要利用 <code>assets.html</code> 和 <code>custom.js</code> ，所以在开始下面的操作之前，你需要将主题目录中的「 ..／layouts／partials／assets.html 」复制到博客根目录的相同位置，并且在根目录创建「 ..&#x2F;static／js／custom.js 」文件。</p><p>需要提前说明的是，如果你的 <code>baseURL</code> 是子域名，如 <code>https://owner.github.io/blog</code>，你需要在本地引用的自定义的 JS 文件的 <code>src</code> 前面添加子域名，如 <code>src=&quot;/blog/js/ribbons.js&quot;</code>，否则效果将无法生效。</p><h4 id="彩带动画"><a href="#彩带动画" class="headerlink" title="彩带动画"></a>彩带动画</h4><p><a href="http://www.bootstrapmb.com/item/4514/preview">彩色动画</a>是基于 <code>ribbons.js</code> 生成的动态特效，<a href="https://github.com/hustcc/ribbon.js">ribbons.js</a> 是使用 HTML5 Canvas 生成色带 JS 库，只有 1kb，使用非常容易和简单。</p><p>打开复制后的「 assets.html 」文件，在最后面插入以下代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;- /* 自定义的js文件 */ -&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/ribbons.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后新建 <code>ribbons.js</code>，并复制下面的代码到博客根目录中的「 ..static／js／ribbons.js 」。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Ribbons Class File.</span></span><br><span class="line"><span class="comment"> * Creates low-poly ribbons background effect inside a target container.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">name, factory</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span> === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>[name] = <span class="title function_">factory</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    (<span class="string">&quot;Ribbons&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> _w = <span class="variable language_">window</span>, _b = <span class="variable language_">document</span>.<span class="property">body</span>, _d = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机函数</span></span><br><span class="line">        <span class="keyword">var</span> random = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>])) &#123;</span><br><span class="line">                    <span class="keyword">var</span> index = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title function_">random</span>(<span class="number">0</span>, <span class="variable language_">arguments</span>[<span class="number">0</span>].<span class="property">length</span> - <span class="number">1</span>));</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">arguments</span>[<span class="number">0</span>][index];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">random</span>(<span class="number">0</span>, <span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() * (<span class="variable language_">arguments</span>[<span class="number">1</span>] - <span class="variable language_">arguments</span>[<span class="number">0</span>]) + <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//屏幕信息</span></span><br><span class="line">        <span class="keyword">var</span> screenInfo = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> width = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, _w.<span class="property">innerWidth</span> || _d.<span class="property">clientWidth</span> || _b.<span class="property">clientWidth</span> || <span class="number">0</span>),</span><br><span class="line">                height = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, _w.<span class="property">innerHeight</span> || _d.<span class="property">clientHeight</span> || _b.<span class="property">clientHeight</span> || <span class="number">0</span>),</span><br><span class="line">                scrollx = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, _w.<span class="property">pageXOffset</span> || _d.<span class="property">scrollLeft</span> || _b.<span class="property">scrollLeft</span> || <span class="number">0</span>) - (_d.<span class="property">clientLeft</span> || <span class="number">0</span>),</span><br><span class="line">                scrolly = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, _w.<span class="property">pageYOffset</span> || _d.<span class="property">scrollTop</span> || _b.<span class="property">scrollTop</span> || <span class="number">0</span>) - (_d.<span class="property">clientTop</span> || <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">width</span>: width,</span><br><span class="line">                <span class="attr">height</span>: height,</span><br><span class="line">                <span class="attr">ratio</span>: width / height,</span><br><span class="line">                <span class="attr">centerx</span>: width / <span class="number">2</span>,</span><br><span class="line">                <span class="attr">centery</span>: height / <span class="number">2</span>,</span><br><span class="line">                <span class="attr">scrollx</span>: scrollx,</span><br><span class="line">                <span class="attr">scrolly</span>: scrolly</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> mouseInfo = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> screen = <span class="title function_">screenInfo</span>(e),</span><br><span class="line">                mousex = e ? <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, e.<span class="property">pageX</span> || e.<span class="property">clientX</span> || <span class="number">0</span>) : <span class="number">0</span>,</span><br><span class="line">                mousey = e ? <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, e.<span class="property">pageY</span> || e.<span class="property">clientY</span> || <span class="number">0</span>) : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">mousex</span>: mousex,</span><br><span class="line">                <span class="attr">mousey</span>: mousey,</span><br><span class="line">                <span class="attr">centerx</span>: mousex - screen.<span class="property">width</span> / <span class="number">2</span>,</span><br><span class="line">                <span class="attr">centery</span>: mousey - screen.<span class="property">height</span> / <span class="number">2</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//点</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Point</span> = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">x</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">y</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">set</span>(x, y);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//点运算</span></span><br><span class="line">        <span class="title class_">Point</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">            <span class="attr">constructor</span>: <span class="title class_">Point</span>,</span><br><span class="line">            <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">x</span> = x || <span class="number">0</span>; <span class="variable language_">this</span>.<span class="property">y</span> = y || <span class="number">0</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">copy</span>: <span class="keyword">function</span> (<span class="params">point</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">x</span> = point.<span class="property">x</span> || <span class="number">0</span>; <span class="variable language_">this</span>.<span class="property">y</span> = point.<span class="property">y</span> || <span class="number">0</span>; <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">multiply</span>: <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">x</span> *= x || <span class="number">1</span>; <span class="variable language_">this</span>.<span class="property">y</span> *= y || <span class="number">1</span>; <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">divide</span>: <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">x</span> /= x || <span class="number">1</span>; <span class="variable language_">this</span>.<span class="property">y</span> /= y || <span class="number">1</span>; <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">x</span> += x || <span class="number">0</span>; <span class="variable language_">this</span>.<span class="property">y</span> += y || <span class="number">0</span>; <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">subtract</span>: <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">x</span> -= x || <span class="number">0</span>; <span class="variable language_">this</span>.<span class="property">y</span> -= y || <span class="number">0</span>; <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">clampX</span>: <span class="keyword">function</span> (<span class="params">min, max</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">x</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(min, <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="variable language_">this</span>.<span class="property">x</span>, max)); <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">clampY</span>: <span class="keyword">function</span> (<span class="params">min, max</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">y</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(min, <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="variable language_">this</span>.<span class="property">y</span>, max)); <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">flipX</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">x</span> *= -<span class="number">1</span>; <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">flipY</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">y</span> *= -<span class="number">1</span>; <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//丝带画板</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Factory</span> = <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_canvas</span> = <span class="literal">null</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_context</span> = <span class="literal">null</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_sto</span> = <span class="literal">null</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_width</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_height</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_scroll</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_ribbons</span> = [];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_options</span> = &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="string">&quot;bgCanvas&quot;</span>,<span class="comment">//画板Id</span></span><br><span class="line">                <span class="comment">// backgroundColor: &quot;#1f1f1f&quot;,//画板背景</span></span><br><span class="line">                <span class="attr">colorSaturation</span>: <span class="string">&quot;80%&quot;</span>,<span class="comment">//纯度</span></span><br><span class="line">                <span class="attr">colorBrightness</span>: <span class="string">&quot;60%&quot;</span>,<span class="comment">//亮度</span></span><br><span class="line">                <span class="attr">colorAlpha</span>: <span class="number">0.65</span>,<span class="comment">//透明度</span></span><br><span class="line">                <span class="attr">colorCycleSpeed</span>: <span class="number">6</span>,<span class="comment">//丝带不同块之间的色彩变化量</span></span><br><span class="line">                <span class="attr">verticalPosition</span>: <span class="string">&quot;center&quot;</span>,<span class="comment">//丝带相对于屏幕的初始位置：top/min 屏幕最上方，middle|center 中间，bottom|max 屏幕最下面</span></span><br><span class="line">                <span class="attr">horizontalSpeed</span>: <span class="number">200</span>,<span class="comment">//丝带水平方向移动速度参数（会乘以一个随机值）</span></span><br><span class="line">                <span class="attr">ribbonCount</span>: <span class="number">3</span>,<span class="comment">//同一时间丝带总条数</span></span><br><span class="line">                <span class="attr">strokeSize</span>: <span class="number">0</span>,<span class="comment">//公共边路径样式</span></span><br><span class="line">                <span class="attr">parallaxAmount</span>: -<span class="number">0.5</span>,<span class="comment">//滚动偏移参数，-1表示不偏移，0表示基于丝带只出现在页面最上面</span></span><br><span class="line">                <span class="attr">animateSections</span>: <span class="literal">true</span><span class="comment">//丝带块是否偏移，显得有动感</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_onDraw</span> = <span class="variable language_">this</span>.<span class="property">_onDraw</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_onResize</span> = <span class="variable language_">this</span>.<span class="property">_onResize</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_onScroll</span> = <span class="variable language_">this</span>.<span class="property">_onScroll</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setOptions</span>(options);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="title class_">Factory</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">            <span class="attr">constructor</span>: <span class="title class_">Factory</span>,</span><br><span class="line">            <span class="attr">setOptions</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> options) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (options.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">                            <span class="variable language_">this</span>.<span class="property">_options</span>[key] = options[key];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//初始化</span></span><br><span class="line">            <span class="attr">init</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">//初始化画板</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_canvas</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_canvas</span>.<span class="property">style</span>[<span class="string">&quot;display&quot;</span>] = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_canvas</span>.<span class="property">style</span>[<span class="string">&quot;position&quot;</span>] = <span class="string">&quot;fixed&quot;</span>;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_canvas</span>.<span class="property">style</span>[<span class="string">&quot;margin&quot;</span>] = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_canvas</span>.<span class="property">style</span>[<span class="string">&quot;padding&quot;</span>] = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_canvas</span>.<span class="property">style</span>[<span class="string">&quot;border&quot;</span>] = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_canvas</span>.<span class="property">style</span>[<span class="string">&quot;outline&quot;</span>] = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_canvas</span>.<span class="property">style</span>[<span class="string">&quot;left&quot;</span>] = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_canvas</span>.<span class="property">style</span>[<span class="string">&quot;top&quot;</span>] = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_canvas</span>.<span class="property">style</span>[<span class="string">&quot;width&quot;</span>] = <span class="string">&quot;100%&quot;</span>;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_canvas</span>.<span class="property">style</span>[<span class="string">&quot;height&quot;</span>] = <span class="string">&quot;100%&quot;</span>;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_canvas</span>.<span class="property">style</span>[<span class="string">&quot;z-index&quot;</span>] = <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_canvas</span>.<span class="property">style</span>[<span class="string">&quot;background-color&quot;</span>] = <span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">backgroundColor</span>;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_canvas</span>.<span class="property">id</span> = <span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">id</span>;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">_onResize</span>();</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_context</span> = <span class="variable language_">this</span>.<span class="property">_canvas</span>.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_context</span>.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">_width</span>, <span class="variable language_">this</span>.<span class="property">_height</span>);</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_context</span>.<span class="property">globalAlpha</span> = <span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">colorAlpha</span>;</span><br><span class="line">                    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, <span class="variable language_">this</span>.<span class="property">_onResize</span>);</span><br><span class="line">                    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, <span class="variable language_">this</span>.<span class="property">_onScroll</span>);</span><br><span class="line">                    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">_canvas</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Canvas Context Error: &quot;</span> + e.<span class="title function_">toString</span>());</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//开始绘画</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">_onDraw</span>();</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//生成一条丝带</span></span><br><span class="line">            <span class="attr">addRibbon</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> dir = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title function_">random</span>(<span class="number">1</span>, <span class="number">9</span>)) &gt; <span class="number">5</span> ? <span class="string">&quot;right&quot;</span> : <span class="string">&quot;left&quot;</span>,<span class="comment">//丝带延伸方向</span></span><br><span class="line">                    stop = <span class="number">1000</span>,</span><br><span class="line">                    hide = <span class="number">200</span>,</span><br><span class="line">                    min = <span class="number">0</span> - hide,</span><br><span class="line">                    max = <span class="variable language_">this</span>.<span class="property">_width</span> + hide,</span><br><span class="line">                    movex = <span class="number">0</span>,</span><br><span class="line">                    movey = <span class="number">0</span>,</span><br><span class="line">                    startx = dir === <span class="string">&quot;right&quot;</span> ? min : max,<span class="comment">//起始点x左边</span></span><br><span class="line">                    starty = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title function_">random</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">_height</span>));<span class="comment">//起始点y左边</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//丝带生成的位置</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="regexp">/^(top|min)$/i</span>.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">verticalPosition</span>)) &#123;<span class="comment">//最上方</span></span><br><span class="line">                    starty = <span class="number">0</span> + hide;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^(middle|center)$/i</span>.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">verticalPosition</span>)) &#123;<span class="comment">//中间</span></span><br><span class="line">                    starty = <span class="variable language_">this</span>.<span class="property">_height</span> / <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^(bottom|max)$/i</span>.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">verticalPosition</span>)) &#123;<span class="comment">//最下方</span></span><br><span class="line">                    starty = <span class="variable language_">this</span>.<span class="property">_height</span> - hide;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">parallaxAmount</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    starty += <span class="variable language_">this</span>.<span class="property">_scroll</span>;<span class="comment">//加上滚动</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> ribbon = [],</span><br><span class="line">                    point1 = <span class="keyword">new</span> <span class="title class_">Point</span>(startx, starty),</span><br><span class="line">                    point2 = <span class="keyword">new</span> <span class="title class_">Point</span>(startx, starty),</span><br><span class="line">                    point3 = <span class="literal">null</span>,</span><br><span class="line">                    color = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title function_">random</span>(<span class="number">0</span>, <span class="number">360</span>)),</span><br><span class="line">                    delay = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//从起始位置开始生成一条丝带</span></span><br><span class="line">                <span class="comment">//丝带每个分部都是一个三角形，三点确定一个三角形，相邻三角形有一条公共边</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (stop &lt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                    stop--;</span><br><span class="line">                    movex = <span class="title class_">Math</span>.<span class="title function_">round</span>((<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1</span> - <span class="number">0.2</span>) * <span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">horizontalSpeed</span>);</span><br><span class="line">                    movey = <span class="title class_">Math</span>.<span class="title function_">round</span>((<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1</span> - <span class="number">0.5</span>) * (<span class="variable language_">this</span>.<span class="property">_height</span> * <span class="number">0.25</span>));</span><br><span class="line">                    point3 = <span class="keyword">new</span> <span class="title class_">Point</span>();</span><br><span class="line">                    point3.<span class="title function_">copy</span>(point2);</span><br><span class="line">                    <span class="keyword">if</span> (dir === <span class="string">&quot;right&quot;</span>) &#123;</span><br><span class="line">                        point3.<span class="title function_">add</span>(movex, movey);</span><br><span class="line">                        <span class="keyword">if</span> (point2.<span class="property">x</span> &gt;= max) <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dir === <span class="string">&quot;left&quot;</span>) &#123;</span><br><span class="line">                        point3.<span class="title function_">subtract</span>(movex, movey);</span><br><span class="line">                        <span class="keyword">if</span> (point2.<span class="property">x</span> &lt;= min) <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ribbon.<span class="title function_">push</span>(&#123;</span><br><span class="line">                        <span class="comment">//三点</span></span><br><span class="line">                        <span class="attr">point1</span>: <span class="keyword">new</span> <span class="title class_">Point</span>(point1.<span class="property">x</span>, point1.<span class="property">y</span>),</span><br><span class="line">                        <span class="attr">point2</span>: <span class="keyword">new</span> <span class="title class_">Point</span>(point2.<span class="property">x</span>, point2.<span class="property">y</span>),</span><br><span class="line">                        <span class="attr">point3</span>: point3,</span><br><span class="line">                        <span class="attr">color</span>: color,<span class="comment">//丝带颜色</span></span><br><span class="line">                        <span class="attr">delay</span>: delay,<span class="comment">//延迟消失</span></span><br><span class="line">                        <span class="attr">dir</span>: dir,<span class="comment">//方向</span></span><br><span class="line">                        <span class="attr">alpha</span>: <span class="number">0</span>,<span class="comment">//透明度</span></span><br><span class="line">                        <span class="attr">phase</span>: <span class="number">0</span> <span class="comment">//随机位移有关参数</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="comment">//公共边</span></span><br><span class="line">                    point1.<span class="title function_">copy</span>(point2);</span><br><span class="line">                    point2.<span class="title function_">copy</span>(point3);</span><br><span class="line">                    delay += <span class="number">4</span>;</span><br><span class="line">                    color += <span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">colorCycleSpeed</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">_ribbons</span>.<span class="title function_">push</span>(ribbon);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//绘制一个三角形方块</span></span><br><span class="line">            <span class="attr">_drawRibbonSection</span>: <span class="keyword">function</span> (<span class="params">section</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (section) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (section.<span class="property">phase</span> &gt;= <span class="number">1</span> &amp;&amp; section.<span class="property">alpha</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (section.<span class="property">delay</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        section.<span class="property">phase</span> += <span class="number">0.02</span>;</span><br><span class="line">                        section.<span class="property">alpha</span> = <span class="title class_">Math</span>.<span class="title function_">sin</span>(section.<span class="property">phase</span>) * <span class="number">1</span>;</span><br><span class="line">                        section.<span class="property">alpha</span> = section.<span class="property">alpha</span> &lt;= <span class="number">0</span> ? <span class="number">0</span> : section.<span class="property">alpha</span>;</span><br><span class="line">                        section.<span class="property">alpha</span> = section.<span class="property">alpha</span> &gt;= <span class="number">1</span> ? <span class="number">1</span> : section.<span class="property">alpha</span>;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">animateSections</span>) &#123;</span><br><span class="line">                            <span class="keyword">var</span> mod = <span class="title class_">Math</span>.<span class="title function_">sin</span>(<span class="number">1</span> + section.<span class="property">phase</span> * <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>) * <span class="number">0.1</span>;</span><br><span class="line">                            <span class="keyword">if</span> (section.<span class="property">dir</span> === <span class="string">&quot;right&quot;</span>) &#123;</span><br><span class="line">                                section.<span class="property">point1</span>.<span class="title function_">add</span>(mod, <span class="number">0</span>);</span><br><span class="line">                                section.<span class="property">point2</span>.<span class="title function_">add</span>(mod, <span class="number">0</span>);</span><br><span class="line">                                section.<span class="property">point3</span>.<span class="title function_">add</span>(mod, <span class="number">0</span>);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                section.<span class="property">point1</span>.<span class="title function_">subtract</span>(mod, <span class="number">0</span>);</span><br><span class="line">                                section.<span class="property">point2</span>.<span class="title function_">subtract</span>(mod, <span class="number">0</span>);</span><br><span class="line">                                section.<span class="property">point3</span>.<span class="title function_">subtract</span>(mod, <span class="number">0</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            section.<span class="property">point1</span>.<span class="title function_">add</span>(<span class="number">0</span>, mod);</span><br><span class="line">                            section.<span class="property">point2</span>.<span class="title function_">add</span>(<span class="number">0</span>, mod);</span><br><span class="line">                            section.<span class="property">point3</span>.<span class="title function_">add</span>(<span class="number">0</span>, mod);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        section.<span class="property">delay</span> -= <span class="number">0.5</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">var</span> s = <span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">colorSaturation</span>,</span><br><span class="line">                        l = <span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">colorBrightness</span>,</span><br><span class="line">                        c = <span class="string">&quot;hsla(&quot;</span> + section.<span class="property">color</span> + <span class="string">&quot;, &quot;</span> + s + <span class="string">&quot;, &quot;</span> + l + <span class="string">&quot;, &quot;</span> + section.<span class="property">alpha</span> + <span class="string">&quot; )&quot;</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//绘制一个方块</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_context</span>.<span class="title function_">save</span>();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">parallaxAmount</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">_context</span>.<span class="title function_">translate</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">_scroll</span> * <span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">parallaxAmount</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_context</span>.<span class="title function_">beginPath</span>();</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_context</span>.<span class="title function_">moveTo</span>(section.<span class="property">point1</span>.<span class="property">x</span>, section.<span class="property">point1</span>.<span class="property">y</span>);</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_context</span>.<span class="title function_">lineTo</span>(section.<span class="property">point2</span>.<span class="property">x</span>, section.<span class="property">point2</span>.<span class="property">y</span>);</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_context</span>.<span class="title function_">lineTo</span>(section.<span class="property">point3</span>.<span class="property">x</span>, section.<span class="property">point3</span>.<span class="property">y</span>);</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_context</span>.<span class="property">fillStyle</span> = c;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_context</span>.<span class="title function_">fill</span>();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">strokeSize</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">_context</span>.<span class="property">lineWidth</span> = <span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">strokeSize</span>;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">_context</span>.<span class="property">strokeStyle</span> = c;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">_context</span>.<span class="property">lineCap</span> = <span class="string">&quot;round&quot;</span>;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">_context</span>.<span class="title function_">stroke</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_context</span>.<span class="title function_">restore</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//绘制丝带</span></span><br><span class="line">            <span class="attr">_onDraw</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">//清空已经绘制过的丝带</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, t = <span class="variable language_">this</span>.<span class="property">_ribbons</span>.<span class="property">length</span>; i &lt; t; ++i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_ribbons</span>[i]) &#123;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">_ribbons</span>.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">_context</span>.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">_width</span>, <span class="variable language_">this</span>.<span class="property">_height</span>);<span class="comment">//清空画板</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">0</span>; a &lt; <span class="variable language_">this</span>.<span class="property">_ribbons</span>.<span class="property">length</span>; ++a) &#123;</span><br><span class="line">                    <span class="keyword">var</span> ribbon = <span class="variable language_">this</span>.<span class="property">_ribbons</span>[a],</span><br><span class="line">                        numSections = ribbon ? ribbon.<span class="property">length</span> : <span class="number">0</span>,</span><br><span class="line">                        numDone = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//绘制整条丝带</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> b = <span class="number">0</span>; b &lt; numSections; ++b) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">_drawRibbonSection</span>(ribbon[b])) &#123;</span><br><span class="line">                            numDone++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//丝带已经全部飘过屏幕，设置为null,函数前面会自动清理</span></span><br><span class="line">                    <span class="keyword">if</span> (numDone &gt;= numSections) &#123;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">_ribbons</span>[a] = <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//随机生成一条丝带</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_ribbons</span>.<span class="property">length</span> &lt; <span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">ribbonCount</span> &amp;&amp; <span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.99</span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">addRibbon</span>();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//调度交给系统，当需要刷新画板时调用指定的回调函数，用于提高性能</span></span><br><span class="line">                <span class="title function_">requestAnimationFrame</span>(<span class="variable language_">this</span>.<span class="property">_onDraw</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//重新设置窗体大小时需要获取窗体大小</span></span><br><span class="line">            <span class="attr">_onResize</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> screen = <span class="title function_">screenInfo</span>(e);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">_width</span> = screen.<span class="property">width</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">_height</span> = screen.<span class="property">height</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_canvas</span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_canvas</span>.<span class="property">width</span> = <span class="variable language_">this</span>.<span class="property">_width</span>;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">_canvas</span>.<span class="property">height</span> = <span class="variable language_">this</span>.<span class="property">_height</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_context</span>) &#123;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">_context</span>.<span class="property">globalAlpha</span> = <span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">colorAlpha</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//滚动时获取滚动距离</span></span><br><span class="line">            <span class="attr">_onScroll</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> screen = <span class="title function_">screenInfo</span>(e);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">_scroll</span> = screen.<span class="property">scrolly</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;; <span class="keyword">return</span> <span class="title class_">Factory</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化并绘制</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Ribbons</span>(&#123;</span><br><span class="line">    <span class="attr">ribbonCount</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">parallaxAmount</span>: -<span class="number">0.99</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>效果示例：</p><p><img src="/../images/hugo-build/Video_20221004235412.gif" alt="效果图"></p><h4 id="蜂窝粒子"><a href="#蜂窝粒子" class="headerlink" title="蜂窝粒子"></a>蜂窝粒子</h4><p><a href="https://git.hust.cc/canvas-nest.js/">蜂窝粒子动画</a>是基于 <code>canvas-nest.min.js</code> 生成的动态特效，<a href="https://github.com/hustcc/canvas-nest.js">canvas-nest.min.js</a> 是使用 HTML5 Canvas 生成色带 JS 库，不依赖 jQuery，使用原生的 JavaScript，使用非常容易和简单。</p><p>打开复制后的「 assets.html 」文件，在最后面插入以下代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; color=&quot;122,103,238&quot; opacity=&#x27;0.7&#x27; zIndex=&quot;-2&quot; count=&quot;99&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.1/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>效果示例：</p><p><img src="/../images/hugo-build/Video_20221005000909.gif" alt="效果图"></p><p>如果需要更改粒子颜色，只需修改 <code>color</code> 的 RGB 即可。</p><h4 id="轮播背景"><a href="#轮播背景" class="headerlink" title="轮播背景"></a>轮播背景</h4><p>此部分内容来自 <a href="https://lewky.cn/posts/hugo-3.html/">@雨临Lewis</a>。轮播图效果的生成依赖于 jQuery，使用非常简单。打开复制后的「 assets.html 」文件，在最后面插入以下代码。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery@2.1.3/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery-backstretch@2.1.18/jquery.backstretch.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;- /* 自定义的js文件 */ -&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/custom.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在新建的「 custom.js 」文件中插入以下代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 轮播背景图片 */</span></span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">$.<span class="title function_">backstretch</span>([</span><br><span class="line"><span class="string">&quot;/images/1.jpg&quot;</span>,</span><br><span class="line"><span class="string">&quot;/images/2.jpg&quot;</span>,</span><br><span class="line"><span class="string">&quot;/images/3.jpg&quot;</span></span><br><span class="line">], &#123; <span class="attr">duration</span>: <span class="number">60000</span>, <span class="attr">fade</span>: <span class="number">1500</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>效果示例：</p><p><img src="/../images/hugo-build/Video_20221005003344.gif" alt="效果图"></p><p>由于使用的是动态资源，所以图片一定要存放在「 static 」文件夹中，否则效果无法生效，或者你也可以将图片存放在图床中，使用图片的 URL 链接。</p><h2 id="简码速查"><a href="#简码速查" class="headerlink" title="简码速查"></a>简码速查</h2><p>Markdown 的内容格式虽然简单，但是有时它也不尽如人意，在很多方面都无法很好地支持，这时内容编辑者就需要使用纯 HTML 来扩展可能性，这与 Markdown 语法的优美简洁相矛盾。</p><p>为了尽可能避免使用 HTML 以保持内容简洁，Hugo 创建了 Shortcodes 来规避这些限制。<code>Shortcodes</code> 是内容文件中的一个简单片段，可以生成合理的 HTML 代码，并且符合 Markdown 的设计哲学。在站点生成时，Hugo Shortcodes 将轻松合并到更改中，避免了可能复杂的搜索和替换操作。</p><p>通常无需记忆具体的语法，只要知道每个参数所代表的意义即可，你可以借助<a href="https://shurufa.sogou.com/?r=mac&t=pinyin">搜狗拼音输入法</a>的自定义短语功能，将预设好参数的标签插件添加新短语，从而通过缩写实现快捷输入。</p><p><img src="/../images/hugo-build/LqA5LsZB4p.png" alt="自定义短语"></p><p><img src="/../images/hugo-build/rto0sMWz5l.png" alt="添加新短语"></p><h3 id="内置简码"><a href="#内置简码" class="headerlink" title="内置简码"></a>内置简码</h3><p>Hugo 附带了一组预定义的 Shortcodes，实现了一些常见的用法，以保持 Markdown 内容简洁。更具体的内容参数请阅读 <a href="https://gohugo.io/content-management/shortcodes/">Hugo Shortcodes 文档</a>，下表仅为简单使用的短代码简表。</p><table><thead><tr><th align="center">作用</th><th>语法</th></tr></thead><tbody><tr><td align="center">图片</td><td><code>&#123;&#123;&#42;figure src="图片地址" title="图片标题"&#42;>&#125;&#125;</code></td></tr><tr><td align="center">gist</td><td><code>&#123;&#123;&#42;gist 用户名 gist-id&#42;>&#125;&#125;</code></td></tr><tr><td align="center">语法高亮</td><td><code>&#123;&#123;&#42;highlight html&#42;>&#125;&#125;</code>……<code>&#123;&#123;&#42;/highlight&#42;>&#125;&#125;</code></td></tr><tr><td align="center">前置参数</td><td><code>&#123;&#123;&#42;param Front-matter参数名称&#42;>&#125;&#125;</code></td></tr><tr><td align="center">页面链接</td><td>用法1：<code>[文章标题](&#123;&#123;&#42;ref "文章文件的相对路径地址"&#42;>&#125;&#125;)</code><br>用法2：<code>[文章标题](&#123;&#123;&#42;relref "文章标题的碎片链接地址"&#42;>&#125;&#125;)</code></td></tr><tr><td align="center">推特</td><td><code>&#123;&#123;&#42;tweet user="用户名" id="文章ID"&#42;>&#125;&#125;</code></td></tr><tr><td align="center">YouTube</td><td>用法1：<code>&#123;&#123;&#42;vimeo 视频ID&#42;>&#125;&#125;</code><br>用法2：<code>&#123;&#123;&#42;youtube 视频ID&#42;>&#125;&#125;</code></td></tr></tbody></table><h3 id="扩展简码"><a href="#扩展简码" class="headerlink" title="扩展简码"></a>扩展简码</h3><p><a href="https://hugodoit.pages.dev/zh-cn/theme-documentation-extended-shortcodes/">DoIt</a> 主题在 Hugo 内置的 Shortcodes 的基础上提供多个扩展的 Shortcodes，支持 Markdown 或 HTML 格式。更具体的内容参数请阅读 <a href="https://hugodoit.pages.dev/zh-cn/theme-documentation-extended-shortcodes/">DoIt 扩展 Shortcodes 使用文档</a>，下表仅为简单使用的短代码简表。由于找不到合适的转义字符，使用时请记得将 <code>*</code> 替换为空格。</p><table><thead><tr><th align="center">作用</th><th>语法</th></tr></thead><tbody><tr><td align="center">自定义样式</td><td><code>&#123;&#123;&#42;style "CSS样式"&#42;>&#125;&#125;</code> ……<code>&#123;&#123;&#42;/style&#42;>&#125;&#125;</code></td></tr><tr><td align="center">链接</td><td><code>&#123;&#123;&#42;link "链接地址" 链接的标题 "悬停在链接上显示的提示"&#42;>&#125;&#125;</code></td></tr><tr><td align="center">图片</td><td><code>&#123;&#123;&#42;image src="图片地址" caption="图片的标题" title="悬停在图片上显示的提示"&#42;>&#125;&#125;</code></td></tr><tr><td align="center">提示横幅</td><td><code>&#123;&#123;&#42;admonition 横幅类型 "标题" true或false&#42;>&#125;&#125;</code>……<code>&#123;&#123;&#42;/admonition&#42;>&#125;&#125;</code><br>其中横幅类型可选：note、abstract、info、tip、success、question、warning、failure、danger、bug、example、quote</td></tr><tr><td align="center">数据图表</td><td>用法1：<code>&#123;&#123;&#42;mermaid&#42;>&#125;&#125;</code>……<code>&#123;&#123;&#42;/mermaid&#42;>&#125;&#125;</code><br>用法2：<code>&#123;&#123;&#42;echarts&#42;>&#125;&#125;</code>……<code>&#123;&#123;&#42;/echarts&#42;>&#125;&#125;</code><br>具体请参考 <a href="https://mermaidjs.github.io/">mermaid</a> 和 <a href="https://echarts.apache.org/zh/index.html">Echarts</a></td></tr><tr><td align="center">地图</td><td><code>&#123;&#123;&#42;mapbox 经度值 纬度值 缩放比例&#42;>&#125;&#125;</code></td></tr><tr><td align="center">音乐</td><td>用法1：<code>&#123;&#123;&#42;music url="本地音乐链接" name=音乐名字 artist=歌手 cover="音乐封面"&#42;>&#125;&#125;</code><br>用法2：<code>&#123;&#123;&#42;music "第三方音乐链接"&#42;>&#125;&#125;</code><br>用法3：<code>&#123;&#123;&#42;music 音乐平台 音乐类型 音乐ID&#42;>&#125;&#125;</code><br>其中音乐平台可选：netease、tecent、kugou、xiami、baidu；音乐类型可选：song、playlist、album、search、artist</td></tr><tr><td align="center">bilibili</td><td><code>&#123;&#123;&#42;bilibili BVid 分P数&#42;>&#125;&#125;</code></td></tr><tr><td align="center">打字动画</td><td>简单打字动画：<code>&#123;&#123;&#42;typeit&#42;>&#125;&#125;</code>……<code>&#123;&#123;&#42;/typeit&#42;>&#125;&#125;</code><br><br>代码打字动画：<code>&#123;&#123;&#42;typeit code=代码语言名称&#42;>&#125;&#125;</code>…… <code>&#123;&#123;&#42;/typeit&#42;>&#125;&#125;</code><br>段落打字动画：<code>&#123;&#123;&#42;typeit group=paragraph&#42;>&#125;&#125;</code>…… <code>&#123;&#123;&#42;/typeit&#42;>&#125;&#125;</code></td></tr><tr><td align="center">Javascript</td><td><code>&#123;&#123;&#42;script&#42;>&#125;&#125;</code>……<code>&#123;&#123;&#42;/script&#42;>&#125;&#125;</code></td></tr><tr><td align="center">友链</td><td><code>&#123;&#123;&#42;friend "名字" "友链" "头像" "简介"&#42;>&#125;&#125;</code></td></tr><tr><td align="center">项目展示</td><td><code>&#123;&#123;&#42;showcase "项目标题" "项目简介" "项目封面图" "项目链接"&#42;>&#125;&#125;</code></td></tr><tr><td align="center">数学公式</td><td><code>&#123;&#123;&#42;math&#42;>&#125;&#125;</code>……<code>&#123;&#123;&#42;/math&#42;>&#125;&#125;</code></td></tr></tbody></table><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://gohugo.io/">Hugo 文档</a></li><li><a href="https://hugodoit.pages.dev/zh-cn/theme-documentation-basics/">DoIt 主题文档</a></li><li><a href="https://gohugo.io/content-management/shortcodes/">Hugo Shortcodes 文档</a></li><li><a href="https://hugodoit.pages.dev/zh-cn/theme-documentation-extended-shortcodes/">DoIt 扩展 Shortcodes 文档</a></li><li><a href="https://guanqr.com/tech/website/hugo-shortcodes-customization/">自定义 Hugo Shortcodes 简码</a></li><li><a href="https://lewky.cn/posts/hugo-3.html/">LoveIt 主题美化与博客功能增强</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hugo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>只专注写作！GitHub Actions 自动部署博客</title>
      <link href="/github-actions/"/>
      <url>/github-actions/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/">GitHub</a> 是一个面向开源及私有软件项目的托管平台，只支持 <a href="https://git-scm.com/">Git</a> 作为唯一的版本库格式进行托管。如果你要将基于 <a href="https://zyuyu.top/hexo-build/">Hexo</a> 或 <a href="https://zyuyu.top/hugo-build/">Hugo</a> 生成的网站代码推送到 GitHub，一般要通过命令行或者 GitHub Desktop 客户端将源代码推送到 GitHub 仓库。</p><p>但是，由于没有数据库，静态博客往往需要生成静态文件才能部署到 GitHub 仓库，并通过 <a href="https://docs.github.com/cn/actions">GitHub Actions</a> 生成网页供他人浏览。这就意味着你在推送代码之前，还需要执行 Hexo 或 Hugo 静态文件生成的命令，不仅耗费时间和精力，还加大了我们的写作负担。有没有一种方法能够简化代码推送的流程，让我们能够专注于写作，并且像其他自媒体平台那样，写完文章上传就行了呢？</p><p>当然可以！你可以通过在 GitHub Actions 中创建 Workflows，由 GitHub Actions 自动帮你完成生成静态文件的过程，你只需要写作 + 上传即可，大大地节省了你的时间和精力。</p><p><img src="/../images/github-actions/image-20221109185020857.png" alt="nice"></p><p>下面我将介绍基于 Hexo 或 Hugo 生成的网站代码推送到 GitHub 的一般部署和自动部署两种方式，你可以根据自己的需求选择其中一种方式即可。</p><h2 id="一般部署"><a href="#一般部署" class="headerlink" title="一般部署"></a>一般部署</h2><p>静态博客没有数据库，所以要通过执行 Hexo 或 Hugo 的页面生成命令渲染得到 HTML 标准的文件（即 <code>Public</code> 文件夹的内容），然后通过 Git 命令行或 GitHub Desktop 客户端推送到 GitHub 平台，再经由 GitHub Actions 完成页面的建立和部署，最终由 GitHub Pages 生成你的网页域名以供他人访问浏览。</p><p><img src="/../images/github-actions/GitHub.jpg" alt="操作流程"></p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>存储库用于存储各种项目的源代码，按人群可分为个人仓库和组织仓库，按可见性可分为公开仓库和私有仓库。在创建仓库之前，需要前往 <a href="https://github.com/">GitHub 官网</a>，点击 <code>Sign up</code>，根据提示操作，创建你的个人账户。</p><p>注册并完成邮件验证后，在任何页面的右上角，点击 <code>+</code> 下拉菜单选择 <code>New repository</code> 新建存储库。</p><p><img src="/../images/github-actions/image-20221112203207707.png" alt="新建存储库"></p><p>进入页面，填写仓库的名称，仓库可见性默认选择 <code>Public</code> 即可。关于仓库的名称，GitHub 为用户提供域名后缀为 <code>.github.io</code> 的 GitHub Pages 公共网页服务，如果你想要生成 <code>http://owner.github.io/</code> 的网址，则需要填写 <code>owner.github.io</code>。如果你填入除此之外的任意字眼，如 <code>blog</code>，将会生成<code>http://owner.github.io/blog/</code> 的网址。</p><p><img src="/../images/github-actions/image-20221112204214939.png" alt="填写仓库名称"></p><p><img src="/../images/github-actions/image-20221112203503013.png" alt="仓库可见性"></p><p>如果你想要修改仓库的名称，可进入仓库的「 Setting -&gt; General -&gt; Repository name -&gt; Rename 」修改。</p><p>接着打开本地 Hexo 或 Hugo 的配置文件 <code>_config.yml</code> 或 <code>config.toml</code>，修改你的网站网址 <code>url</code> 或 <code>baseURL</code>。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://owner.github.io/</span> <span class="comment"># 网址，如为子域名，需设置root</span></span><br><span class="line"><span class="attr">root:</span> <span class="comment"># 子域名时设置，如/blog/，此时url为https://owner.github.io/blog</span></span><br></pre></td></tr></table></figure><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hugo</span></span><br><span class="line"><span class="attr">baseURL</span> = <span class="string">&quot;https://owner.github.io/&quot;</span> <span class="comment"># 子域名则填写https://owner.github.io/blog</span></span><br></pre></td></tr></table></figure><h3 id="托管代码"><a href="#托管代码" class="headerlink" title="托管代码"></a>托管代码</h3><p>GitHub 是一个免费托管开源代码的 Git 服务器，Git 负责在你计算上本地发生的、与 GitHub 有关的所有内容。如果想要在命令行中使用 Git，就需要下载、安装和配置 <a href="https://git-scm.com/downloads">Git</a>，此部分请阅读「 命令行 」进行操作；如果想要在本地使用 Git，但不想使用命令行，可以下载并安装 <a href="https://desktop.github.com/">GitHub Desktop</a> 客户端，此部分请阅读「 Desktop 」进行操作。</p><p>需要提前说明的是，网址位于仓库的「 Setting -&gt; Pages 」，如果推送代码之后，你没有看到 GitHub Pages 有网址，你需要在 Branch 选择 main ，然后点保存，稍等片刻后刷新就会出现。</p><h4 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h4><p>下载并安装最新版本的 <a href="https://git-scm.com/downloads">Git</a> 后，你需要使用 <code>git config</code> 关联 GitHub，在桌面右键单击 <code>Git Bash Here</code>，依次执行以下命令，记得修改引号内的内容。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;注册时的用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;注册时的用户邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>从 Git 连接到 GitHub 存储库时，需要使用 HTTPS 或 SSH 向 GitHub 进行身份验证。如果你使用 HTTPS 连接，每次通过 Git 推送代码都需要输入用户名和用户密码；如果你使用 SSH 连接，就必须在每台计算机上生成用于从 GitHub 进行推送或拉取的 SSH 密钥，推送代码时就无需输入用户名和用户密码。你可以在仓库的「 Code 」页面，选择 <code>&lt; &gt; Code</code> 下拉菜单来获取 HTTPS 或 SSH 地址。</p><p>下面的执行命令用于生成 SSH 密钥，如果你使用 HTTPS 连接，则无需阅读此部分。请注意，请在私人电脑使用 SSH密钥。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;注册时的用户邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>此时会询问是否需要密码，不需要直接继续按三次回车即可，然后执行以下命令，获取你生成的密钥。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line"><span class="built_in">cat</span> id_rsa.pub</span><br></pre></td></tr></table></figure><p>鼠标选中后右键选择 <code>Copy</code> ，回到 GitHub 的页面，点击「 头像 -&gt; Settings -&gt; SSH and GPG keys -&gt; New SSH key 」，将复制的内容粘贴到 Key 位置。配置完成后，你可以通过执行 <code>ssh -T git@github.com</code> 命令测试是否成功配置 SSH Key。</p><p><img src="/../images/github-actions/SSH-keys.png" alt="SSH keys"></p><p>如果你使用 Hexo 生成网页，在托管之前，要先打开配置文件 <code>_config.yml</code>，拉到最后面，填入如下内容，前提是你已经安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a> 插件。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/owner/repo.git</span> <span class="string">或</span> <span class="string">git@github.com:owner/repo.git</span> <span class="comment"># HTTPS和SSH地址二选一</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>然后在 Hexo 根目录，右键单击 <code>Git Bash Here</code> ，依次执行以下命令即可托管到 GitHub 仓库。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>如果你使用 Hugo 生成网页，则在生成静态文件（<code>Public</code>）之后，在 Hugo 根目录，右键单击 <code>Git bash here</code>，执行以下命令托管到 GitHub 仓库。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> public</span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git branch -M main </span><br><span class="line"></span><br><span class="line"><span class="comment"># 若是HTTPS地址，则执行这部分</span></span><br><span class="line">git remote add origin https://github.com/owner/repo.git</span><br><span class="line">git push -u origin main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若是SSH地址，则执行这部分</span></span><br><span class="line">git remote add origin git@github.com:owner/repo.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h4 id="Desktop"><a href="#Desktop" class="headerlink" title="Desktop"></a>Desktop</h4><p><a href="https://desktop.github.com/">GitHub 桌面版</a>的操作很傻瓜式，直接复制粘贴替换即可，不需要记很多命令，也不需要申请 SSH 密钥等一系列操作，缺点就是会占用本地空间。</p><p>下载安装后，进入页面登录后选择 <code>Clone a repository</code>，选择刚刚新建的仓库，选择 <code>Local Path</code> 用于放置博客 <code>public</code> 的内容。</p><p><img src="/../images/github-actions/clone.png" alt="clone"></p><p>执行 Hexo 或 Hugo 静态文件生成命令后，将位于「 Public 」中的所有内容复制到 <code>Local Path</code> 中，它就会自动出现在 GitHub 桌面版的界面中，然后按照下图指示操作就会自动部署到 GitHub 仓库中。</p><p><img src="/../images/github-actions/fetch.png" alt="fetch"></p><h2 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h2><p>GitHub Actions 本质就是 GitHub 推出的持续集成工具，旨在为开发人员提供一种围绕持续集成自动化其工作流程的方法，帮助开发人员完成构建、部署、安排重复性任务等。通过设置工作流，你只需要将代码推送到 GitHub 仓库，而无需在本地执行 Hexo 或 Hugo 生成静态文件的命令，GitHub Actions 会自动帮你完成。</p><p><img src="/../images/github-actions/github-actions.jpg" alt="操作流程"></p><h3 id="创建仓库-1"><a href="#创建仓库-1" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>存储库用于存储各种项目的源代码，按人群可分为个人仓库和组织仓库，按可见性可分为公开仓库和私有仓库。在创建仓库之前，需要前往 <a href="https://github.com/">GitHub 官网</a>，点击 <code>Sign up</code>，根据提示操作，创建你的个人账户。</p><p>注册并完成邮件验证后，在任何页面的右上角，点击 <code>+</code> 下拉菜单选择 <code>New repository</code> 新建存储库。</p><p><img src="/../images/github-actions/image-20221112203207707.png" alt="新建存储库"></p><p>根据可见性，GitHub 仓库可分为公有仓库（Public）和私有仓库（Private）。如果你要创建可以被访问的网页，即 <code>GitHub Pages</code>，就需要将源代码放在公有仓库。而私有仓库可以进行权限控制，只有拥有权限的人才能访问并修改它，也就是说，别人是看不到的你的私有仓库的。</p><p>利用 GitHub 仓库的特点，你可以在 GitHub 创建两个空仓库，一个私有仓库存放博客源码，如<code>owner/blog</code> ，下面简称私库，一个公开仓库存放生成的 <code>public</code> 文件，如<code>owner/owner.github.io</code> ，下面简称公库。</p><p><img src="/../images/github-actions/image-20221109183019506.png" alt="私库和公库"></p><p>如此一来，你上传的文章的源文件既不会被人看到，还能够根据设置密钥对连接私库和公库，当私库中有内容更新的时候，GitHub Actions 将自动生成文件到公库，公库也会自动生成页面。</p><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>GitHub 是一个免费托管开源代码的 Git 服务器，Git 负责在你计算上本地发生的、与 GitHub 有关的所有内容。下载并安装最新版本的 <a href="https://git-scm.com/downloads">Git</a> 后，你需要使用 <code>git config</code> 关联 GitHub，在桌面右键单击 <code>Git Bash Here</code>，依次执行以下命令，记得修改引号内的内容。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;注册时的用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;注册时的用户邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>然后继续执行以下命令，获取公库和私库的 SSH 密钥对。</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ssh-keygen -f github-deploy-key</span><br></pre></td></tr></table></figure><p>此命令会生成 <code>github-deploy-key</code> 和 <code>github-deploy-key.pub</code>两个文件，一般位于 <code>C:\Users\用户名</code> 中。注意，如果你要创建多对密钥对，记得要将 <code>github-deploy-key</code> 更改为其他单词，如 <code>hugo-deploy-key</code>，否则它会覆盖掉之前的密钥对。</p><p>如果你不想它们存放于 C 盘的用户文件夹中，也可以在指定位置，右键单击 <code>Git Bash Here</code>，执行上述命令，获取 SSH 密钥对。但注意，请不要将密钥对存放于本地 Hexo 或 Hugo 的仓库中。</p><p>接下来，在建立的私库中，打开「 Settings -&gt; Secrets -&gt; Actions -&gt; Actions secrets 」，点击 <code>New repository secret</code>，将  <code>github-deploy-key</code> 中的所有内容复制到 <code>Secret</code>中，<code>Name</code>填写 <code>ACTIONS_DEPLOY_KEY</code>。</p><p><img src="/../images/github-actions/gYjfSjXNc1.png" alt="actions secrets"></p><p>在建立的公库中，打开「 Settings -&gt; Secrets -&gt; Deploy keys 」，点击 <code>Add deploy key</code>，将  <code>github-deploy-key.pub</code> 中的所有内容复制到 <code>Secret</code>中，<code>Name</code>填写 <code>ACTIONS_DEPLOY_KEY</code>。</p><p><img src="/../images/github-actions/IHqJRfd9i7.png" alt="deploy keys"></p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>SSH 密钥对配置好后，在 Hexo 或 Hugo 根目录中创建 <code>.github\workflows\deploy.yml</code>，将下面的内容复制到里面，并根据自己的情况修改其中的内容。</p><p>Hexo 请复制这个 👇：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">owner</span> <span class="comment"># 请修改为你的用户名</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="string">example@qq.com</span> <span class="comment"># 请修改为你的用户邮箱</span></span><br><span class="line">  <span class="attr">THEME_REPO:</span> <span class="string">jerryc127/hexo-theme-butterfly</span> <span class="comment"># 请修改为你的主题仓库</span></span><br><span class="line">  <span class="attr">THEME_BRANCH:</span> <span class="string">master</span> <span class="comment"># 请修改为你的主题分支</span></span><br><span class="line">  <span class="attr">DEPLOY_REPO:</span> <span class="string">owner/blog</span> <span class="comment"># 请修改为你的公库</span></span><br><span class="line">  <span class="attr">DEPLOY_BRANCH:</span> <span class="string">main</span> <span class="comment"># 请修改为你的公库分支</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># 请修改为你的私库分支</span></span><br><span class="line">    <span class="attr">paths-ignore:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">README.md</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查仓库分支</span> <span class="comment"># 如果使用git clone下载主题请使用这个</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">main</span> <span class="comment"># 请修改为你的私库分支</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查主题仓库分支</span> <span class="comment"># 如果使用git clone下载主题请使用这个</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_REPO</span> <span class="string">&#125;&#125;</span> </span><br><span class="line">        <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">themes/butterfly</span> <span class="comment"># 请修改为你的主题名称</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># - name: 检查仓库 # 如果使用git submodule下载主题请使用这个即可，并删掉前面两个步骤</span></span><br><span class="line">      <span class="comment"># uses: actions/checkout@v3</span></span><br><span class="line">      <span class="comment"># with:</span></span><br><span class="line">        <span class="comment"># submodules: true</span></span><br><span class="line">        <span class="comment"># fetch-depth: 0</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;16.x&quot;</span> <span class="comment">#请修改为你所用的node版本，如12.X、16.X</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        export TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">        npm install hexo-cli -g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span> <span class="comment"># 请填写你安装的所有依赖的执行命令</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">--save</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-renderer-pug</span> <span class="string">hexo-renderer-stylus</span> <span class="string">--save</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        hexo clean</span></span><br><span class="line"><span class="string">        hexo generate</span></span><br><span class="line"><span class="string"></span>        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署到Github</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_KEY</span> <span class="string">&#125;&#125;</span> <span class="comment"># DEPLOY_KEY要与前面的secrets名称一致</span></span><br><span class="line">        <span class="attr">external_repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_branch:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">        <span class="attr">user_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.GIT_USER</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">user_email:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.GIT_EMAIL</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Hugo 请复制这个 👇：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">owner</span> <span class="comment"># 请修改为你的用户名</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="string">example@qq.com</span> <span class="comment"># 请修改为你的用户邮箱</span></span><br><span class="line">  <span class="attr">THEME_REPO:</span> <span class="string">HEIGE-PCloud/DoIt</span> <span class="comment"># 请修改为你的主题仓库</span></span><br><span class="line">  <span class="attr">THEME_BRANCH:</span> <span class="string">main</span> <span class="comment"># 请修改为你的主题分支</span></span><br><span class="line">  <span class="attr">DEPLOY_REPO:</span> <span class="string">owner/blog</span> <span class="comment"># 请修改为你的公库</span></span><br><span class="line">  <span class="attr">DEPLOY_BRANCH:</span> <span class="string">main</span> <span class="comment"># 请修改为你的公库分支</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># 请修改为你的私库分支</span></span><br><span class="line">    <span class="attr">paths-ignore:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">README.md</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查仓库分支</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">main</span> <span class="comment"># 请修改为你的私库分支</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查主题仓库分支</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_REPO</span> <span class="string">&#125;&#125;</span> </span><br><span class="line">        <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">themes/DoIt</span> <span class="comment"># 请修改为你的主题名称</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hugo</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-hugo@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">hugo-version:</span> <span class="string">&#x27;latest&#x27;</span></span><br><span class="line">        <span class="attr">extended:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">hugo</span> <span class="string">--minify</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署到Github</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span> <span class="comment"># ACTIONS_DEPLOY_KEY要与前面的secrets名称一致</span></span><br><span class="line">        <span class="attr">external_repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_branch:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">        <span class="attr">user_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.GIT_USER</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">user_email:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.GIT_EMAIL</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>需要说明的是，由于 Hexo 需要安装依赖，但 <code>node_modules</code> 依赖包过大，一般不会上传到 GitHub 仓库中，所以创建工作流时要加入「 安装依赖 」这一步骤，这里要将你安装的依赖（插件）的所有命令都写上去。</p><p>简单来说，创建工作流其实就是将你在本地的所有操作命令都放到了 GitHub Actions，让 GitHub 帮你完成，包括 Hexo 或 Hugo 的相关命令，但这不意味着你本地仓库就可以删掉了，为了避免风险，建议你还是要保留本地仓库。工作流创建的语法也比较好理解，你还可以自行阅读 <a href="https://docs.github.com/cn/actions">GitHub Actions 官方文档</a> 创建自己的工作流。</p><p>工作流创建完成后，你只需要将 Hexo 或 Hugo 根目录所有的内容 <code>Push</code> 到私库即可。当你在异地时，只需要直接在私库中 <code>Add File</code> 上传写好的文章就行了，GitHub Actions 会自动帮你完成之后的操作流程。至于怎么推送内容到仓库，你可以阅读下文「 托管代码 」进行操作。</p><p>需要注意的是，这个 <code>deploy.yml</code> 并不是长期有效的，我曾在搜索引擎中搜索到了不少的 <code>workflows</code>，尝试失败了很多次，目前这份来自 <a href="https://www.gagahappy.com/github-actions-workflows-hexo/">@睡月花儿</a>。我觉得关键在于 <code>uses</code> 这个参数所使用的 <code>Actions</code> 操作，所以当你收到来自 GitHub 的失败邮件时，请自行前往 <a href="https://hexo.io/zh-cn/docs/github-pages">Hexo</a> 或 <a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">Hugo</a> 以及 <a href="https://github.com/marketplace">GitHub Actions Marketplace</a> 替换最新的 <code>uses</code>。</p><h3 id="托管代码-1"><a href="#托管代码-1" class="headerlink" title="托管代码"></a>托管代码</h3><p>GitHub 是一个免费托管开源代码的 Git 服务器，Git 负责在你计算上本地发生的、与 GitHub 有关的所有内容。如果想要在命令行中使用 Git，就需要下载、安装和配置 <a href="https://git-scm.com/downloads">Git</a>，此部分请阅读「 命令行 」进行操作；如果想要在本地使用 Git，但不想使用命令行，可以下载并安装 <a href="https://desktop.github.com/">GitHub Desktop</a> 客户端，此部分请阅读「 Desktop 」进行操作。</p><p>需要提前说明的是，网址位于仓库的「 Setting -&gt; Pages 」，如果推送代码之后，你没有看到 GitHub Pages 有网址，你需要在 Branch 选择 main ，然后点保存，稍等片刻后刷新就会出现。</p><h4 id="命令行-1"><a href="#命令行-1" class="headerlink" title="命令行"></a>命令行</h4><p>下载并安装最新版本的 <a href="https://git-scm.com/downloads">Git</a> 后，你需要使用 <code>git config</code> 关联 GitHub，在桌面右键单击 <code>Git Bash Here</code>，依次执行以下命令，记得修改引号内的内容。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;注册时的用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;注册时的用户邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>从 Git 连接到 GitHub 存储库时，需要使用 HTTPS 或 SSH 向 GitHub 进行身份验证。如果你使用 HTTPS 连接，每次通过 Git 推送代码都需要输入用户名和用户密码；如果你使用 SSH 连接，就必须在每台计算机上生成用于从 GitHub 进行推送或拉取的 SSH 密钥，推送代码时就无需输入用户名和用户密码。你可以在仓库的「 Code 」页面，选择 <code>&lt; &gt; Code</code> 下拉菜单来获取 HTTPS 或 SSH 地址。</p><p>下面的执行命令用于生成 SSH 密钥，如果你使用 HTTPS 连接，则无需阅读此部分。请注意，请在私人电脑使用 SSH密钥。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;注册时的用户邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>此时会询问是否需要密码，不需要直接继续按三次回车即可，然后执行以下命令，获取你生成的密钥。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line"><span class="built_in">cat</span> id_rsa.pub</span><br></pre></td></tr></table></figure><p>鼠标选中后右键选择 <code>Copy</code> ，回到 GitHub 的页面，点击「 头像 -&gt; Settings -&gt; SSH and GPG keys -&gt; New SSH key 」，将复制的内容粘贴到 Key 位置。配置完成后，你可以通过执行 <code>ssh -T git@github.com</code> 命令测试是否成功配置 SSH Key。</p><p><img src="/../images/github-actions/SSH-keys.png" alt="SSH keys"></p><p>接着打开 Hexo 或 Hugo 根目录，右键单击 <code>Git Bash Here</code> ，依次执行以下命令即可托管到 GitHub 仓库。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git branch -M main </span><br><span class="line"></span><br><span class="line"><span class="comment"># 若是HTTPS地址，则执行这部分</span></span><br><span class="line">git remote add origin https://github.com/owner/repo.git</span><br><span class="line">git push -u origin main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若是SSH地址，则执行这部分</span></span><br><span class="line">git remote add origin git@github.com:owner/repo.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>注意的是，如果你使用 Hexo 生成网页，并且在工作流中设置了 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a> 插件的安装命令，在托管之前，需要修改配置文件 <code>_config.yml</code>，在 <code>repo</code> 处填入你的公库地址。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/owner/repo.git</span> <span class="string">或</span> <span class="string">git@github.com:owner/repo.git</span> <span class="comment"># HTTPS和SSH地址二选一</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><h4 id="Desktop-1"><a href="#Desktop-1" class="headerlink" title="Desktop"></a>Desktop</h4><p><a href="https://desktop.github.com/">GitHub 桌面版</a>的操作很傻瓜式，直接复制粘贴替换即可，不需要记很多命令，也不需要申请 SSH 密钥等一系列操作，缺点就是会占用本地空间。下载安装后，进入页面登录后选择 <code>Clone a repository</code>，选择刚刚新建的私库，选择 <code>Local Path</code> 用于放置博客源代码。注意的是，为避免出错，建议不要将 Hexo 或 Hugo 根目录作为 <code>Local Path</code>。</p><p><img src="/../images/github-actions/clone.png" alt="clone"></p><p>然后将 Hexo 或 Hugo 根目录中的所有内容复制到 <code>Local Path</code> 中，它就会自动出现在 GitHub 桌面版的界面中，然后按照下图指示操作就会自动部署到 GitHub 仓库中。</p><p><img src="/../images/github-actions/fetch.png" alt="fetch"></p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://docs.github.com/cn">GitHub 官方文档</a></li><li><a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">Hugo Host on GitHub</a></li><li><a href="https://hexo.io/zh-cn/docs/github-pages">Hexo Host on GitHub</a></li><li><a href="https://www.gagahappy.com/github-actions-workflows-hexo/">GitHub Actions Workflows 部署 Hexo</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Hugo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非程序猿的我，为什么要搭建自己的个人博客？</title>
      <link href="/blog-build/"/>
      <url>/blog-build/</url>
      
        <content type="html"><![CDATA[<p>有人可能会问，你为什么要自己搭建博客？明明有公众号、简书、知乎那么多平台，何必折腾呢？</p><p>在回答这个问题之前，我希望你可以回想一下当遇到一些问题时，是不是会下意识地打开搜索引擎？然后过了很长一段时间，当你再碰到类似的问题，你是不是又打开搜索引擎再搜索？如此循环往复，时间和精力都被浪费掉了，而且还不一定能找到之前看到的答案。</p><p>但是，如果我拥有自己的知识库，将遇到过的问题记录下来，那么下次再遇到的时候，我只要在里面搜索一下，不就能立刻得到我想要的答案了嘛！😋😋😋 而搜索引擎应该在知识发现上发光发热！</p><p>所以，我希望的是能够建立自己个人的知识库，它具有我想要的功能，可以最大限度地自定义我的内容，而自建博客网站恰好是实现这一目的的方式。</p><p>搭建博客难吗？说难也难，因为你正在接触一件新事物，人们容易对新事物产生不适感。说容易也很容易，不会代码，不是程序员，只要会下载软件和打字，你就能自己搭建一个静态博客。</p><p><img src="/../images/blog-build/biaoqing.gif" alt="表情包"></p><h2 id="静态博客"><a href="#静态博客" class="headerlink" title="静态博客"></a>静态博客</h2><p>一个网站最基础的部分就是网页，如果要从 HTML 页面写起，显然成本太高，而博客生成器就很好地解决了网页编写的问题。一般来说，博客生成器分为静态和动态两种，目前比较流行的静态博客生成器有 <a href="https://hexo.io/zh-cn/">Hexo</a>、<a href="https://www.gohugo.cn/">Hugo</a>、<a href="https://www.vuepress.cn/">Vuepress</a>、<a href="https://www.jekyll.com.cn/">Jekyll</a> 等，动态博客生成器有 <a href="https://wordpress.org/">WordPress</a>、<a href="https://typecho.org/">Typecho</a>、<a href="https://halo.run/">Halo</a>、<a href="https://b3log.org/solo/">Solo</a> 等。</p><p>动态博客以数据库技术为基础，有前端和后端，后端可以用各种技术实现各种交互，功能更强，但是开发复杂。静态博客是纯前端的界面，没有登录功能和后端管理，功能更简单，比较好上手，比如本博客就是一个静态博客。</p><p>静态博客非常适合专注于内容的网站，通过静态网站生成器，你可以很简单地构建一个静态博客。由于目前我只使用过 <a href="https://hexo.io/zh-cn/">Hexo</a> 和 <a href="https://www.gohugo.cn/">Hugo</a> ，所以主要讲讲它们的使用体验。</p><p><img src="/../images/blog-build/image-20221111024113623.png" alt="Hugo和Hexo"></p><table><thead><tr><th align="center"></th><th align="center">Hexo</th><th align="center">Hugo</th></tr></thead><tbody><tr><td align="center">开发语言</td><td align="center">Node.js</td><td align="center">Go</td></tr><tr><td align="center">编译速度</td><td align="center">快</td><td align="center">很快</td></tr><tr><td align="center">主题丰富度</td><td align="center">很多</td><td align="center">多</td></tr><tr><td align="center">中文社区支持</td><td align="center">很好</td><td align="center">好</td></tr><tr><td align="center">自定义程度</td><td align="center">灵活</td><td align="center">更灵活</td></tr></tbody></table><p>在编译 🌍 方面，<code>Hugo</code> 是基于 <a href="https://baike.baidu.com/item/go/953521?fromtitle=Go%E8%AF%AD%E8%A8%80&fromid=3246011&fr=aladdin">Go</a> 语言编写的静态博客生成器，页面编译（生成）速度非常快，只需要几分之一秒就可以渲染一个经典的中型网站。<code>Hexo</code> 是基于 <a href="https://baike.baidu.com/item/node.js/7567977?fr=aladdin">Node.js</a> 语言编写的静态博客生成器，页面编译（生成）速度也快，但是没有 Hugo 快。在这一点上，你可以将页面编译的过程交给 GitHub Actions 自动完成，在一定程度上可以避免因速度产生的体验差异。</p><p>在主题 🎨 方面，<code>Hexo</code> 是由国人开发的，具有丰富的<a href="https://hexo.io/themes/">主题</a>，如果你在配置主题时遇到困难，在百度搜索 <code>Hexo+主题名称</code> 就能获得解决方法。<code>Hugo</code> 是由外国人开发的，大多数的<a href="https://themes.gohugo.io/">主题</a>也是由外国人提供的，页面设计更为简洁大方，目前国内使用人群比 Hexo 少，所以遇到问题很难在百度上找到解决方案。现在也有很多主题从 Hexo 迁移到 Hugo，你有时能在两边看到相同的主题样式。</p><p>在配置 🚩 方面，<code>Hexo</code> 需要单独配置 Hexo 和主题，由于具有丰富的<a href="https://hexo.io/plugins/">插件</a>系统，如果想要添加新功能，前往插件市场下载安装即可，因而对插件依赖性很强。<code>Hugo</code> 可以在一份文档中合并配置 Hexo 和主题，没有插件系统，更加简洁，如果想要自定义，需要熟悉一些 CSS 和 JS 语法。</p><p>在灵活性 🙆‍♀️ 方面，Hugo 具有和主题同样的目录，如果你对主题某些页面不满意，可以在 Hugo 根目录创建相同的文件，修改覆盖即可，这对主题更新十分友好，同时它还支持本地实时预览，即一边修改配置文件，一边预览修改效果。Hexo 目前不支持实时预览，需要刷新或者重新执行本地预览命令才能看到修改后的效果，如果你想要修改主题的某些页面，也不支持覆盖（除了 CSS 和 JS），需要进入主题目录进行修改，这就会对主题更新有一定程度的影响。</p><p>在迁移 🤝 方面，<code>Hugo</code> 配置文件有 TOML（主要）、YAML、JSON 三种格式，<code>Hexo </code>配置文件有 YAML（主要）、JSON 两种格式。不仅如此，两者文章的 <code>Front Matter </code>参数也存在差异，如果你要互相迁移，就需要使用脚本或者手动修改相应的格式和 Front Matter 参数，主要花费的是时间成本。但我更建议的是，单独建立两个站点，因为我也曾经在他们之间反复横跳，浪费了不少时间和精力，倒不如利用子域名的特性，将其中一个变为子站点，更为省功夫。</p><h2 id="搭建教程"><a href="#搭建教程" class="headerlink" title="搭建教程"></a>搭建教程</h2><p>博客是个人表达的方式之一，搭建博客是实现这种目的路径之一。每个人都有自己独特的表达方式，我选用博客，是因为我更喜欢文字的表达，我选用自建博客，是因为我好奇我能不能做得到，在此之前我从未学习过 WEB 语言。</p><p>总的来说，静态博客操作起来还是比较繁琐的，一旦失败有可能要重头再来，但是当网页成功搭建的时候又是满满的成就感。所以，我建议你在操作之前能找到适合自己的表达方式，适合自己的才是最好的。</p><p>如果是新手的话，我更推荐先使用 Hugo，再使用 Hexo。我最初使用的是 Hexo，但是因为要同时配置 Hexo 和主题，配置完成后我都累了，而且经常飘红，搜索网页打开一个又一个才能解决。后来才发现了 Hugo，它建站很容易上手，当然这只是指使用 <a href="https://hugoloveit.com/zh-cn/">LoveIt</a>、<a href="https://hugodoit.pages.dev/zh-cn/">DoIt</a>、<a href="https://fixit.lruihao.cn/zh-cn/">FixIt</a> 这几个同源主题，它们有中文用户操作文档，而且配置文件只有一个 <code>config.toml</code>，只需要对照着主题文档修改就可以了。</p><p>需要注意的是，并不是所有 Hugo 主题都只有一个配置文件，有的主题是从别的生成器迁移过来的，尚未稳定，有的主题有好几个配置文件，操作比较繁琐，同样也并不是所有主题都有中文用户操作文档（<del>小声哔哔：感觉用完 Hugo，我需要报个英语班</del>）。</p><p>至于为什么现在用的是 Hexo，是因为我更喜欢左右布局的网页样式，Hugo 虽然也有，但是感觉离我的理想还差一点味道，当我从 Hugo 再回到 Hexo，我感觉操作轻松了不少，对静态博客的操作更熟悉了些。至于以后会不会再跳，我前文也已经说了，我更倾向于建立两个站点，新旧交接也算是一种历史的变迁嘛。</p><p>如果你使用 <a href="https://hexo.io/zh-cn/">Hexo</a> 搭建博客，推荐阅读「 <a href="https://zyuyu.top/hexo-build/">适合小白！基于 Hexo + Butterfly 搭建个人博客</a> 」这篇文章。</p><p>如果你使用 <a href="https://www.gohugo.cn/">Hugo</a> 搭建博客，推荐阅读「 <a href="https://zyuyu.top/hugo-build/">简单易上手！基于 Hugo + DoIt 搭建个人博客</a> 」这篇文章。</p><p>In the end，I wish you everything goes well ！💖💖💖</p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://hexo.io/zh-cn/">Hexo 官方网站</a></li><li><a href="https://www.gohugo.cn/">Hugo 官方网站</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Hugo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超实用！写文章必备的 Markdown 速查手册</title>
      <link href="/markdown/"/>
      <url>/markdown/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Markdown 格式的首要设计目标是更具可读性，最初的想法是 Markdown 格式的文档应当以纯文本形式发布，而不会看起来像被标签或格式说明所标记。虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响，但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式。</p><p>—— John Gruber</p></blockquote><p>Markdown 是一种轻量级标记语言，创始人为约翰 · 格鲁伯（John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML 或者 HTML 文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p><p>由于 Markdown 的轻量化、易读易写特性，并且对于图片、图表、数学公式都有支持，许多网站都广泛使用 Markdown 来撰写帮助文档或用于论坛上发表消息。</p><p>通俗来讲，Markdown 是一种文本书写方式，通过编辑器将文本生成网页，就好比 Office，你可以通过 Word 将文本排版成文，通过 Excel 将文本构图成表，通过 PPT 将文本演示表达。</p><p><img src="/../images/markdown/image-20221105184014721.png" alt="Markdown"></p><h2 id="编辑工具"><a href="#编辑工具" class="headerlink" title="编辑工具"></a>编辑工具</h2><table><thead><tr><th align="center">类型</th><th>工具</th></tr></thead><tbody><tr><td align="center">编辑器</td><td>1️⃣ OSX：<a href="https://www.typora.io/">Typora</a>；<a href="http://bywordapp.com/">Byword</a>；<a href="http://ia.net/writer/">iA Writer</a>；<a href="http://mouapp.com/">Mouapp</a>；<a href="http://www.texts.io/">TEXTS</a>；<a href="http://kobito.qiita.com/">Kobito</a><br>2️⃣ Windows：<a href="https://www.typora.io/">Typora</a>；<a href="http://markdownpad.com/">MarkdownPad</a>；<a href="http://www.texts.io/">TEXTS</a><br>3️⃣ iOS：<a href="http://bywordapp.com/">Byword</a>；<a href="http://ia.net/writer/">iA Writer</a><br>4️⃣ 通用文字编辑器：<a href="http://www.sublimetext.com/">Sublime Text</a>；<a href="plasticboy/vim-markdown">plasticboy&#x2F;vim-markdown</a>；<a href="tpope/vim-markdown">tpope&#x2F;vim-markdown</a><br>5️⃣ 在线编辑器：<a href="https://markdown.com.cn/editor/">markdown</a>；<a href="http://codemirror.net/">CodeMirror</a>；<a href="http://dillinger.io/">Dillinger</a>；<a href="https://github.com/bianchimro/markgiu">Markgiu</a><br>6️⃣ 浏览器拓展：<a href="https://github.com/adam-p/markdown-here/">Markdown Here</a></td></tr><tr><td align="center">扩展</td><td><a href="https://help.github.com/articles/github-flavored-markdown">GitHub Flavored Markdown</a>；<a href="http://fletcherpenney.net/multimarkdown/">MultiMarkdown</a>；<a href="http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown">Pandoc’s markdown</a>；<a href="http://michelf.ca/projects/php-markdown/extra/">PHP Markdown Extra</a></td></tr><tr><td align="center">引擎</td><td>1️⃣ C：<a href="https://github.com/vmg/sundown">Sundown</a><br>2️⃣ JavaScript：<a href="https://github.com/cky/wmd">showdown</a>；<a href="https://code.google.com/p/pagedown/">pagedown</a>；<a href="coreyti/showdown">coreyti&#x2F;showdown</a>；<a href="https://github.com/chjj/marked">marked</a><br>3️⃣ PHP：<a href="http://michelf.ca/projects/php-markdown/">PHP Markdown</a><br>4️⃣ Ruby：<a href="https://github.com/vmg/redcarpet">Redcarpet</a>；<a href="https://github.com/bhollis/maruku">Maruku</a></td></tr></tbody></table><h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><table><thead><tr><th align="center">名称</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center"><a href="https://daringfireball.net/projects/markdown/">John Gruber’s Markdown documentation</a></td><td align="center">Markdown 的创建者编写的原始指南</td></tr><tr><td align="center"><a href="https://www.markdowntutorial.com/">Markdown Tutorial</a></td><td align="center">在线使用 Markdown 的开源网站</td></tr><tr><td align="center"><a href="https://github.com/mundimark/awesome-markdown">Awesome Markdown</a></td><td align="center">Markdown 工具和学习资源列表</td></tr><tr><td align="center"><a href="https://dave.autonoma.ca/blog/2019/05/22/typesetting-markdown-part-1">Typesetting Markdown</a></td><td align="center"><a href="https://pandoc.org/">pandoc</a> 和 <a href="https://www.contextgarden.net/">ConTeXt</a> 对 Markdown 排版的系列教程</td></tr></tbody></table><h2 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h2><p>以下列举了 Markdown 文件格式的常用语法，但并非所有的 Markdown 编辑器都支持下面的语法，使用的时候请注意。你可以无需记忆这些 Markdown 语法，现在的 Markdown 编辑器可以做到像 Word 一样，点击功能区或者按击快捷键即可生成效果。</p><table><thead><tr><th align="center">作用</th><th>语法</th></tr></thead><tbody><tr><td align="center">标题</td><td>在文本前添加一个 <code>#</code> 和<code>空格</code>，<code>#</code> 表示标题的级别，如 <code># H1</code>、<code>## H2</code>、<code>### H3</code>。</td></tr><tr><td align="center">段落</td><td>按照纯文本的方式书写段落即可。</td></tr><tr><td align="center">换行</td><td>行末添加两个或多个空格，然后按回车键即可，或者直接键入 HTML 语法 <code>&lt;br&gt;</code>。</td></tr><tr><td align="center">强调</td><td>1️⃣ 粗体：在文本前后各添加两个 <code>*</code>，如 <code>**加粗**</code>。<br>2️⃣ 斜体：在文本前后各添加一个 <code>*</code>，如 <code>*倾斜*</code>。<br>3️⃣ 粗斜体：在文本前后各添加三个 <code>*</code>，如 <code>***加粗和倾斜***</code>。<br>4️⃣ 删除线：在文本前后各添加两个 <code>~</code>，如 <code>~~删除文本~~</code>。</td></tr><tr><td align="center">引用</td><td>1️⃣ 块引用：在段落前添加一个 <code>&gt;</code> 符号和<code>空格</code>，如 <code>&gt; 块引用</code>。<br>2️⃣ 嵌套引用：在要嵌套的段落前添加两个 <code>&gt;</code> 符号和<code>空格</code>，示例如下。<br><code>&gt; 块引用</code><br><code>&gt;</code><br><code>&gt;&gt; 嵌套引用</code><br>⚡⚡⚡ 注意：块引用可以包含 Markdown 格式的其他元素，如标题、强调、列表等，但并非所有元素都可以使用，使用时请注意。</td></tr><tr><td align="center">列表</td><td>1️⃣ 有序列表：在文本前添加数字并紧跟一个英文句点，注意英语句点和文本之间要有一个空格，若要创建二级有序列表，则在数字前面添加两个空格即可，示例如下。<br><code>1. 第一项</code><br><code>2. 第二项</code><br><code>3. 第三项</code><br>2️⃣ 无序列表：在文本前添加一个 <code>-</code>和空格，若要创建二级无序列表，则在<code>-</code>前面添加两个空格即可，示例如下。<br><code>- 第一项</code><br><code>- 第二项</code><br><code>- 第三项</code><br>3️⃣ 任务列表：在文本前添加 <code>-</code> + 空格 + <code>[ ]</code>，注意方括号和文本之间也要有一个空格，若方括号内不是空格，而是 <code>x</code>，则表示已勾选的任务，示例如下。<br><code>- [x] 第一项任务</code><br><code>- [ ] 第二项任务</code><br><code>- [ ] 第三项任务</code></td></tr><tr><td align="center">表格</td><td>1️⃣ 基本方法：使用三个或多个 <code>---</code> 创建每列的标题，并使用 <code>|</code> 分隔每列，示例如下。<br><code> | 姓名   | 成绩   |</code><br><code> | :--------  | :---------: |</code><br><code> | 小明   | 88    |</code><br><code> | 小红   | 99    |</code><br>2️⃣ 文本对齐：在<code>---</code>的左侧，右侧或两侧添加<code>:</code>，即可实现单列左对齐、右对齐或居中。<br>3️⃣ 文本格式：表格内支持超链接、行内代码、强调等语法，不支持添加标题、块引用、列表等语法。</td></tr><tr><td align="center">代码</td><td>1️⃣ 行内代码：在文本前后各添加一个反引号( <code>`</code>)，如 <code>`code`</code>。<br>2️⃣ 代码块：文本的每一行缩进至少四个空格或一个制表符。<br>3️⃣ 围栏式代码块：无需缩进的代码块，在段落前后各添加三个反引号( <code>`</code>)，若在第一组的三个反引号后面有标注代码语言，渲染时则会高亮文本，突出显示，示例如下。<br><code>```json</code><br><code>&#123;</code><br>  <code> &quot;firstName&quot;: &quot;John&quot;,</code><br>  <code> &quot;lastName&quot;: &quot;Smith&quot;,</code><br>  <code> &quot;age&quot;: 25</code><br><code>&#125;</code><br><code>```</code></td></tr><tr><td align="center">分割线</td><td>在单独的一行内使用是三个或多个 <code>---</code>，并且不能包含其它内容。</td></tr><tr><td align="center">链接</td><td>1️⃣ 链接文本：<code>[超链接显示名](超链接地址 &quot;超链接标题&quot;)</code>，超链接标题可有可无，如<code>[title](https://www.example.com)</code>。<br>2️⃣ 可点击的链接：<code>&lt;超链接地址&gt;</code>，如 <code>&lt;fake@example.com&gt;</code>。<br>3️⃣ 强调链接：在基本链接语法前后增加 <code>*</code> 来加粗或倾斜。<br>4️⃣ 引用样式链接：可作为尾注或脚注，由两部分组成：<br>第一部分：<code>[超链接显示名][超链接标签]</code>，超链接标签不区分大小写，可以包含字母、数字、空格或标点符号，如 <code>[hobbit-hole][1]</code>。<br>第二部分：<code>[超链接标签]: 超链接的地址 &quot;超链接标题&quot;</code>，超链接标题可有可无，如 <code>[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle</code>。</td></tr><tr><td align="center">脚注</td><td>脚注的作用在于添加注释和参考，由两部分组成：<br>第一部分：<code>文本内容[^标识符]</code>，标识符支持数字和单词，不支持空格或制表符，如 <code>文本内容[^1]</code>。<br>第二部分：<code>[^标识符]: 脚注内容 </code>，如 <code>[^1]: My footnote. </code>。</td></tr><tr><td align="center">图片</td><td>1️⃣ 普通图片：<code>![图片描述](图片链接 &quot;图片标题&quot;)</code>，图片标题可有可无，如 <code>![alt text](image.jpg)</code>。<br>2️⃣ 图片超链接：<code>[![图片描述](图片链接 &quot;图片标题&quot;)](超链接地址)</code>，图片标题可有可无，如 <code>[![alt text](image.jpg)](https://www.example.com)</code>。<br/>⚡⚡⚡ 注意：如果网站存在 <a href="https://github.com/aFarkas/lazysizes">lazysizes</a> 和 <a href="https://github.com/sachinchoolur/lightgallery.js">lightgallery.js</a> 两个依赖库，图片超链接可能不会生效。</td></tr><tr><td align="center">转义字符</td><td>在具有特殊含义的字符前加上 <code>\</code> 后，Markdown 编辑器在渲染排版效果时将展现其原始的含义，主要目的是避免语法冲突。</td></tr><tr><td align="center">内嵌 HTML 标签</td><td>1️⃣ 行内标签：直接在 Markdown 文件中使用 HTML 行内语法，如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 、<code>&lt;em&gt;</code>等。<br>2️⃣ 区块标签：直接在 Markdown 文件中使用 HTML 区块语法，如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等，必须在前后加上空行，以便于内容区分，但注意Markdown 语法在 HTML 区块标签中将不会被进行处理。</td></tr><tr><td align="center">Emoji</td><td>从 <a href="https://emojipedia.org/">Emojipedia</a> 等来源复制并粘贴表情符号到 Markdown 格式的文本中，或者键入 emoji 简码，如 <code>:joy:</code>。Windows 系统用户可以按住 <code>win+.</code> 获取微软的 emoji 表情。</td></tr></tbody></table><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><p><a href="https://markdown.com.cn/">Markdown 官方教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Hugo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
