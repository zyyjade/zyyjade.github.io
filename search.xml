<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>非程序猿的我，为什么要搭建自己的个人博客？</title>
      <link href="/blog-build/"/>
      <url>/blog-build/</url>
      
        <content type="html"><![CDATA[<p>有人可能会问，你为什么要自己搭建博客？明明有公众号、简书、知乎那么多平台，何必折腾呢？</p><p>在回答这个问题之前，我希望你可以回想一下当遇到一些问题时，是不是会下意识地打开搜索引擎？然后过了很长一段时间，当你再碰到类似的问题，你是不是又打开搜索引擎再搜索？如此循环往复，时间和精力都被浪费掉了，而且还不一定能找到之前看到的答案。</p><p>但是，如果我拥有自己的知识库，将遇到过的问题记录下来，那么下次再遇到的时候，我只要在里面搜索一下，不就能立刻得到我想要的答案了嘛！😋😋😋 而搜索引擎应该在知识发现上发光发热！</p><p>所以，我希望的是能够建立自己个人的知识库，它具有我想要的功能，可以最大限度地自定义我的内容，而自建博客网站恰好是实现这一目的的方式。</p><p>搭建博客难吗？说难也难，因为你正在接触一件新事物，人们容易对新事物产生不适感。说容易也很容易，不会代码，不是程序员，只要会下载软件和打字，你就能自己搭建一个静态博客。</p><p><img src="/../images/blog-build/biaoqing.gif" alt="表情包"></p><h2 id="静态博客"><a href="#静态博客" class="headerlink" title="静态博客"></a>静态博客</h2><p>一个网站最基础的部分就是网页，如果要从 HTML 页面写起，显然成本太高，而博客生成器就很好地解决了网页编写的问题。一般来说，博客生成器分为静态和动态两种，目前比较流行的静态博客生成器有 <a href="https://hexo.io/zh-cn/">Hexo</a>、<a href="https://www.gohugo.cn/">Hugo</a>、<a href="https://www.vuepress.cn/">Vuepress</a>、<a href="https://www.jekyll.com.cn/">Jekyll</a> 等，动态博客生成器有 <a href="https://wordpress.org/">WordPress</a>、<a href="https://typecho.org/">Typecho</a>、<a href="https://halo.run/">Halo</a>、<a href="https://b3log.org/solo/">Solo</a> 等。</p><p>动态博客以数据库技术为基础，有前端和后端，后端可以用各种技术实现各种交互，功能更强，但是开发复杂。静态博客是纯前端的界面，没有登录功能和后端管理，功能更简单，比较好上手，比如本博客就是一个静态博客。</p><p>静态博客非常适合专注于内容的网站，通过静态网站生成器，你可以很简单地构建一个静态博客。由于目前我只使用过 <a href="https://hexo.io/zh-cn/">Hexo</a> 和 <a href="https://www.gohugo.cn/">Hugo</a> ，所以主要讲讲它们的使用体验。</p><p><img src="/../images/blog-build/image-20221111024113623.png" alt="Hugo和Hexo"></p><table><thead><tr><th align="center"></th><th align="center">Hexo</th><th align="center">Hugo</th></tr></thead><tbody><tr><td align="center">开发语言</td><td align="center">Node.js</td><td align="center">Go</td></tr><tr><td align="center">编译速度</td><td align="center">快</td><td align="center">很快</td></tr><tr><td align="center">主题丰富度</td><td align="center">很多</td><td align="center">多</td></tr><tr><td align="center">中文社区支持</td><td align="center">很好</td><td align="center">好</td></tr><tr><td align="center">自定义程度</td><td align="center">灵活</td><td align="center">更灵活</td></tr></tbody></table><p>在编译 🌍 方面，<code>Hugo</code> 是基于 <a href="https://baike.baidu.com/item/go/953521?fromtitle=Go%E8%AF%AD%E8%A8%80&fromid=3246011&fr=aladdin">Go</a> 语言编写的静态博客生成器，页面编译（生成）速度非常快，只需要几分之一秒就可以渲染一个经典的中型网站。<code>Hexo</code> 是基于 <a href="https://baike.baidu.com/item/node.js/7567977?fr=aladdin">Node.js</a> 语言编写的静态博客生成器，页面编译（生成）速度也快，但是没有 Hugo 快。在这一点上，你可以将页面编译的过程交给 GitHub Actions 自动完成，在一定程度上可以避免因速度产生的体验差异。</p><p>在主题 🎨 方面，<code>Hexo</code> 是由国人开发的，具有丰富的<a href="https://hexo.io/themes/">主题</a>，主题更符合国人的审美，如果你在配置主题时遇到困难，在百度搜索 <code>Hexo+主题名称</code> 就能获得解决方法。<code>Hugo</code> 是由外国人开发的，大多数的<a href="https://themes.gohugo.io/">主题</a>也是由外国人提供的，页面设计更为简洁大方，目前国内使用人群比 Hexo 少，所以遇到问题很难在百度上找到解决方案。</p><p>在配置 🚩 方面，<code>Hexo</code> 需要单独配置 Hexo 和主题，由于具有丰富的<a href="https://hexo.io/plugins/">插件</a>系统，如果想要添加新功能，前往插件市场下载安装即可，因而对插件依赖性很强。<code>Hugo</code> 可以在一份文档中合并配置 Hexo 和主题，没有插件系统，更加简洁，如果想要自定义，需要熟悉一些 CSS 和 JS 语法。</p><p>在灵活性 🙆‍♀️ 方面，Hugo 具有和主题同样的目录，如果你对主题某些页面不满意，可以在 Hugo 根目录创建相同的文件，修改覆盖即可，这对主题更新十分友好，同时它还支持本地实时预览，即一边修改配置文件，一边预览修改效果。Hexo 目前不支持实时预览，需要刷新或者重新执行本地预览命令才能看到修改后的效果，如果你想要修改主题的某些页面，也不支持覆盖（除了 CSS 和 JS），需要进入主题目录进行修改，这就会对主题更新有一定程度的影响。</p><p>在迁移 🤝 方面，<code>Hugo</code> 配置文件有 TOML（主要）、YAML、JSON 三种格式，<code>Hexo </code>配置文件有 YAML（主要）、JSON 两种格式。不仅如此，两者文章的 <code>Front Matter </code>参数也存在差异，如果你要互相迁移，就需要使用脚本或者手动修改相应的格式和 Front Matter 参数，主要花费的是时间成本。但我更建议的是，单独建立两个站点，因为我也曾经在他们之间反复横跳，浪费了不少时间和精力，倒不如利用子域名的特性，将其中一个变为子站点，更为省功夫。</p><h2 id="搭建教程"><a href="#搭建教程" class="headerlink" title="搭建教程"></a>搭建教程</h2><p>博客是个人表达的方式之一，搭建博客是实现这种目的路径之一。每个人都有自己独特的表达方式，我选用博客，是因为我更喜欢文字的表达，我选用自建博客，是因为我好奇我能不能做得到，在此之前我从未学习过 WEB 语言。</p><p>总的来说，静态博客操作起来还是比较繁琐的，一旦失败有可能要重头再来，但是当网页成功搭建的时候又是满满的成就感。所以，我建议你在操作之前能找到适合自己的表达方式，适合自己的才是最好的。</p><p>如果是新手的话，我更推荐先使用 Hugo，再使用 Hexo。我最初使用的是 Hexo，但是因为要同时配置 Hexo 和主题，配置完成后我都累了，而且经常飘红，搜索网页打开一个又一个才能解决。后来才发现了 Hugo，它建站很容易上手，当然这只是指使用 <a href="https://hugoloveit.com/zh-cn/">LoveIt</a>、<a href="https://hugodoit.pages.dev/zh-cn/">DoIt</a>、<a href="https://fixit.lruihao.cn/zh-cn/">FixIt</a> 这几个同源主题，它们有中文用户操作文档，而且配置文件只有一个 <code>config.toml</code>，只需要对照着主题文档修改就可以了。</p><p>需要注意的是，并不是所有 Hugo 主题都只有一个配置文件，有的主题是从别的生成器迁移过来的，尚未稳定，有的主题有好几个配置文件，操作比较繁琐，同样也并不是所有主题都有中文用户操作文档（<del>小声哔哔：感觉用完 Hugo，我需要报个英语班</del>）。</p><p>至于为什么现在用的是 Hexo，是因为我更喜欢左右布局的网页样式，Hugo 虽然也有，但是感觉离我的理想还差一点味道，当我从 Hugo 再回到 Hexo，我感觉操作轻松了不少，对静态博客的操作更熟悉了些。至于以后会不会再跳，我前文也已经说了，我更倾向于建立两个站点，新旧交接也算是一种历史的变迁嘛。</p><p>如果你使用 <a href="https://hexo.io/zh-cn/">Hexo</a> 搭建博客，推荐阅读「 <a href="https://zyuyu.top/hexo-build/">适合小白！基于 Hexo + Butterfly 搭建个人博客</a> 」这篇文章。</p><p>如果你使用 <a href="https://www.gohugo.cn/">Hugo</a> 搭建博客，推荐阅读「 <a href="https://zyuyu.top/hugo-build/">简单易上手！基于 Hugo + DoIt 搭建个人博客</a> 」这篇文章。</p><p>In the end，I wish you everything goes well ！💖💖💖</p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://hexo.io/zh-cn/">Hexo 官方网站</a></li><li><a href="https://www.gohugo.cn/">Hugo 官方网站</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Hugo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名太长？三步搞定 GitHub Pages 自定义域名</title>
      <link href="/domain-name/"/>
      <url>/domain-name/</url>
      
        <content type="html"><![CDATA[<p>GitHub Pages 是直接从 GitHub 存储库托管的静态站点。 当你使用 Hexo 或 Hugo 等静态博客生成器生成静态网站文件，并部署到 GitHub 仓库时，你将获得域名后缀为 <code>.github.io</code> 的网址。</p><p>GitHub 支持自定义域名，你可以设置一个具有自己风格的域名，让你的网站更有辨识度。域名是由一串用点分隔的名字组成的 Internet 上某一台计算机或计算机组的名称，如我们常见的 <code>.com</code>、<code>.cn</code> 等。简单来说，域名就好像门牌号码一样，具有唯一性，可以在纷繁芜杂的网络世界里准确无误地把我们指引到我们要访问的站点。</p><p><img src="/../images/domain-name/image-20221110005301669.png" alt="域名"></p><p>根据国家工信部信息服务管理规定，在国内服务器上放置的所有网站都必须备案才能正常访问，但是对于国外的服务器或者港澳台的服务器，如本文提到的 GitHub 服务器，就不需要备案。下面的操作以 GitHub 服务器为例。</p><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>域名是由域名管理局统一管理的，管理是需要成本的，如技术成本、人力成本等，所以你想拥有一个具有自己风格的域名，就需要前往<a href="https://www.aliyun.com/">阿里云</a>或<a href="https://buy.cloud.tencent.com/domain?from=console">腾讯云</a>等服务商购买。下面的操作以阿里云为例。</p><p>如果你有支付宝账号，注册账号的时候直接用支付宝扫描登录，还可以顺带连着实名注册一起弄了。如果你没有支付宝账号，就按照账号注册流程一步步操作即可。</p><p>首次购买域名有优惠活动，1 元就能购买一个为期一年的域名。注册前先去阿里云旗下的<a href="https://wanwang.aliyun.com/?spm=5176.21213303.1158081.3.4f4553c927XLDo&scm=20140722.S_card@@%E5%95%86%E5%93%81@@212429.S_card0.ID_card@@%E5%95%86%E5%93%81@@212429-RL_%E5%9F%9F%E5%90%8D-OR_ser-V_2-P0_0">万网</a>查询域名，看看想要注册的域名有没有被注册，根据自己的需求选择自己喜欢的后缀，点击购买。如果你的域名要长期使用，建议可以先看看<a href="https://wanwang.aliyun.com/help/price.html?spm=5176.22941859.J_9989412330.9.10ee1838DLcc7f">不同域名的续费价格</a>再选择。</p><p>需要注意的是，阿里云从 2022 年 2 月 15 日起域名注册必须使用已完成实名认证信息模板，点击 <code>创建信息模板</code> 完成操作，其实就是域名的实名认证，实名审核由域名注册局完成，非阿里云进行审核，一般 1 天内可完成审核，部分可能需要 3 至 5 个工作日。</p><p><img src="/../images/domain-name/2022-10-07_223523.png" alt="创建信息模板"></p><p>完成审核并购买域名后，进入域名控制台。等待几分钟后刷新，当看到状态变成正常，就可以开始域名解析了，这中间域名注册局会对域名持有者进行实名认证，一般几分钟就可以了。</p><p><img src="/../images/domain-name/2022-10-08_161653.png" alt="购买域名"></p><h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h2><p>域名解析是将域指向网站空间 IP，让人们通过注册的域名可以方便地访问到网站的一种服务。简单来说，这是一个将你的网站服务器（GitHub）与域名连接起来的过程。</p><p>打开阿里云的域名控制台，点击「 解析 」，进入云解析 DNS 页面，点击「 添加记录 」，如下图添加两条记录，其中 <code>CNAME</code> 为了是将 <code>github.io</code> 重定向到你的自定义域名，添加 <code>@</code> 和 <code>www</code> 主机记录是为了让你的域名有没有 <code>www</code> 都可以访问，记录值为 <code>用户名.github.io</code>。</p><p><img src="/../images/domain-name/2022-10-08_194232.png" alt="域名解析"></p><p>此时，还不能使用自定义域名访问网站，还需要将它与 GitHub 仓库连接。</p><h2 id="配置仓库"><a href="#配置仓库" class="headerlink" title="配置仓库"></a>配置仓库</h2><p>GitHub 自定义域名需要在仓库内创建「 CNAME 」，你既可以在仓库直接创建，也可以在本地 Hexo 或 Hugo 根目录中创建。无论是哪种方式，在「 CNAME 」中的域名都不要添加 <code>www</code>。</p><p>如果你直接在仓库内创建，要注意同步本地和远程仓库。前往仓库的「 Settings -&gt; Pages 」，拉到「 Custom domain 」，在这里输入你的自定义域名，或者在仓库的「 Code 」处点击 <code>Add file</code> 创建「 CNAME 」，并在里面输入你的自定义域名。</p><p><img src="/../images/domain-name/2022-10-08_163353.png" alt="创建CNAME"></p><p>等待几分钟之后，刷新页面，出现 <code>DNS check successful</code> 则表示域名解析成功，同时勾选下面的 <code>Enforce HTTPS</code>，这是因为 HTTPS 提供了一层加密，以防止别人窥探或篡改到你的网站流量。您可对 GitHub Pages 站点强制实施 HTTPS，从而将所有 HTTP 请求透明地重定向到 HTTPS。</p><p><img src="/../images/domain-name/2022-10-08_194945.png" alt="DNS"></p><p>如果你在本地创建，也有两种情况。如果你只将「 Public 」的静态网站文件托管到 GitHub 仓库，那么你只需要将「 CNAME 」放在 Hexo 或 Hugo 根目录，每次执行部署命令之前，将该文件复制到「 Public 」中，然后托管到仓库即可。</p><p>如果你按照 <a href="https://zyuyu.top/hexo-workflows">只专注写作！GitHub Actions 自动部署博客</a>的步骤将整个网站源代码都托管到了 GitHub 仓库，就需要将「 CNAME 」放到 Hexo 或 Hugo 的资源文件夹中，Hexo 对应的是 <code>/source/CNAME</code>，Hugo 对应的是 <code>/content/CNAME</code>，托管到仓库之后 GitHub Actions 就会自动完成 DNS 的过程。</p><p>最后，你就可以使用自定义域名访问你的博客啦！撒花撒花 ✿✿ヽ(°▽°)ノ✿~~</p><p>💡 TIP：记得同步修改 Hexo 或 Hugo 配置文件的 <code>url</code> 或 <code>baseURL</code>。</p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://wanwang.aliyun.com/help/price.html?spm=5176.22941859.J_9989412330.9.10ee1838DLcc7f">万网域名价格总览</a></li><li><a href="https://docs.github.com/cn/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site">GitHub Pages 文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Hugo </tag>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>只专注写作！GitHub Actions 自动部署博客</title>
      <link href="/workflows/"/>
      <url>/workflows/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在 GitHub Actions 的仓库中自动化、自定义和执行软件开发工作流程。 您可以发现、创建和共享操作以执行您喜欢的任何作业（包括 CI／CD），并将操作合并到完全自定义的工作流程中。</p><p>—— GitHub Actions</p></blockquote><p>回想一下，当我们在本地写完一篇文章时，既要执行 Hexo 或 Hugo 的命令，生成静态页面，还要执行 Git 的命令，推送静态页面到远程仓库，这无疑加重了我们写作的负担！😫😫😫 特别是 Hexo，当你文章超过 100 篇时，再加上一堆依赖（插件），生成页面要等待好几分钟，这就大大浪费了我们的时间。</p><p>难道就有没有比较简单的方法，能让我们只专注于写作，只需要写完上传就行了吗？</p><p><a href="https://docs.github.com/cn/actions">GitHub Actions</a> 是一个持续集成和持续交付的平台，可以自动化构建、测试和部署。通过它，你可以实现像在其它自媒体平台中那样，写作 + 上传即可，大大地节省了你的时间和精力。</p><p><img src="/../images/workflows/image-20221109185020857.png" alt="nice"></p><h2 id="创建空仓库"><a href="#创建空仓库" class="headerlink" title="创建空仓库"></a>创建空仓库</h2><p>GitHub 仓库有两种类型，一种是公有仓库，另一种是私有仓库。如果你要创建可以被访问的网页，即 <code>GitHub Pages</code>，就需要将源代码放在公有仓库。而私有仓库可以进行权限控制，只有拥有权限的人才能访问并修改它，也就是说，别人是看不到的你的私有仓库的。</p><p>利用 GitHub 仓库的特性，你可以在 GitHub 创建两个空仓库，一个私有仓库存放博客源码，如<code>owner/blog</code> ，下面简称私库，一个公开仓库存放生成的 <code>public</code> 文件，如<code>owner/owner.github.io</code> ，下面简称公库。</p><p><img src="/../images/workflows/image-20221109183019506.png" alt="私库和公库"></p><p>如此一来，你上传的文章的源文件既不会被人看到，还能够根据设置密钥对连接私库和公库，当私库中有内容更新的时候，GitHub Actions 将自动生成文件到公库，公库也会自动生成页面。</p><h2 id="创建密钥对"><a href="#创建密钥对" class="headerlink" title="创建密钥对"></a>创建密钥对</h2><p>首先，在任意位置键入 <code>win+R</code> 调出运行，输入 <code>cmd</code>，并执行以下命令，获取 SSH 密钥对。</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ssh-keygen -f github-deploy-key</span><br></pre></td></tr></table></figure><p>此命令会生成 <code>github-deploy-key</code> 和 <code>github-deploy-key.pub</code>两个文件，一般位于 <code>C:\Users\用户名</code> 中。注意，如果你要创建多对密钥对，记得要将 <code>github-deploy-key</code> 更改为其他单词，如 <code>hugo-deploy-key</code>，否则它会覆盖掉之前的密钥对。</p><p>如果你不想它们存放于 C 盘的用户文件夹中，也可以在指定位置，右键单击 <code>Git Bash Here</code>，执行上述命令，获取 SSH 密钥对。但注意，请不要将密钥对存放于本地 Hexo 或 Hugo 的仓库中。</p><p>接下来，在建立的私库中，打开「 Settings -&gt; Secrets -&gt; Actions -&gt; Actions secrets 」，点击 <code>New repository secret</code>，将  <code>github-deploy-key</code> 中的所有内容复制到 <code>Secret</code>中，<code>Name</code>填写 <code>ACTIONS_DEPLOY_KEY</code>。</p><p><img src="/../images/workflows/gYjfSjXNc1.png" alt="actions secrets"></p><p>在建立的公库中，打开「 Settings -&gt; Secrets -&gt; Deploy keys 」，点击 <code>Add deploy key</code>，将  <code>github-deploy-key.pub</code> 中的所有内容复制到 <code>Secret</code>中，<code>Name</code>填写 <code>ACTIONS_DEPLOY_KEY</code>。</p><p><img src="/../images/workflows/IHqJRfd9i7.png" alt="deploy keys"></p><h2 id="创建工作流"><a href="#创建工作流" class="headerlink" title="创建工作流"></a>创建工作流</h2><p>SSH 密钥对配置好后，在 Hexo 或 Hugo 根目录中创建 <code>.github\workflows\deploy.yml</code>，将下面的内容复制到里面，并根据自己的情况修改其中的内容。</p><p>Hexo 请复制这个 👇：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">owner</span> <span class="comment"># 请修改为你的用户名</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="string">example@qq.com</span> <span class="comment"># 请修改为你的用户邮箱</span></span><br><span class="line">  <span class="attr">THEME_REPO:</span> <span class="string">jerryc127/hexo-theme-butterfly</span> <span class="comment"># 请修改为你的主题仓库</span></span><br><span class="line">  <span class="attr">THEME_BRANCH:</span> <span class="string">master</span> <span class="comment"># 请修改为你的主题分支</span></span><br><span class="line">  <span class="attr">DEPLOY_REPO:</span> <span class="string">owner/blog</span> <span class="comment"># 请修改为你的公库</span></span><br><span class="line">  <span class="attr">DEPLOY_BRANCH:</span> <span class="string">main</span> <span class="comment"># 请修改为你的公库分支</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># 请修改为你的私库分支</span></span><br><span class="line">    <span class="attr">paths-ignore:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">README.md</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查仓库分支</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">main</span> <span class="comment"># 请修改为你的私库分支</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查主题仓库分支</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_REPO</span> <span class="string">&#125;&#125;</span> </span><br><span class="line">        <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">themes/butterfly</span> <span class="comment"># 请修改为你的主题名称</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;16.x&quot;</span> <span class="comment">#请修改为你所用的node版本，如12.X、16.X</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        export TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">        npm install hexo-cli -g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span> <span class="comment"># 请填写你安装的所有依赖的执行命令</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">--save</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-renderer-pug</span> <span class="string">hexo-renderer-stylus</span> <span class="string">--save</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        hexo clean</span></span><br><span class="line"><span class="string">        hexo generate</span></span><br><span class="line"><span class="string"></span>        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署到Github</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_KEY</span> <span class="string">&#125;&#125;</span> <span class="comment"># DEPLOY_KEY要与前面的secrets名称一致</span></span><br><span class="line">        <span class="attr">external_repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_branch:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">        <span class="attr">user_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.GIT_USER</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">user_email:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.GIT_EMAIL</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Hugo 请复制这个 👇：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">owner</span> <span class="comment"># 请修改为你的用户名</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="string">example@qq.com</span> <span class="comment"># 请修改为你的用户邮箱</span></span><br><span class="line">  <span class="attr">THEME_REPO:</span> <span class="string">HEIGE-PCloud/DoIt</span> <span class="comment"># 请修改为你的主题仓库</span></span><br><span class="line">  <span class="attr">THEME_BRANCH:</span> <span class="string">main</span> <span class="comment"># 请修改为你的主题分支</span></span><br><span class="line">  <span class="attr">DEPLOY_REPO:</span> <span class="string">owner/blog</span> <span class="comment"># 请修改为你的公库</span></span><br><span class="line">  <span class="attr">DEPLOY_BRANCH:</span> <span class="string">main</span> <span class="comment"># 请修改为你的公库分支</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># 请修改为你的私库分支</span></span><br><span class="line">    <span class="attr">paths-ignore:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">README.md</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查仓库分支</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">main</span> <span class="comment"># 请修改为你的私库分支</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查主题仓库分支</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_REPO</span> <span class="string">&#125;&#125;</span> </span><br><span class="line">        <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">themes/DoIt</span> <span class="comment"># 请修改为你的主题名称</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hugo</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-hugo@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">hugo-version:</span> <span class="string">&#x27;latest&#x27;</span></span><br><span class="line">        <span class="attr">extended:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">hugo</span> <span class="string">--minify</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署到Github</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span> <span class="comment"># ACTIONS_DEPLOY_KEY要与前面的secrets名称一致</span></span><br><span class="line">        <span class="attr">external_repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_branch:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">        <span class="attr">user_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.GIT_USER</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">user_email:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.GIT_EMAIL</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>需要说明的是，由于 Hexo 需要安装依赖，但 <code>node_modules</code> 依赖包过大，一般不会上传到 GitHub 仓库中，所以创建工作流时要加入「 安装依赖 」这一步骤，这里要将你安装的依赖（插件）的所有命令都写上去。</p><p>简单来说，创建工作流其实就是将你在本地的所有操作命令都放到了 GitHub Actions，让 GitHub 帮你完成，包括 Hexo 或 Hugo 的相关命令，但这不意味着你本地仓库就可以删掉了，为了避免风险，建议你还是要保留本地仓库。工作流创建的语法也比较好理解，你还可以自行阅读 <a href="https://docs.github.com/cn/actions">GitHub Actions 官方文档</a> 创建自己的工作流。</p><p>工作流创建完成后，你只需要将 Hexo 或 Hugo 根目录所有的内容 <code>Push</code> 到私库即可。当你在异地时，只需要将仓库拉取到本地，或者直接在私库中 <code>Add File</code> 上传写好的文章就行了，而无需再次搭建环境，GitHub Actions 会自动帮你完成。至于怎么推送内容到仓库，你可以阅读「 <a href="https://zyuyu.top/hexo-build/">适合小白！基于 Hexo + Butterfly 搭建个人博客</a> 」或<a href="https://zyuyu.top/hugo-build/">简单易上手！基于 Hugo + DoIt 搭建个人博客</a> 」中关于部署博客部分的内容。</p><p>需要注意的是，这个 <code>deploy.yml</code> 并不是长期有效的，我曾在搜索引擎中搜索到了不少的 <code>workflows</code>，尝试失败了很多次，目前这份来自 <a href="https://www.gagahappy.com/github-actions-workflows-hexo/">@睡月花儿</a>。我觉得关键在于 <code>uses</code> 这个参数所使用的 <code>Actions</code> 操作，所以当你收到来自 GitHub 的失败邮件时，请自行前往 <a href="https://hexo.io/zh-cn/docs/github-pages">Hexo</a> 或 <a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">Hugo</a> 以及 <a href="https://github.com/marketplace">GitHub Actions Marketplace</a> 替换最新的 <code>uses</code>。</p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://docs.github.com/cn/actions">GitHub Actions 官方文档</a></li><li><a href="https://github.com/marketplace">GitHub Actions Marketplace</a></li><li><a href="https://docs.github.com/cn/repositories">GitHub Repositories 官方文档</a></li><li><a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">Hugo Host on GitHub</a></li><li><a href="https://hexo.io/zh-cn/docs/github-pages">Hexo Host on GitHub</a></li><li><a href="https://www.gagahappy.com/github-actions-workflows-hexo/">GitHub Actions Workflows 部署 Hexo</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Hugo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单易上手！基于 Hugo + DoIt 搭建个人博客</title>
      <link href="/hugo-build/"/>
      <url>/hugo-build/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://gohugo.io/">Hugo</a> 是 Go 编写的静态网站生成器，速度快，易用，可配置，只需要几分之一秒就可以渲染一个经典的中型网站，非常适合博客，文档等网站的生成。</p></blockquote><p>在开始之前，先说明一下我的构建环境：</p><table><thead><tr><th align="center"></th><th align="center">构建环境</th></tr></thead><tbody><tr><td align="center">操作系统</td><td align="center">Windows10 64bit</td></tr><tr><td align="center">Hugo extended 版本</td><td align="center">104.3.0</td></tr><tr><td align="center">DoIt 版本</td><td align="center">0.2.13</td></tr></tbody></table><p>最终的效果：<a href="https://zyuyu.top/blog/">张小鱼的储物间</a></p><h2 id="Step1-安装工具"><a href="#Step1-安装工具" class="headerlink" title="Step1  安装工具"></a>Step1  安装工具</h2><p>在开始搭建网站之前，建议安装 <a href="https://git-scm.com/">Git 工具</a>，它是一个版本管理控制系统软件，可以记录代码修改的每一个环节，就好比我们玩游戏存档。如果你打不开前面的链接，你还可以下载<a href="https://npm.taobao.org/mirrors/git-for-windows/v2.22.0.windows.1/Git-2.22.0-64-bit.exe">国内镜像</a>版本。</p><p>Hugo 的安装非常简单，只需要前往 <a href="https://github.com/gohugoio/hugo/releases">Hugo Releases</a> 下载你所使用的操作系统的最新版本的二进制文件即可，推荐下载 <code>Hugo Extended</code> 版本，因为部分主题的一些特性需要将 SCSS 转换为 CSS，使用该版本将获得更好的体验。下面的操作步骤以 Windows 10 64bit 为例。</p><p><img src="/../images/hugo-build/hugo.png" alt="下载hugo"></p><p>接着新建一个「 hugo 」文件夹，在它下面再新建「 bin 」文件夹，然后将下载的文件解压到新建的「 bin 」文件夹中。</p><p><img src="/../images/hugo-build/bin.png" alt="新建bin文件夹"></p><p>同时还要将 Hugo 添加到环境变量中，如果缺少这一步，Hugo 将无法运行。</p><p><img src="/../images/hugo-build/path.png" alt="环境变量"></p><p><img src="/../images/hugo-build/path2.png" alt="编辑环境变量"></p><blockquote><p>环境变量位于右键单击「 我的电脑 -&gt; 属性 -&gt; 高级 -&gt; 环境变量 」，或者按住 <code>win+R</code> 进入设置，选择「 系统 -&gt; 关于 -&gt; 高级系统设置 -&gt; 高级  -&gt; 环境变量 」。</p></blockquote><p>最后，你可以按住 <code>win+R</code>，输入 <code>cmd</code> ，进入命令提示符页面，执行 <code>hugo version</code> 即可验证是否成功。如果出现版本号，说明环境变量配置成功。</p><h2 id="Step2-创建网站"><a href="#Step2-创建网站" class="headerlink" title="Step2  创建网站"></a>Step2  创建网站</h2><p>前一步完成后，我们打开刚刚新建的「 Hugo 」文件夹，然后在空白处右键单击 <code>Git Bash Here</code> ，并执行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hugo new site blog</span><br></pre></td></tr></table></figure><p><img src="/../images/hugo-build/new.png" alt="new"></p><p>以上命令将会创建一个名为「 blog 」的文件夹，该文件夹存储着你的博客站点数据，你可以将 blog 改为其它单词，创建属于自己的站点，这也是 Hugo 的根目录。</p><h2 id="Step3-主题配置"><a href="#Step3-主题配置" class="headerlink" title="Step3  主题配置"></a>Step3  主题配置</h2><p>主题是网页的设计，就像我们穿衣服一样，你需要给你的博客打扮打扮，你可以前往 <a href="https://themes.gohugo.io/">Hugo 主题网站</a>选择你喜欢的主题。下面以 <a href="https://hugodoit.pages.dev/zh-cn/">DoIt</a> 主题进行说明。</p><p>在 Hugo 根目录，右键单击 <code>Git Bash Here</code> ，依次执行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git submodule add https://github.com/HEIGE-PCloud/DoIt.git themes/DoIt</span><br></pre></td></tr></table></figure><p>☕☕☕ 等待几分钟，主题就安装完成啦~ (～￣▽￣)～ </p><p>接着将 <code>...\themes\DoIt\exampleSite</code>内的 <code>config.toml</code> 复制到 Hugo 根目录，覆盖掉原先的 <code>config.toml</code>，并打开复制后的文件，将 <code>themesDir = &quot;../..&quot;</code> 更改为 <code>themesDir = &quot;themes&quot;</code>。</p><p>然后在 Hugo 根目录，右键单击 <code>Git Bash Here</code> ，执行以下任一命令，就可以进入<a href="http://localhost:1313/">本地服务器</a>预览你的网页了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hugo server               <span class="comment"># 本地预览命令</span></span><br><span class="line">hugo server -D            <span class="comment"># 支持预览草稿的本地预览命令</span></span><br><span class="line">hugo serve -e production  <span class="comment"># 支持启用评论系统和CDN等的本地预览命令</span></span><br></pre></td></tr></table></figure><p>由于 Hugo 支持实时预览修改，即可以一边主题配置文件，一边在网页预览效果，所以你可以开启本地预览命令，参照 <a href="https://hugodoit.pages.dev/zh-cn/theme-documentation-basics/">DoIt 主题使用文档</a>配置你自己的网页。</p><p>配置主题相当于开启和关闭功能，就好像我们日常使用的 APP，里面有很多功能，但并不是所有的功能你都需要，你可以结合自己的需求有选择地在主页面开启和隐藏某些功能，你只要打开刚刚复制的 <code>config.toml</code>修改即可。</p><h2 id="Step4-发表文章"><a href="#Step4-发表文章" class="headerlink" title="Step4  发表文章"></a>Step4  发表文章</h2><p>在发表文章之前，我们需要了解一下<code>Front matter</code> ，它最直观的体现为 Markdown 文件最上方以 <code>---</code> 分隔的区域，用于指定网页页面的属性（变量），如标题、发布时间、分类、标签等。</p><p>你可以选取所需要的参数，对 <code>Front matter</code>进行修改，这样当我们创建页面的时候，就不需要逐一增设参数，而只需填写变量内容即可。</p><p><img src="/../images/hugo-build/image-20221107011312929.png" alt="前置参数"></p><p>打开 Hugo 根目录下的  <code>...\archetypes\default.md</code>，结合自己的需求修改内容，以下是 DoIt 主题的 <code>Front Matter</code>，提供给大家参考：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &quot;我的第一篇文章&quot;</span><br><span class="line">subtitle: &quot;&quot;</span><br><span class="line">date: 2020-03-04T15:58:26+08:00</span><br><span class="line">lastmod: 2020-03-04T15:58:26+08:00</span><br><span class="line">draft: true</span><br><span class="line">authors: []</span><br><span class="line">description: &quot;&quot;</span><br><span class="line">license: &quot;&quot;</span><br><span class="line">images: []</span><br><span class="line"></span><br><span class="line">tags: []</span><br><span class="line">categories: []</span><br><span class="line">series: []</span><br><span class="line">series<span class="emphasis">_weight: 1</span></span><br><span class="line"><span class="emphasis">seriesNavigation: true</span></span><br><span class="line"><span class="emphasis">featuredImage: &quot;&quot;</span></span><br><span class="line"><span class="emphasis">featuredImagePreview: &quot;&quot;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">hiddenFromHomePage: false</span></span><br><span class="line"><span class="emphasis">hiddenFromSearch: false</span></span><br><span class="line"><span class="emphasis">twemoji: false</span></span><br><span class="line"><span class="emphasis">lightgallery: true</span></span><br><span class="line"><span class="emphasis">ruby: true</span></span><br><span class="line"><span class="emphasis">fraction: true</span></span><br><span class="line"><span class="emphasis">fontawesome: true</span></span><br><span class="line"><span class="emphasis">linkToMarkdown: true</span></span><br><span class="line"><span class="emphasis">linkToSource: false</span></span><br><span class="line"><span class="emphasis">linkToEdit: false</span></span><br><span class="line"><span class="emphasis">linkToReport: false</span></span><br><span class="line"><span class="emphasis">rssFullText: false</span></span><br><span class="line"><span class="emphasis">license: &#x27;&#x27;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">  enable: true</span></span><br><span class="line"><span class="emphasis">  auto: true</span></span><br><span class="line"><span class="emphasis">code:</span></span><br><span class="line"><span class="emphasis">  copy: true</span></span><br><span class="line"><span class="emphasis">  # ...</span></span><br><span class="line"><span class="emphasis">table:</span></span><br><span class="line"><span class="emphasis">  sort: true</span></span><br><span class="line"><span class="emphasis">  # ...</span></span><br><span class="line"><span class="emphasis">math:</span></span><br><span class="line"><span class="emphasis">  enable: true</span></span><br><span class="line"><span class="emphasis">  # ...</span></span><br><span class="line"><span class="emphasis">mapbox:</span></span><br><span class="line"><span class="emphasis">  accessToken: &quot;&quot;</span></span><br><span class="line"><span class="emphasis">  # ...</span></span><br><span class="line"><span class="emphasis">share:</span></span><br><span class="line"><span class="emphasis">  enable: true</span></span><br><span class="line"><span class="emphasis">  # ...</span></span><br><span class="line"><span class="emphasis">comment:</span></span><br><span class="line"><span class="emphasis">  enable: true</span></span><br><span class="line"><span class="emphasis">  # ...</span></span><br><span class="line"><span class="emphasis">library:</span></span><br><span class="line"><span class="emphasis">  css:</span></span><br><span class="line"><span class="emphasis">    # someCSS = &quot;some.css&quot;</span></span><br><span class="line"><span class="emphasis">    # 位于 &quot;assets/&quot;</span></span><br><span class="line"><span class="emphasis">    # 或者</span></span><br><span class="line"><span class="emphasis">    # someCSS = &quot;https://cdn.example.com/some.css&quot;</span></span><br><span class="line"><span class="emphasis">  js:</span></span><br><span class="line"><span class="emphasis">    # someJS = &quot;some.js&quot;</span></span><br><span class="line"><span class="emphasis">    # 位于 &quot;assets/&quot;</span></span><br><span class="line"><span class="emphasis">    # 或者</span></span><br><span class="line"><span class="emphasis">    # someJS = &quot;https://cdn.example.com/some.js&quot;</span></span><br><span class="line"><span class="emphasis">seo:</span></span><br><span class="line"><span class="emphasis">  images: []</span></span><br><span class="line"><span class="emphasis">  # ...</span></span><br><span class="line"><span class="emphasis">outdatedArticleReminder:</span></span><br><span class="line"><span class="emphasis">  enable: false</span></span><br><span class="line"><span class="emphasis">  # ...</span></span><br><span class="line"><span class="emphasis">sponsor:</span></span><br><span class="line"><span class="emphasis">  enable: false</span></span><br><span class="line"><span class="emphasis">  # ...</span></span><br><span class="line"><span class="emphasis">related:</span></span><br><span class="line"><span class="emphasis">  enable: false</span></span><br><span class="line"><span class="emphasis">  count: 5</span></span><br><span class="line"><span class="emphasis">---</span></span><br></pre></td></tr></table></figure><p>然后就可以开始发布文章啦，在 Hugo 根目录右键单击 <code>Git Bash Here</code> ，依次执行以下任一命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hugo new posts/first/index.md</span><br><span class="line">hugo new posts/first.md</span><br></pre></td></tr></table></figure><p>这两条命令的区别在于，前者创建了一个页面资源包，通过修改 Typora 图像的偏好设置，可以直接将本地图片复制到该文件夹，并引用其相对路径。后者则是直接创建一个 <code>posts</code> 页面，图片可以根据自己的需求放在「 assets 」或「 static 」文件夹，引用其相对路径，或直接上传到图床，引用其绝对路径。</p><p>需要注意的是，图片的命名必须取英文字符，如 <code>pic.png</code>，如果命名为中文字符或有空格，图片将无法正常显示，如<code>图片.png</code>。</p><h2 id="Step5-部署博客"><a href="#Step5-部署博客" class="headerlink" title="Step5  部署博客"></a>Step5  部署博客</h2><h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p>Are you ready？你准备把你做好的网页发给你朋友看了吗？如果你准备好了，就开始吧！</p><p>首先，你需要有一个 <a href="https://github.com/">GitHub</a> 账号，如果你有，就需要登录并创建一个新的仓库；如果你没有，就跟着下面的步骤来操作吧。</p><table><thead><tr><th align="center">步骤</th><th>内容</th><th>要点</th></tr></thead><tbody><tr><td align="center">1</td><td>账号注册&#x2F;登录</td><td>未注册：进入<a href="https://github.com/">官网</a>，点击 <code>Sign up</code> ，根据提示注册账号；<br>已注册：点击右上角的 <code>Sign in</code> ，登录 GitHub 。</td></tr><tr><td align="center">2</td><td>创建新仓库</td><td>点击头像，选择  <code>Your repositories</code> 进入仓库； <br>点击绿色按钮 <code>New</code> 新建仓库； <br>填写 <code>Repository name *</code> ; <br>勾选 <code>Add a README file</code> ； <br>点击绿色按钮 <code>Create Repository</code> 创建新仓库。</td></tr></tbody></table><p>关于 <code>Repository name *</code>，GitHub 默认提供 <code>.github.io</code> 域名给用户使用，且具有唯一性。如果你想生成的是主域名，如 <a href="https://owner.github.io,则填写/">https://owner.github.io，则填写</a> <code>owner.github.io</code>，其中 <code>owner</code> 是你注册时的用户名。如果你想生成的是子域名，如 <a href="https://owner.github.io/blog%EF%BC%8C%E5%88%99%E5%A1%AB%E5%86%99">https://owner.github.io/blog，则填写</a> <code>blog</code> 即可，同时记得修改 Hugo 配置文件。</p><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主域名</span></span><br><span class="line"><span class="attr">baseURL</span> = <span class="string">&quot;https://owner.github.io/&quot;</span></span><br><span class="line"><span class="comment"># 子域名</span></span><br><span class="line"><span class="attr">baseURL</span> = <span class="string">&quot;https://owner.github.io/blog&quot;</span></span><br></pre></td></tr></table></figure><p>仓库名可进入仓库的「 Setting -&gt; General -&gt; Repository name -&gt; Rename 」修改。</p><h3 id="生成网站"><a href="#生成网站" class="headerlink" title="生成网站"></a>生成网站</h3><p>一般而言，Hugo 在部署到 GitHub 之前需要先生成静态网站文件，然后再将生成的静态网站文件「 Public 」上传到 GitHub 仓库。</p><p>在 Hugo 根目录，右键单击 <code>Git bash here</code>，执行以下任一命令构建网站：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hugo </span><br><span class="line">hugo -F --cleanDestinationDir</span><br></pre></td></tr></table></figure><p><code>hugo</code> 会在 「 public 」文件夹生成静态网站资源，如果下次网站有修改，需要删除该文件夹，再重新执行该命令，因为该命令只会往里面添加内容，不会删除外部已删除而「 public 」仍存在的文件。</p><p><code>hugo -F --cleanDestinationDir</code> 则会从静态目录中找不到的目标中删除文件，表示每次生成的「 public 」都是全新的，会覆盖原来的。</p><p>关于部署到 GitHub 的方式，如果你想一劳永逸，可以使用 <a href="https://desktop.github.com/">GitHub 桌面版</a>直接上传本地网站代码到 GitHub 仓库，阅读「 软件部署 」部分即可。如果不想再下载多一个软件占用本地空间，可以拉到「 命令部署 」部分进行操作。</p><h3 id="命令部署"><a href="#命令部署" class="headerlink" title="命令部署"></a>命令部署</h3><p>我们要通过 Git 将本地网站代码传输到 GitHub 仓库，需要利用到 GitHub 仓库的 Git 地址。Git 地址有两种形式，一种是 HTTPS 地址，如 <code>https://github.com/owner/repo.git</code>，另一种是 SSL 地址，如 <code>git@github.com:owner/repo.git</code>。</p><p><img src="/../images/hugo-build/et2e5qc8ov.png" alt="et2e5qc8ov"></p><p>由于 GitHub 的特性，使用 HTTPS 地址，你每次通过 Git 提交的时候，都需要输入用户名和用户密码，而使用 SSL 地址则无需这样繁琐的操作。如果你使用的是 HTTPS 地址，则在 Hugo 根目录执行以下命令。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> public</span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;message&quot;</span></span><br><span class="line">git branch -M main </span><br><span class="line">git remote add origin https://github.com/owner/repo.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>如果你使用的是 SSH 地址，则需要按如下步骤获取你的密钥。首先，在桌面右键选择 <code>Git Bash here</code>，执行以下命令，自行替换引号内的相应字段。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;注册时的用户名&quot;</span></span><br><span class="line">git config --global user.email  <span class="string">&quot;注册时的用户邮箱号&quot;</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;注册时的用户邮箱号&quot;</span></span><br></pre></td></tr></table></figure><p>此时会询问是否需要密码，不需要直接继续按三次回车即可，然后可以执行以下命令，获取你生成的密钥。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line"><span class="built_in">cat</span> id_rsa.pub</span><br></pre></td></tr></table></figure><p>鼠标选中后右键选择 <code>Copy</code> ，回到 GitHub 的页面，点击「 头像 -&gt; Settings -&gt; SSH and GPG keys -&gt; New SSH key 」，将复制的内容粘贴到 Key 位置。</p><p><img src="/../images/hugo-build/SSH-keys.png" alt="SSH-keys"></p><p>配置完成后，你可以通过 <code>ssh -T git@github.com</code> 测试是否成功配置 SSH Key。然后回到 Hugo 根目录，右键单击 <code>Git bash here</code>，执行以下命令部署网站。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> public</span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;message&quot;</span></span><br><span class="line">git branch -M main </span><br><span class="line">git remote add origin git@github.com:owner/repo.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>接下来进入仓库，点击「 Settings -&gt; Pages -&gt; GitHub Pages 」，就可以复制你的域名分享给朋友啦！👏👏👏</p><p>如果你没有看到 GitHub Pages 有地址，你需要在 Branch 选择 main ，然后点保存，稍等片刻后刷新就会出现。</p><h3 id="软件部署"><a href="#软件部署" class="headerlink" title="软件部署"></a>软件部署</h3><p><a href="https://desktop.github.com/">GitHub 桌面版</a>的操作很傻瓜式，直接复制粘贴替换即可，不需要记很多命令，也不需要申请 SSH 密钥等一系列操作，缺点就是会占用本地空间。</p><p>下载安装后，进入页面登录后选择 <code>Clone a repository</code>，选择刚刚新建的仓库，选择 <code>Local Path</code> 用于放置博客 <code>public</code> 的内容。</p><p><img src="/../images/hugo-build/clone.png" alt="clone"></p><p>接着，将 Hugo 根目录下的「 Public 」中的所有内容复制到刚刚的 <code>Local Path</code> 中，它就会自动出现在 GitHub 桌面版的界面中，然后按照下图指示操作就会自动部署到 GitHub 仓库中。</p><p><img src="/../images/hugo-build/fetch.png" alt="fetch"></p><p>最后我们回到 GitHub 仓库界面，选择「 Setting -&gt; Pages 」就可以获取我们的域名啦，并且可以发送给朋友看啦！👏👏👏</p><p>💡 TIP：每次构建网站前，建议把「 Public 」整个文件夹删掉，然后再执行 <code>Hugo</code> 命令，不然可能会出现 Bug；或直接执行 <code>hugo -F --cleanDestinationDir</code> 命令，无需删除该文件夹。</p><h2 id="简码速查"><a href="#简码速查" class="headerlink" title="简码速查"></a>简码速查</h2><p>Markdown 的内容格式虽然简单，但是有时它也不尽如人意，在很多方面都无法很好地支持，这时内容编辑者就需要使用纯 HTML 来扩展可能性，这与 Markdown 语法的优美简洁相矛盾。</p><p>为了尽可能避免使用 HTML 以保持内容简洁，Hugo 创建了 Shortcodes 来规避这些限制。<code>Shortcodes</code> 是内容文件中的一个简单片段，可以生成合理的 HTML 代码，并且符合 Markdown 的设计哲学。在站点生成时，Hugo Shortcodes 将轻松合并到更改中，避免了可能复杂的搜索和替换操作。</p><p>通常无需记忆具体的语法，只要知道每个参数所代表的意义即可，你可以借助<a href="https://shurufa.sogou.com/?r=mac&t=pinyin">搜狗拼音输入法</a>的自定义短语功能，将预设好参数的标签插件添加新短语，从而通过缩写实现快捷输入。</p><p><img src="/../images/hugo-build/LqA5LsZB4p.png" alt="自定义短语"></p><p><img src="/../images/hugo-build/rto0sMWz5l.png" alt="添加新短语"></p><h3 id="内置简码"><a href="#内置简码" class="headerlink" title="内置简码"></a>内置简码</h3><p>Hugo 附带了一组预定义的 Shortcodes，实现了一些常见的用法，以保持 Markdown 内容简洁。更具体的内容参数请阅读 <a href="https://gohugo.io/content-management/shortcodes/">Hugo Shortcodes 文档</a>，下表仅为简单使用的短代码简表。</p><table><thead><tr><th align="center">作用</th><th>语法</th></tr></thead><tbody><tr><td align="center">图片</td><td><code>&#123;&#123;&#42;figure src="图片地址" title="图片标题"&#42;>&#125;&#125;</code></td></tr><tr><td align="center">gist</td><td><code>&#123;&#123;&#42;gist 用户名 gist-id&#42;>&#125;&#125;</code></td></tr><tr><td align="center">语法高亮</td><td><code>&#123;&#123;&#42;highlight html&#42;>&#125;&#125;</code>……<code>&#123;&#123;&#42;/highlight&#42;>&#125;&#125;</code></td></tr><tr><td align="center">前置参数</td><td><code>&#123;&#123;&#42;param Front-matter参数名称&#42;>&#125;&#125;</code></td></tr><tr><td align="center">页面链接</td><td>用法1：<code>[文章标题](&#123;&#123;&#42;ref "文章文件的相对路径地址"&#42;>&#125;&#125;)</code><br>用法2：<code>[文章标题](&#123;&#123;&#42;relref "文章标题的碎片链接地址"&#42;>&#125;&#125;)</code></td></tr><tr><td align="center">推特</td><td><code>&#123;&#123;&#42;tweet user="用户名" id="文章ID"&#42;>&#125;&#125;</code></td></tr><tr><td align="center">YouTube</td><td>用法1：<code>&#123;&#123;&#42;vimeo 视频ID&#42;>&#125;&#125;</code><br>用法2：<code>&#123;&#123;&#42;youtube 视频ID&#42;>&#125;&#125;</code></td></tr></tbody></table><h3 id="扩展简码"><a href="#扩展简码" class="headerlink" title="扩展简码"></a>扩展简码</h3><p><a href="https://hugodoit.pages.dev/zh-cn/theme-documentation-extended-shortcodes/">DoIt</a> 主题在 Hugo 内置的 Shortcodes 的基础上提供多个扩展的 Shortcodes，支持 Markdown 或 HTML 格式。更具体的内容参数请阅读 <a href="https://hugodoit.pages.dev/zh-cn/theme-documentation-extended-shortcodes/">DoIt 扩展 Shortcodes 使用文档</a>，下表仅为简单使用的短代码简表。由于找不到合适的转义字符，使用时请记得将 <code>*</code> 替换为空格。</p><table><thead><tr><th align="center">作用</th><th>语法</th></tr></thead><tbody><tr><td align="center">自定义样式</td><td><code>&#123;&#123;&#42;style "CSS样式"&#42;>&#125;&#125;</code> ……<code>&#123;&#123;&#42;/style&#42;>&#125;&#125;</code></td></tr><tr><td align="center">链接</td><td><code>&#123;&#123;&#42;link "链接地址" 链接的标题 "悬停在链接上显示的提示"&#42;>&#125;&#125;</code></td></tr><tr><td align="center">图片</td><td><code>&#123;&#123;&#42;image src="图片地址" caption="图片的标题" title="悬停在图片上显示的提示"&#42;>&#125;&#125;</code></td></tr><tr><td align="center">提示横幅</td><td><code>&#123;&#123;&#42;admonition 横幅类型 "标题" true或false&#42;>&#125;&#125;</code>……<code>&#123;&#123;&#42;/admonition&#42;>&#125;&#125;</code><br>其中横幅类型可选：note、abstract、info、tip、success、question、warning、failure、danger、bug、example、quote</td></tr><tr><td align="center">数据图表</td><td>用法1：<code>&#123;&#123;&#42;mermaid&#42;>&#125;&#125;</code>……<code>&#123;&#123;&#42;/mermaid&#42;>&#125;&#125;</code><br>用法2：<code>&#123;&#123;&#42;echarts&#42;>&#125;&#125;</code>……<code>&#123;&#123;&#42;/echarts&#42;>&#125;&#125;</code><br>具体请参考 <a href="https://mermaidjs.github.io/">mermaid</a> 和 <a href="https://echarts.apache.org/zh/index.html">Echarts</a></td></tr><tr><td align="center">地图</td><td><code>&#123;&#123;&#42;mapbox 经度值 纬度值 缩放比例&#42;>&#125;&#125;</code></td></tr><tr><td align="center">音乐</td><td>用法1：<code>&#123;&#123;&#42;music url="本地音乐链接" name=音乐名字 artist=歌手 cover="音乐封面"&#42;>&#125;&#125;</code><br>用法2：<code>&#123;&#123;&#42;music "第三方音乐链接"&#42;>&#125;&#125;</code><br>用法3：<code>&#123;&#123;&#42;music 音乐平台 音乐类型 音乐ID&#42;>&#125;&#125;</code><br>其中音乐平台可选：netease、tecent、kugou、xiami、baidu；音乐类型可选：song、playlist、album、search、artist</td></tr><tr><td align="center">bilibili</td><td><code>&#123;&#123;&#42;bilibili BVid 分P数&#42;>&#125;&#125;</code></td></tr><tr><td align="center">打字动画</td><td>简单打字动画：<code>&#123;&#123;&#42;typeit&#42;>&#125;&#125;</code>……<code>&#123;&#123;&#42;/typeit&#42;>&#125;&#125;</code><br><br>代码打字动画：<code>&#123;&#123;&#42;typeit code=代码语言名称&#42;>&#125;&#125;</code>…… <code>&#123;&#123;&#42;/typeit&#42;>&#125;&#125;</code><br>段落打字动画：<code>&#123;&#123;&#42;typeit group=paragraph&#42;>&#125;&#125;</code>…… <code>&#123;&#123;&#42;/typeit&#42;>&#125;&#125;</code></td></tr><tr><td align="center">Javascript</td><td><code>&#123;&#123;&#42;script&#42;>&#125;&#125;</code>……<code>&#123;&#123;&#42;/script&#42;>&#125;&#125;</code></td></tr><tr><td align="center">友链</td><td><code>&#123;&#123;&#42;friend "名字" "友链" "头像" "简介"&#42;>&#125;&#125;</code></td></tr><tr><td align="center">项目展示</td><td><code>&#123;&#123;&#42;showcase "项目标题" "项目简介" "项目封面图" "项目链接"&#42;>&#125;&#125;</code></td></tr><tr><td align="center">数学公式</td><td><code>&#123;&#123;&#42;math&#42;>&#125;&#125;</code>……<code>&#123;&#123;&#42;/math&#42;>&#125;&#125;</code></td></tr></tbody></table><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://gohugo.io/">Hugo 文档</a></li><li><a href="https://hugodoit.pages.dev/zh-cn/theme-documentation-basics/">DoIt 主题文档</a></li><li><a href="https://gohugo.io/content-management/shortcodes/">Hugo Shortcodes 文档</a></li><li><a href="https://hugodoit.pages.dev/zh-cn/theme-documentation-extended-shortcodes/">DoIt 扩展 Shortcodes 文档</a></li><li><a href="https://guanqr.com/tech/website/hugo-shortcodes-customization/">自定义 Hugo Shortcodes 简码</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hugo </tag>
            
            <tag> GitHub </tag>
            
            <tag> DoIt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超实用！写文章必备的 Markdown 速查手册</title>
      <link href="/markdown/"/>
      <url>/markdown/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Markdown 格式的首要设计目标是更具可读性，最初的想法是 Markdown 格式的文档应当以纯文本形式发布，而不会看起来像被标签或格式说明所标记。虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响，但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式。</p><p>—— John Gruber</p></blockquote><p>Markdown 是一种轻量级标记语言，创始人为约翰 · 格鲁伯（John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML 或者 HTML 文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p><p>由于 Markdown 的轻量化、易读易写特性，并且对于图片、图表、数学公式都有支持，许多网站都广泛使用 Markdown 来撰写帮助文档或用于论坛上发表消息。</p><p>通俗来讲，Markdown 是一种文本书写方式，通过编辑器将文本生成网页，就好比 Office，你可以通过 Word 将文本排版成文，通过 Excel 将文本构图成表，通过 PPT 将文本演示表达。</p><p><img src="/../images/markdown/image-20221105184014721.png" alt="Markdown"></p><h2 id="编辑工具"><a href="#编辑工具" class="headerlink" title="编辑工具"></a>编辑工具</h2><table><thead><tr><th align="center">类型</th><th>工具</th></tr></thead><tbody><tr><td align="center">编辑器</td><td>1️⃣ OSX：<a href="https://www.typora.io/">Typora</a>；<a href="http://bywordapp.com/">Byword</a>；<a href="http://ia.net/writer/">iA Writer</a>；<a href="http://mouapp.com/">Mouapp</a>；<a href="http://www.texts.io/">TEXTS</a>；<a href="http://kobito.qiita.com/">Kobito</a><br>2️⃣ Windows：<a href="https://www.typora.io/">Typora</a>；<a href="http://markdownpad.com/">MarkdownPad</a>；<a href="http://www.texts.io/">TEXTS</a><br>3️⃣ iOS：<a href="http://bywordapp.com/">Byword</a>；<a href="http://ia.net/writer/">iA Writer</a><br>4️⃣ 通用文字编辑器：<a href="http://www.sublimetext.com/">Sublime Text</a>；<a href="plasticboy/vim-markdown">plasticboy&#x2F;vim-markdown</a>；<a href="tpope/vim-markdown">tpope&#x2F;vim-markdown</a><br>5️⃣ 在线编辑器：<a href="https://markdown.com.cn/editor/">markdown</a>；<a href="http://codemirror.net/">CodeMirror</a>；<a href="http://dillinger.io/">Dillinger</a>；<a href="https://github.com/bianchimro/markgiu">Markgiu</a><br>6️⃣ 浏览器拓展：<a href="https://github.com/adam-p/markdown-here/">Markdown Here</a></td></tr><tr><td align="center">扩展</td><td><a href="https://help.github.com/articles/github-flavored-markdown">GitHub Flavored Markdown</a>；<a href="http://fletcherpenney.net/multimarkdown/">MultiMarkdown</a>；<a href="http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown">Pandoc’s markdown</a>；<a href="http://michelf.ca/projects/php-markdown/extra/">PHP Markdown Extra</a></td></tr><tr><td align="center">引擎</td><td>1️⃣ C：<a href="https://github.com/vmg/sundown">Sundown</a><br>2️⃣ JavaScript：<a href="https://github.com/cky/wmd">showdown</a>；<a href="https://code.google.com/p/pagedown/">pagedown</a>；<a href="coreyti/showdown">coreyti&#x2F;showdown</a>；<a href="https://github.com/chjj/marked">marked</a><br>3️⃣ PHP：<a href="http://michelf.ca/projects/php-markdown/">PHP Markdown</a><br>4️⃣ Ruby：<a href="https://github.com/vmg/redcarpet">Redcarpet</a>；<a href="https://github.com/bhollis/maruku">Maruku</a></td></tr></tbody></table><h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><table><thead><tr><th align="center">名称</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center"><a href="https://daringfireball.net/projects/markdown/">John Gruber’s Markdown documentation</a></td><td align="center">Markdown 的创建者编写的原始指南</td></tr><tr><td align="center"><a href="https://www.markdowntutorial.com/">Markdown Tutorial</a></td><td align="center">在线使用 Markdown 的开源网站</td></tr><tr><td align="center"><a href="https://github.com/mundimark/awesome-markdown">Awesome Markdown</a></td><td align="center">Markdown 工具和学习资源列表</td></tr><tr><td align="center"><a href="https://dave.autonoma.ca/blog/2019/05/22/typesetting-markdown-part-1">Typesetting Markdown</a></td><td align="center"><a href="https://pandoc.org/">pandoc</a> 和 <a href="https://www.contextgarden.net/">ConTeXt</a> 对 Markdown 排版的系列教程</td></tr></tbody></table><h2 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h2><p>以下列举了 Markdown 文件格式的常用语法，但并非所有的 Markdown 编辑器都支持下面的语法，使用的时候请注意。你可以无需记忆这些 Markdown 语法，现在的 Markdown 编辑器可以做到像 Word 一样，点击功能区或者按击快捷键即可生成效果。</p><table><thead><tr><th align="center">作用</th><th>语法</th></tr></thead><tbody><tr><td align="center">标题</td><td>在文本前添加一个 <code>#</code> 和<code>空格</code>，<code>#</code> 表示标题的级别，如 <code># H1</code>、<code>## H2</code>、<code>### H3</code>。</td></tr><tr><td align="center">段落</td><td>按照纯文本的方式书写段落即可。</td></tr><tr><td align="center">换行</td><td>行末添加两个或多个空格，然后按回车键即可，或者直接键入 HTML 语法 <code>&lt;br&gt;</code>。</td></tr><tr><td align="center">强调</td><td>1️⃣ 粗体：在文本前后各添加两个 <code>*</code>，如 <code>**加粗**</code>。<br>2️⃣ 斜体：在文本前后各添加一个 <code>*</code>，如 <code>*倾斜*</code>。<br>3️⃣ 粗斜体：在文本前后各添加三个 <code>*</code>，如 <code>***加粗和倾斜***</code>。<br>4️⃣ 删除线：在文本前后各添加两个 <code>~</code>，如 <code>~~删除文本~~</code>。</td></tr><tr><td align="center">引用</td><td>1️⃣ 块引用：在段落前添加一个 <code>&gt;</code> 符号和<code>空格</code>，如 <code>&gt; 块引用</code>。<br>2️⃣ 嵌套引用：在要嵌套的段落前添加两个 <code>&gt;</code> 符号和<code>空格</code>，示例如下。<br><code>&gt; 块引用</code><br><code>&gt;</code><br><code>&gt;&gt; 嵌套引用</code><br>⚡⚡⚡ 注意：块引用可以包含 Markdown 格式的其他元素，如标题、强调、列表等，但并非所有元素都可以使用，使用时请注意。</td></tr><tr><td align="center">列表</td><td>1️⃣ 有序列表：在文本前添加数字并紧跟一个英文句点，注意英语句点和文本之间要有一个空格，若要创建二级有序列表，则在数字前面添加两个空格即可，示例如下。<br><code>1. 第一项</code><br><code>2. 第二项</code><br><code>3. 第三项</code><br>2️⃣ 无序列表：在文本前添加一个 <code>-</code>和空格，若要创建二级无序列表，则在<code>-</code>前面添加两个空格即可，示例如下。<br><code>- 第一项</code><br><code>- 第二项</code><br><code>- 第三项</code><br>3️⃣ 任务列表：在文本前添加 <code>-</code> + 空格 + <code>[ ]</code>，注意方括号和文本之间也要有一个空格，若方括号内不是空格，而是 <code>x</code>，则表示已勾选的任务，示例如下。<br><code>- [x] 第一项任务</code><br><code>- [ ] 第二项任务</code><br><code>- [ ] 第三项任务</code></td></tr><tr><td align="center">表格</td><td>1️⃣ 基本方法：使用三个或多个 <code>---</code> 创建每列的标题，并使用 <code>|</code> 分隔每列，示例如下。<br><code> | 姓名   | 成绩   |</code><br><code> | :--------  | :---------: |</code><br><code> | 小明   | 88    |</code><br><code> | 小红   | 99    |</code><br>2️⃣ 文本对齐：在<code>---</code>的左侧，右侧或两侧添加<code>:</code>，即可实现单列左对齐、右对齐或居中。<br>3️⃣ 文本格式：表格内支持超链接、行内代码、强调等语法，不支持添加标题、块引用、列表等语法。</td></tr><tr><td align="center">代码</td><td>1️⃣ 行内代码：在文本前后各添加一个反引号( <code>`</code>)，如 <code>`code`</code>。<br>2️⃣ 代码块：文本的每一行缩进至少四个空格或一个制表符。<br>3️⃣ 围栏式代码块：无需缩进的代码块，在段落前后各添加三个反引号( <code>`</code>)，若在第一组的三个反引号后面有标注代码语言，渲染时则会高亮文本，突出显示，示例如下。<br><code>```json</code><br><code>&#123;</code><br>  <code> &quot;firstName&quot;: &quot;John&quot;,</code><br>  <code> &quot;lastName&quot;: &quot;Smith&quot;,</code><br>  <code> &quot;age&quot;: 25</code><br><code>&#125;</code><br><code>```</code></td></tr><tr><td align="center">分割线</td><td>在单独的一行内使用是三个或多个 <code>---</code>，并且不能包含其它内容。</td></tr><tr><td align="center">链接</td><td>1️⃣ 链接文本：<code>[超链接显示名](超链接地址 &quot;超链接标题&quot;)</code>，超链接标题可有可无，如<code>[title](https://www.example.com)</code>。<br>2️⃣ 可点击的链接：<code>&lt;超链接地址&gt;</code>，如 <code>&lt;fake@example.com&gt;</code>。<br>3️⃣ 强调链接：在基本链接语法前后增加 <code>*</code> 来加粗或倾斜。<br>4️⃣ 引用样式链接：可作为尾注或脚注，由两部分组成：<br>第一部分：<code>[超链接显示名][超链接标签]</code>，超链接标签不区分大小写，可以包含字母、数字、空格或标点符号，如 <code>[hobbit-hole][1]</code>。<br>第二部分：<code>[超链接标签]: 超链接的地址 &quot;超链接标题&quot;</code>，超链接标题可有可无，如 <code>[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle</code>。</td></tr><tr><td align="center">脚注</td><td>脚注的作用在于添加注释和参考，由两部分组成：<br>第一部分：<code>文本内容[^标识符]</code>，标识符支持数字和单词，不支持空格或制表符，如 <code>文本内容[^1]</code>。<br>第二部分：<code>[^标识符]: 脚注内容 </code>，如 <code>[^1]: My footnote. </code>。</td></tr><tr><td align="center">图片</td><td>1️⃣ 普通图片：<code>![图片描述](图片链接 &quot;图片标题&quot;)</code>，图片标题可有可无，如 <code>![alt text](image.jpg)</code>。<br>2️⃣ 图片超链接：<code>[![图片描述](图片链接 &quot;图片标题&quot;)](超链接地址)</code>，图片标题可有可无，如 <code>[![alt text](image.jpg)](https://www.example.com)</code>。<br/>⚡⚡⚡ 注意：如果网站存在 <a href="https://github.com/aFarkas/lazysizes">lazysizes</a> 和 <a href="https://github.com/sachinchoolur/lightgallery.js">lightgallery.js</a> 两个依赖库，图片超链接可能不会生效。</td></tr><tr><td align="center">转义字符</td><td>在具有特殊含义的字符前加上 <code>\</code> 后，Markdown 编辑器在渲染排版效果时将展现其原始的含义，主要目的是避免语法冲突。</td></tr><tr><td align="center">内嵌 HTML 标签</td><td>1️⃣ 行内标签：直接在 Markdown 文件中使用 HTML 行内语法，如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 、<code>&lt;em&gt;</code>等。<br>2️⃣ 区块标签：直接在 Markdown 文件中使用 HTML 区块语法，如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等，必须在前后加上空行，以便于内容区分，但注意Markdown 语法在 HTML 区块标签中将不会被进行处理。</td></tr><tr><td align="center">Emoji</td><td>从 <a href="https://emojipedia.org/">Emojipedia</a> 等来源复制并粘贴表情符号到 Markdown 格式的文本中，或者键入 emoji 简码，如 <code>:joy:</code>。Windows 系统用户可以按住 <code>win+.</code> 获取微软的 emoji 表情。</td></tr></tbody></table><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><p><a href="https://markdown.com.cn/">Markdown 官方教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Hugo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适合小白！基于 Hexo + Butterfly 搭建个人博客</title>
      <link href="/hexo-build/"/>
      <url>/hexo-build/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>在开始之前，先说明一下我的构建环境：</p><table><thead><tr><th align="center"></th><th align="center">构建环境</th></tr></thead><tbody><tr><td align="center">操作系统</td><td align="center">Windows10 64bit</td></tr><tr><td align="center">Node 版本</td><td align="center">16.17.0</td></tr><tr><td align="center">Hexo 版本</td><td align="center">6.3.0</td></tr><tr><td align="center">Butterfly 版本</td><td align="center">4.5.1</td></tr></tbody></table><p>如果你在下面的操作过程中遇到困难，欢迎在评论区留言交流！</p><h2 id="Step1-安装工具"><a href="#Step1-安装工具" class="headerlink" title="Step1  安装工具"></a>Step1  安装工具</h2><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><input checked="" disabled="" type="checkbox"> Git：<a href="https://git-scm.com/">官网</a>，<a href="https://npm.taobao.org/mirrors/git-for-windows/v2.22.0.windows.1/Git-2.22.0-64-bit.exe">国内镜像</a>，<a href="https://npm.taobao.org/mirrors/git-for-windows/">其他版本</a></li><li><input checked="" disabled="" type="checkbox"> Node.js：<a href="http://nodejs.cn/download/">官网</a></li></ul><p>简单来说，Git 是一个版本管理控制系统，可以记录代码修改的每一个环节，就好比我们玩游戏存档。Node.js 是一种以 JavaScript 语言为核心开发的服务器技术，就好像我们的大脑一样，接收、处理并传递网页信息。</p><p>所有必备的应用程序安装完成后，即可使用 <code>npm</code> 安装 Hexo，在桌面右键单击 <code>Git Bash Here</code>，并在 <code>Bash</code> 页面内执行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="Step2-创建网站"><a href="#Step2-创建网站" class="headerlink" title="Step2  创建网站"></a>Step2  创建网站</h2><p>安装 Hexo 完成后，请在 <code>Bash</code> 页面内继续执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><p><img src="/../images/hexo-build/1fcBK1u6dD.png" alt="hexo"></p><p>由于 Hexo 安装的时候，默认配有一个 <code>landscape</code> 主题，所以此时你就可以执行以下命令，通过 <a href="http://localhost:4000/">http://localhost:4000</a> 访问你的网站了，当然此时你只能在你的电脑访问，别人是看不见的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="Step3-更换主题"><a href="#Step3-更换主题" class="headerlink" title="Step3  更换主题"></a>Step3  更换主题</h2><p>主题是网页的设计，就像我们穿衣服一样，你也可以前往 <a href="https://hexo.io/themes/">Hexo 主题网站</a>选择你喜欢的主题，为你的网站打扮打扮。下面以 <a href="https://butterfly.js.org/">Butterfly</a> 主题进行操作，在 <code>Bash</code> 页面继续执行以下命令，Hexo 将会在 <code>themes</code> 文件夹中新建 <code>butterfly</code> 文件夹。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>新建完成后，<code>Butterfly</code> 文件夹的目录如下：</p><p><img src="/../images/hexo-build/3LUQUxfUVx.png" alt="butterfly"></p><p>由于 Hexo 的特性，配置网站需要同时修改 Hexo 根目录和主题目录中的 <code>_config.yml</code> 文件，所以为了进行区分，你可以将主题目录的配置文件复制并重命名为 <code>_config.butterfly.yml</code> ，然后粘贴到 Hexo 根目录中，注意不要覆盖或删掉原来的 Hexo 配置文件。如此一来，既方便管理配置文件，也便于主题的更新。</p><p><img src="/../images/hexo-build/drjSLSJC2U.png" alt="配置文件"></p><p>配置网站相当于开启和关闭功能，就好像我们平时使用的 APP，里面有很多功能，但并不是所有的功能你都需要，你可以结合自己的需求有选择地在主页面开启和隐藏某些功能。</p><p>关于 Hexo 配置文件 <code>_config.yml</code>，你可以阅读 <a href="https://hexo.io/zh-cn/docs/configuration">Hexo 配置文档</a>设置自己的网站参数（功能），同时要记得设置 <code>theme: butterfly</code>，否则 Butterfly 的主题将不会得到应用。</p><p>关于主题配置文件 <code>_config.butterfly.yml</code>，你可以阅读 <a href="https://butterfly.js.org/">Butterfly 配置文档</a>设置自己的网站参数（功能）。</p><p>需要说明的是，在配置文件中，开启功能要注意在 <code>:</code> 之后保留一个空格，再填写内容；隐藏或关闭某些功能，一般是在参数前面添加 <code>#</code> ，或者 <code>:</code> 之后留空。但注意，并非所有的功能都需要开启，结合自身需求开启即可。</p><p>☕☕☕ 修改配置文件后，你就可以执行以下命令，通过 <a href="http://localhost:4000/">http://localhost:4000</a> 访问你的网站了，当然此时你只能在你的电脑访问，别人是看不见的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>如果你想要对 Butterfly “ 魔改 ”，推荐阅读由 <a href="https://blog.zhheo.com/">@张洪HEO</a> 建立的 <a href="https://butterfly.zhheo.com/">Butterfly 主题美化教程</a>，里面收录了很多大神魔改 Butterfly 主题的教程。</p><h2 id="Step4-部署博客"><a href="#Step4-部署博客" class="headerlink" title="Step4  部署博客"></a>Step4  部署博客</h2><p>需要说明的是，服务器相当于网站的家，网站一般都需要服务器来运行，所以建网站往往需要服务器，阿里云、腾讯云、华为云等都是国内比较知名的服务器提供商。</p><p>但是，购买一台服务器，不仅涉及到服务器本身的价格，还涉及到流量费用（类似手机流量），这对于初建站且不知道是否长期使用的人来说，无疑是一笔比较昂贵的支出。</p><p><a href="https://github.com/">GitHub</a> 是一个免费托管开源代码的 Git 服务器，如果你不想付费购买服务器，可以将你的网站托管到 GitHub 服务器。</p><h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p>首先，你需要有一个 <a href="https://github.com/">GitHub</a> 账号，如果你有，就需要登录并创建一个新的仓库；如果你没有，就跟着下面的步骤来操作吧。</p><table><thead><tr><th align="center">步骤</th><th align="center">内容</th><th>要点</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">账号注册&#x2F;登录</td><td>未注册：进入<a href="https://github.com/">官网</a>，点击 <code>Sign up</code> ，根据提示注册账号；<br/>已注册：点击右上角的 <code>Sign in</code> ，登录 GitHub 。</td></tr><tr><td align="center">2</td><td align="center">创建新仓库</td><td>点击头像，选择  <code>Your repositories</code> 进入仓库；<br/>点击绿色按钮 <code>New</code> 新建仓库；<br/>填写 <code>Repository name *</code> ;<br/>勾选 <code>Add a README file</code> ；<br/>点击绿色按钮 <code>Create Repository</code> 创建新仓库。</td></tr></tbody></table><p>关于 <code>Repository name *</code>，GitHub 默认提供 <code>.github.io</code> 域名给用户使用，且具有唯一性。如果你想生成的是主域名，如 <a href="https://owner.github.io,则填写/">https://owner.github.io，则填写</a> <code>owner.github.io</code>，其中 <code>owner</code> 是你注册时的用户名。如果你想生成的是子域名，如 <a href="https://owner.github.io/blog%EF%BC%8C%E5%88%99%E5%A1%AB%E5%86%99">https://owner.github.io/blog，则填写</a> <code>blog</code> 即可，同时记得修改 Hexo 配置文件。仓库名可进入仓库的「 Setting -&gt; General -&gt; Repository name -&gt; Rename 」修改。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://owner.github.io/</span> <span class="comment"># 网址，如为子域名，需设置root</span></span><br><span class="line"><span class="attr">root:</span> <span class="comment"># 子域名时设置，如/blog/，此时url为https://owner.github.io/blog</span></span><br></pre></td></tr></table></figure><p>Hexo 部署到 GitHub 仓库，依赖于 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a> 插件。在 Hexo 根目录，执行以下命令安装该插件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>关于部署到 GitHub 的方式，如果你想一劳永逸，可以使用 <a href="https://desktop.github.com/">GitHub 桌面版</a>直接上传本地网站代码到 GitHub 仓库，阅读「 软件部署 」部分即可。如果不想再下载多一个软件占用本地空间，可以拉到「 命令部署 」部分进行操作。</p><h3 id="命令部署"><a href="#命令部署" class="headerlink" title="命令部署"></a>命令部署</h3><p>我们要通过 Git 将本地网站代码传输到 GitHub 仓库，需要利用到 GitHub 仓库的 Git 地址。Git 地址有两种形式，一种是 HTTPS 地址，如 <code>https://github.com/owner/repo.git</code>，另一种是 SSL 地址，如 <code>git@github.com:owner/repo.git</code>。</p><p><img src="/../images/hexo-build/et2e5qc8ov.png" alt="Git地址"></p><p>由于 GitHub 的特性，使用 HTTPS 地址，你每次通过 Git 提交的时候，都需要输入用户名和用户密码，而使用 SSL 地址则无需这样繁琐的操作。如果你使用的是 HTTPS 地址，则在 Hexo 配置文件中填入如下内容，然后就可以执行 Hexo 部署命令了。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/owner/repo.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>  <span class="comment"># 部署的分支</span></span><br></pre></td></tr></table></figure><p>然后在 Hexo 根目录，右键单击 <code>Git Bash Here</code> ，依次执行以下命令即可部署到 GitHub 仓库。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>如果你使用的是 SSH 地址，则需要按如下步骤获取你的密钥。首先，在桌面右键选择 <code>Git Bash here</code>，执行以下命令，自行替换引号内的相应字段。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;注册时的用户名&quot;</span></span><br><span class="line">git config --global user.email  <span class="string">&quot;注册时的用户邮箱号&quot;</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;注册时的用户邮箱号&quot;</span></span><br></pre></td></tr></table></figure><p>此时会询问是否需要密码，不需要直接继续按三次回车即可，然后可以执行以下命令，获取你生成的密钥。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line"><span class="built_in">cat</span> id_rsa.pub</span><br></pre></td></tr></table></figure><p>鼠标选中后右键选择 <code>Copy</code> ，回到 GitHub 的页面，点击「 头像 -&gt; Settings -&gt; SSH and GPG keys -&gt; New SSH key 」，将复制的内容粘贴到 Key 位置。</p><p><img src="/../images/hexo-build/SSH-keys.png" alt="SSH keys"></p><p>配置完成后，你可以通过 <code>ssh -T git@github.com</code> 测试是否成功配置 SSH Key。接着回到新建的仓库，点击 <code>Code</code> ，复制 <code>SSH</code> 地址，然后粘贴到 Hexo 根目录中的 <code>_config.yml</code> 的最后面。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:owner/repo.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>然后在 Hexo 根目录，右键单击 <code>Git Bash Here</code> ，依次执行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>每次部署到 GitHub ，都要执行这三个命令，接下来进入仓库，点击「 Settings -&gt; Pages -&gt; GitHub Pages 」，就可以复制你的域名分享给朋友啦！👏👏👏</p><p>如果你没有看到 GitHub Pages 有地址，你需要在 Branch 选择 main ，然后点保存，稍等片刻后刷新就会出现。</p><h3 id="软件部署"><a href="#软件部署" class="headerlink" title="软件部署"></a>软件部署</h3><p><a href="https://desktop.github.com/">GitHub 桌面版</a>的操作很傻瓜式，直接复制粘贴替换即可，不需要记很多命令，也不需要申请 SSH 密钥等一系列操作，缺点就是会占用本地空间。</p><p>下载安装后，进入页面登录后选择 <code>Clone a repository</code>，选择刚刚新建的仓库，选择 <code>Local Path</code> 用于放置博客 <code>public</code> 的内容。</p><p><img src="/../images/hexo-build/clone.png" alt="clone"></p><p>然后回到 Hexo 根目录，右键单击 <code>Git bash here</code>，执行以下命令构建网站：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>接着，将 Hexo 根目录下的「 Public 」中的所有内容复制到刚刚的 <code>Local Path</code> 中，它就会自动出现在 GitHub 桌面版的界面中，然后按照下图指示操作就会自动部署到 GitHub 仓库中。</p><p><img src="/../images/hexo-build/fetch.png" alt="fetch"></p><p>最后我们回到 GitHub 仓库界面，选择「 Setting -&gt; Pages 」就可以获取我们的域名啦，并且可以发送给朋友看啦！👏👏👏</p><p>如果你没有看到 GitHub Pages 有地址，你需要在 Branch 选择 main ，然后点保存，稍等片刻后刷新就会出现。</p><h2 id="标签插件"><a href="#标签插件" class="headerlink" title="标签插件"></a>标签插件</h2><p>Markdown 的内容格式虽然简单，但是有时它也不尽如人意，在很多方面都无法很好地支持，这时内容编辑者就需要使用纯 HTML 来扩展可能性，这与 Markdown 语法的优美简洁相矛盾。</p><p>为了尽可能避免使用 HTML 以保持内容简洁，Hexo 创建了 Tag Plugins 来规避这些限制。标签插件（Tag Plugins）是 Hexo 独有的插件，用于在文章中快速插入特定的内容，一般呈现为以下三种样式：</p><ul><li><code>&#123;%&nbsp;标签名称 标签参数&nbsp;%&#125;</code></li><li><code>&#123;%&nbsp;标签名称 标签参数&nbsp;%&#125;</code>content<code>&#123;%&nbsp;end标签名称&nbsp;%&#125;</code></li><li><code>&#123;%&nbsp;标签名称 标签参数&nbsp;%&#125;</code>／<code>&lt;!-- 标签名称 标签参数 --&gt;</code>content<code>&lt;!-- end标签名称 --&gt;</code>／<code>&#123;%&nbsp;end标签名称&nbsp;%&#125;</code></li></ul><p>通常无需记忆具体的语法，只要知道每个参数所代表的意义即可，你可以借助<a href="https://shurufa.sogou.com/?r=mac&t=pinyin">搜狗拼音输入法</a>的自定义短语功能，将预设好参数的标签插件添加新短语，从而通过缩写实现快捷输入。</p><p><img src="/../images/hexo-build/LqA5LsZB4p.png" alt="自定义短语"></p><p><img src="/../images/hexo-build/rto0sMWz5l.png" alt="添加新短语"></p><h3 id="内置标签"><a href="#内置标签" class="headerlink" title="内置标签"></a>内置标签</h3><p>下面是 Hexo 支持使用的 Tag Plugins，<code>[ ]</code>内的参数为该标签可以自定义的参数。下表是我为了方便使用而整理的简表，更加详细具体的使用方法请阅读 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html">Hexo 标签外挂文档</a>。</p><table><thead><tr><th align="center">作用</th><th>语法</th></tr></thead><tbody><tr><td align="center">引用</td><td>1️⃣ 引言：<br><code>&#123;%&nbsp;blockquote [author[, source]] [link] [source_link_title]&nbsp;%&#125;</code><br><code>&#123;%&nbsp;endblockquote&nbsp;%&#125;</code><br>2️⃣ 引文：<br><code>&#123;%&nbsp;pullquote [class]&nbsp;%&#125;</code> <br/><code>&#123;%&nbsp;endpullquote&nbsp;%&#125;</code><br/>3️⃣ 引用文章：<br><code>&#123;%&nbsp;post_path filename&nbsp;%&#125;</code> <br><code>&#123;%&nbsp;post_link filename [title] [escape]&nbsp;%&#125;</code><br>4️⃣ 引用文章资源：<br><code>&#123;%&nbsp;asset_path filename&nbsp;%&#125;</code> <br><code>&#123;%&nbsp;asset_img [class names] slug [width] [height] [title text [alt text]]&nbsp;%&#125;</code> <br><code>&#123;%&nbsp;asset_link filename [title] [escape]&nbsp;%&#125;</code></td></tr><tr><td align="center">代码</td><td>1️⃣ 代码块：<br><code>&#123;%&nbsp;codeblock [title] [lang:language] [url] [link text] [additional options]&nbsp;%&#125;</code> <br><code>&#123;%&nbsp;endcodeblock&nbsp;%&#125;</code><br>2️⃣ 反引号代码块：在文本前后添加三个反引号（<code>`</code>）<br>3️⃣ 代码文件：<code>&#123;%&nbsp;include_code [title] [lang:language] [from:line] [to:line] path/to/file&nbsp;%&#125;</code></td></tr><tr><td align="center">图片</td><td><code>&#123;%&nbsp;link text url [external] [title]&nbsp;%&#125;</code></td></tr><tr><td align="center">链接</td><td>指定大小：<code>&#123;%&nbsp;img [class names] /path/to/image [width] [height] '"title text" "alt text"'&nbsp;%&#125;</code></td></tr><tr><td align="center">视频</td><td>1️⃣ YouTube：<code>&#123;%&nbsp;youtube video_id [type] [cookie]&nbsp;%&#125;</code><br>2️⃣ Vimeo：<code>&#123;%&nbsp;vimeo video_id&nbsp;%&#125;</code></td></tr><tr><td align="center">框架</td><td><code>&#123;%&nbsp;iframe url [width] [height]&nbsp;%&#125;</code></td></tr><tr><td align="center">jsFiddle</td><td><code>&#123;%&nbsp;jsfiddle shorttag [tabs] [skin] [width] [height]&nbsp;%&#125;</code></td></tr><tr><td align="center">Gist</td><td><code>&#123;%&nbsp;gist gist_id [filename]&nbsp;%&#125;</code></td></tr><tr><td align="center">Swig 标签</td><td><code>&#123;%&nbsp;raw&nbsp;%&#125;</code><br><code>&#123;%&nbsp;endraw&nbsp;%&#125;</code></td></tr><tr><td align="center">文章摘要和截断</td><td><code>&lt;!-- more --&gt;</code>之前的文字将会被视为摘要，首页和文章内均可看到这段文字。</td></tr></tbody></table><h3 id="主题标签"><a href="#主题标签" class="headerlink" title="主题标签"></a>主题标签</h3><p>下面是 Butterfly 主题支持使用的 Tag Plugins，部分标签插件使用前需要在主题配置文件开启功能，<code>[ ]</code>内的参数为该标签可以自定义的参数。下表是我为了方便使用而整理的简表，更加详细具体的使用方法请阅读 <a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Hexo－Butterfly 标签外挂文档</a>。</p><table><thead><tr><th align="center">作用</th><th>语法</th></tr></thead><tbody><tr><td align="center">提示横幅</td><td>使用前需在主题配置文件开启功能，默认以主题配置为准。<br><code>&#123;%&nbsp;note [class] [no-icon] [style]&nbsp;%&#125;</code><br/><code>&#123;%&nbsp;endnote&nbsp;%&#125;</code></td></tr><tr><td align="center">相册图库</td><td>1️⃣ 图库组合：<br><code>&lt;div class=&quot;gallery-group-main&quot;&gt;</code><br/><code>&#123;%&nbsp;galleryGroup [name] [description] [link] [img-url]&nbsp;%&#125;</code><br/><code>&#123;%&nbsp;galleryGroup [name] [description] [link] [img-url]&nbsp;%&#125;</code><br/><code>&lt;/div&gt;</code><br>2️⃣ 单页多图：<br><code>&#123;%&nbsp;gallery&nbsp;%&#125;</code><br/><code>![图片描述](图片链接)</code><br/><code>![图片描述](图片链接)</code><br/><code>&#123;%&nbsp;endgallery&nbsp;%&#125;</code></td></tr><tr><td align="center">隐藏内容</td><td>1️⃣ 行内隐藏：<br><code>&#123;%&nbsp;hideInline [content],[display],[bg],[color]&nbsp;%&#125;</code><br>2️⃣ 段落隐藏：<br><code>&#123;%&nbsp;hideBlock [display],[bg],[color]&nbsp;%&#125;</code><br/><code>&#123;%&nbsp;endhideBlock&nbsp;%&#125;</code><br>3️⃣ 折叠隐藏：<br><code>&#123;%&nbsp;hideToggle [display],[bg],[color]&nbsp;%&#125;</code><br/><code>&#123;%&nbsp;endhideToggle&nbsp;%&#125;</code></td></tr><tr><td align="center">图表标签</td><td>使用前需在主题配置文件开启功能，具体内容参考<a href="https://mermaid-js.github.io/mermaid/#/">mermaid</a>。<br><code>&#123;%&nbsp;mermaid&nbsp;%&#125;</code><br/><code>&#123;%&nbsp;endmermaid&nbsp;%&#125;</code></td></tr><tr><td align="center">索引菜单</td><td><code>&#123;%&nbsp;tabs [Unique-name], [index]&nbsp;%&#125;</code><br/><code>&lt;!-- tab [Tab caption] [icon] --&gt;</code><br/><code>&lt;!-- endtab --&gt;</code><br/><code>&#123;%&nbsp;endtabs&nbsp;%&#125;</code></td></tr><tr><td align="center">按钮链接</td><td><code>&#123;%&nbsp;btn [url],[text],[icon],[color] [style] [layout] [position] [size]&nbsp;%&#125;</code></td></tr><tr><td align="center">行内图片</td><td><code>&#123;%&nbsp;inlineImg [src] [height]&nbsp;%&#125;</code></td></tr><tr><td align="center">文本高亮</td><td><code>&#123;%&nbsp;label [text] [color]&nbsp;%&#125;</code></td></tr><tr><td align="center">时间线</td><td><code>&#123;%&nbsp;timeline [title],[color]&nbsp;%&#125;</code><br/><code>&lt;!-- timeline [title] --&gt;</code><br/><code>&lt;!-- endtimeline --&gt;</code><br/><code>&lt;!-- timeline [title] --&gt;</code><br/><code>&lt;!-- endtimeline --&gt;</code><br/><code>&#123;%&nbsp;endtimeline&nbsp;%&#125;</code></td></tr><tr><td align="center">友情链接</td><td><code>&#123;%&nbsp;flink&nbsp;%&#125;</code><br/>与友链页面一样，支持 <code>yml</code> 格式<br><code>&#123;%&nbsp;endflink&nbsp;%&#125;</code></td></tr></tbody></table><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://hexo.io/zh-cn/docs/">Hexo 使用文档</a></li><li><a href="https://butterfly.js.org/">Hexo-Butterfly 使用文档</a></li><li><a href="https://hexo.io/zh-cn/docs/tag-plugins.html">Hexo 标签插件（Tag Plugins）</a></li><li><a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Hexo－Butterfly 标签外挂文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
